{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "Just Eat API",
    "x-logo": {
      "url": "https://paredocs.internal.cd.je-labs.com/images/logo_white.png"
    },
    "description": "# Just Eat API\nJust Eat offers services for our various business partners and our consumer applications.\nHow you interact with the API depends on the services you wish to interact with.\n## Security\n### HTTPS\nAll api calls and callbacks require HTTPS. Your service will need a valid SSL certificate and be accessible via the standard SSL port (port 443).\n## Making an API request\nSome API calls require an API key, to authenticate the partner calling the API.\n```\nPUT https://uk-partnerapi.just-eat.io/orders/abcd1234 HTTP/1.1\nAuthorization: JE-API-KEY abcd123456789\n```\nOther calls require a user token in the form of a JWT.\n```\nGET https://uk.api.just-eat.io/consumer/me/orders/uk HTTP/1.1\nAuthorization: Bearer abcd123456789\n```\n\n## Date Formats\n### Date and time formats\nAll dates and times should use the [ISO 8601 standard for representation of dates and times](https://en.wikipedia.org/wiki/ISO_8601).\n\n#### For instance:\n* DueDateWithUtcOffset: `\"2015-05-26T14:52:35.5444292+01:00\"`\n  - Local time: `14:52`\n  - UTC time: `13:52`\n  - UTC offset: `+1hr` (due to daylight time saving)\n* DueDateWithUtcOffset: `\"2015-02-03T11:10:00.0000000+00:00\"`\n  - Local time: `11:10`\n  - UTC time: `11:10`\n  - UTC offset: `0` (no daylight time saving, local time is equivalent to UTC)\n\nNote that the offset may be for a timezone different to your own, so you should alway convert to your own local time for display purposes (e.g. on receipts and terminals).\n\n### Callback timestamps\nTimestamps sent to Just Eat should be recorded as the current local time (including any changes needed to account for daylight saving) with an accompanying offset that shows the difference between the recorded local time and the current UTC time.\n\nIf it is not possible to record timestamps in local time, timestamps may be recorded in UTC time with a 00:00 offset.\n## Async Webhooks\nSome of the webhooks on the platform are configured as being 'async' webhooks. These are for long-running operations, and work as follows:\n  1. Your webhook is invoked with a `?callback={returnUrl}` query string parameter. The `returnUrl` is a unique URL that you will need to send the async response to.\n  2. Return an immediate `202 Accepted` response from the webhook endpoint, to indicate that you have received the request.\n  3. Perform the long-running operation. This can be deemed either a _success_; or a _failure_.\n  4. If the result is a _**success**_, return the following:\n  ```\n  POST {returnUrl} HTTP/1.1\n\n  {\n        \"status\": \"Success\",\n        \"message\": \"{successMessage}\",\n        \"data\": {}   // webhook-specific response object\n  }\n  ```\n  5. Otherwise, if the result is a _**failure**_, return the following:\n  ```\n  POST {returnUrl} HTTP/1.1\n\n  {\n        \"status\": \"Failure\",\n        \"message\": \"{failureMessage}\",\n        \"data\": {}   // webhook-specific response object\n  }\n  ```"
  },
  "x-tagGroups": [
    {
      "name": "Consumer Experience",
      "tags": [
        "Authorization",
        "Consumers",
        "ConsumerOffers",
        "ConsumerQueries",
        "Consumer Queries Webhooks",
        "ConsumerOrders",
        "Search",
        "Basket",
        "Payments",
        "Giftcards",
        "Experiments",
        "Vouchers",
        "Promoted Placement",
        "Menu",
        "Recommendations",
        "Location Services"
      ]
    },
    {
      "name": "Manage Order Journey",
      "tags": [
        "Order Acceptance API",
        "Order Acceptance Webhooks",
        "Order Delivery API",
        "Order Delivery Webhooks",
        "Order API",
        "Order Webhooks",
        "Customer Order Details",
        "DeliveryFee",
        "Delivery Pools API",
        "Attempted Delivery API",
        "Attempted Delivery Webhooks",
        "Checkout",
        "Courier Feedback"
      ]
    },
    {
      "name": "Restaurant Management",
      "tags": [
        "Restaurant Product",
        "Restaurants",
        "RestaurantOffers",
        "Restaurant OrderTimes",
        "Restaurants Webhooks",
        "RestaurantSignup",
        "RestaurantQueries",
        "RestaurantQueries Webhooks",
        "Restaurant Claims",
        "Restaurant Events",
        "Restaurant Events Webhooks",
        "Restaurant API",
        "Restaurant Webhooks",
        "Products",
        "Logistics POS Restaurants",
        "Restaurant Smiley Rating"
      ]
    }
  ],
  "servers": [
    {
      "description": "Proxy server",
      "url": "https://openapi.actionschema.com/just-eatcouk"
    }
  ],
  "paths": {
    "/{tenant}/orders/{orderId}/queries/attempteddelivery": {
      "post": {
        "tags": [
          "Attempted Delivery API",
          "publicly-accessible"
        ],
        "summary": "Delivery Attempt Failed",
        "description": "If the customer hasn't answered the door to collect the order, then an attempted delivery event can be created using this endpoint.",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "description": "Request tenant e.g. uk.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderId",
            "in": "path",
            "description": "Id for the order.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Containing a partner issued API key e.g. `JE-API-KEY ABCDE123456789`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "An object for providing the reason that the attempted delivery event is being created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create-attempted-delivery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request - returned if providing invalid data such as an unacceptable reason code"
          },
          "401": {
            "description": "Unauthorized - consumer has not provided the necessary credentials"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "x-status": "Stable"
      }
    },
    "/{tenant}/orders/{orderId}/queries/attempteddelivery/resolution/redeliverorder": {
      "post": {
        "tags": [
          "Attempted Delivery API",
          "publicly-accessible"
        ],
        "summary": "Request Redelivery of the Order",
        "description": "If the customer responds, then you can trigger the redelivery of an order through this endpoint",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "description": "Request tenant e.g. uk.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderId",
            "in": "path",
            "description": "Id for the order.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Containing a partner issued API key e.g. `JE-API-KEY ABCDE123456789`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "An object for providing the new status of the order and the updated due date",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/resolve-attempted-delivery-redeliver"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request - returned if providing invalid data such as an unacceptable reason code"
          },
          "401": {
            "description": "Unauthorized - consumer has not provided the necessary credentials"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "x-status": "Stable"
      }
    },
    "/attempted-delivery-query-resolved": {
      "put": {
        "tags": [
          "Attempted Delivery Webhooks",
          "publicly-accessible"
        ],
        "summary": "Attempted delivery query resolved",
        "description": "This webhook will be invoked whenever an attempted delivery query has been resolved.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/attempted-delivery-resolved"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Respond with a 200 status code to indicate that you have received the notification."
          }
        },
        "x-status": "Stable"
      }
    },
    "/delivery-failed": {
      "put": {
        "tags": [
          "Attempted Delivery Webhooks",
          "publicly-accessible"
        ],
        "summary": "Delivery Attempt Failed",
        "description": "This webhook will be invoked whenever an attempted delivery event is created from the device.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/attempted-delivery-created"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Respond with a 200 status code to indicate that you have received the notification."
          }
        }
      }
    },
    "/checkout/{tenant}/{checkoutId}": {
      "get": {
        "tags": [
          "Checkout",
          "publicly-accessible"
        ],
        "summary": "Get Checkout",
        "description": "Get the details required to fulfil an order, which includes:\n  - The restaurant selling the items to be purchased\n  - The customer making the purchase\n  - How, where and when the items will be received by the customer\n  - Instructions about the order\n",
        "x-status": "Stable",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "description": "A two-character country code. \n\nThe following countries are supported:\n  - United Kingdom (UK)\n  - Australia (AU)\n  - New Zealand (NZ)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "checkoutId",
            "in": "path",
            "description": "A unique identifier for a checkout. This is currently a Basket Id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "User-Agent",
            "in": "header",
            "description": "Allows the server to identify the application making the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK : Request has succeeded.",
            "headers": {
              "cache-control": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "no-store"
                  ]
                },
                "description": "Response caching must not be applied."
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutGetResponse"
                },
                "example": {
                  "restaurant": {
                    "id": "1234",
                    "availabilityId": "5678"
                  },
                  "serviceType": "delivery",
                  "customer": {
                    "firstName": "Joe",
                    "lastName": "Bloggs",
                    "phoneNumber": "+447111111111"
                  },
                  "fulfilment": {
                    "time": {
                      "asap": false,
                      "scheduled": {
                        "from": "2020-01-01T00:30:00.000Z",
                        "to": "2020-01-01T00:30:00.000Z"
                      }
                    },
                    "location": {
                      "address": {
                        "lines": [
                          "1 Bristol Road"
                        ],
                        "locality": "Bristol",
                        "administrativeArea": "Somerset",
                        "postalCode": "BS1 1AA"
                      },
                      "geolocation": {
                        "latitude": 1,
                        "longitude": -1
                      }
                    }
                  },
                  "isFulfillable": true,
                  "issues": [
                    {
                      "code": "RESTAURANT_NOT_TAKING_ORDERS"
                    },
                    {
                      "code": "MINIMUM_ORDER_VALUE_NOT_MET",
                      "currency": "GBP",
                      "minimumOrderValue": 1000,
                      "additionalSpendRequired": 100
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "BAD REQUEST : Cannot process the request due to error by client.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutGet400Error"
                },
                "example": {
                  "fault": {
                    "faultId": "72d7036d-990a-4f84-9efa-ef5f40f6044b",
                    "traceId": "0HLOCKDKQPKIU",
                    "errors": [
                      {
                        "errorCode": "TENANT_INVALID",
                        "description": "The tenant is invalid"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED : Missing authentication credentials to access target resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutDefaultError"
                },
                "example": {
                  "fault": {
                    "faultId": "72d7036d-990a-4f84-9efa-ef5f40f6044b",
                    "traceId": "0HLOCKDKQPKIU",
                    "errors": [
                      {
                        "description": "Authentication required to access this resource"
                      }
                    ]
                  }
                }
              }
            }
          },
          "403": {
            "description": "FORBIDDEN : Not authorised to access target resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutDefaultError"
                },
                "example": {
                  "fault": {
                    "faultId": "72d7036d-990a-4f84-9efa-ef5f40f6044b",
                    "traceId": "0HLOCKDKQPKIU",
                    "errors": [
                      {
                        "description": "Access to the resource is forbidden"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "NOT FOUND : Target resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout404Error"
                },
                "example": {
                  "fault": {
                    "faultId": "72d7036d-990a-4f84-9efa-ef5f40f6044b",
                    "traceId": "0HLOCKDKQPKIU",
                    "errors": [
                      {
                        "errorCode": "TENANT_NOT_SUPPORTED",
                        "description": "The tenant is not supported"
                      }
                    ]
                  }
                }
              }
            }
          },
          "409": {
            "description": "CONFLICT : Request not completed as it conflicts with target resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout409Error"
                },
                "example": {
                  "fault": {
                    "faultId": "72d7036d-990a-4f84-9efa-ef5f40f6044b",
                    "traceId": "0HLOCKDKQPKIU",
                    "errors": [
                      {
                        "errorCode": "CHECKOUT_INVALID",
                        "description": "The checkout is in an invalid state"
                      }
                    ]
                  }
                }
              }
            }
          },
          "429": {
            "description": "TOO MANY REQUESTS : Request not completed as server has received too many requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutDefaultError"
                },
                "example": {
                  "fault": {
                    "faultId": "72d7036d-990a-4f84-9efa-ef5f40f6044b",
                    "traceId": "0HLOCKDKQPKIU",
                    "errors": [
                      {
                        "description": "Couldn't complete request"
                      }
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR : Error on server preventing request from being fulfilled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutDefaultError"
                },
                "example": {
                  "fault": {
                    "faultId": "72d7036d-990a-4f84-9efa-ef5f40f6044b",
                    "traceId": "0HLOCKDKQPKIU",
                    "errors": [
                      {
                        "description": "Internal Server Error"
                      }
                    ]
                  }
                }
              }
            }
          },
          "503": {
            "description": "SERVICE UNAVAILABLE : Server currently unable to fulfil the request. The request can be retried.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutDefaultError"
                },
                "example": {
                  "fault": {
                    "faultId": "72d7036d-990a-4f84-9efa-ef5f40f6044b",
                    "traceId": "0HLOCKDKQPKIU",
                    "errors": [
                      {
                        "description": "Couldn't complete request"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Checkout",
          "publicly-accessible"
        ],
        "summary": "Update Checkout",
        "description": "Update the details required to fulfil an order, which includes:\n  - The customer making the purchase\n  - Where and when the items will be received by the customer\n  - Instructions about the order\n",
        "x-status": "Stable",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "description": "A two-character country code. \n\nThe following countries are supported:\n  - United Kingdom (UK)\n  - Australia (AU)\n  - New Zealand (NZ)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "checkoutId",
            "in": "path",
            "description": "A unique identifier for a checkout. This is currently a Basket Id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "User-Agent",
            "in": "header",
            "description": "Allows the server to identify the application making the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CheckoutUpdateRequest"
              },
              "example": [
                {
                  "op": "add",
                  "path": "/customer",
                  "value": {
                    "phoneNumber": "+447111111111",
                    "dateOfBirth": "1980-01-30"
                  }
                }
              ]
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK : Request has succeeded.",
            "headers": {
              "cache-control": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "no-store"
                  ]
                },
                "description": "Response caching must not be applied."
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutUpdateResponse"
                },
                "example": {
                  "isFulfillable": true,
                  "issues": [
                    {
                      "code": "RESTAURANT_NOT_TAKING_ORDERS"
                    },
                    {
                      "code": "MINIMUM_ORDER_VALUE_NOT_MET",
                      "currency": "GBP",
                      "minimumOrderValue": 1000,
                      "additionalSpendRequired": 100
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "BAD REQUEST : Cannot process the request due to error by client.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutUpdate400Error"
                },
                "example": {
                  "fault": {
                    "faultId": "72d7036d-990a-4f84-9efa-ef5f40f6044b",
                    "traceId": "0HLOCKDKQPKIU",
                    "errors": [
                      {
                        "errorCode": "TENANT_INVALID",
                        "description": "The tenant is invalid"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED : Missing authentication credentials to access target resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutDefaultError"
                },
                "example": {
                  "fault": {
                    "faultId": "72d7036d-990a-4f84-9efa-ef5f40f6044b",
                    "traceId": "0HLOCKDKQPKIU",
                    "errors": [
                      {
                        "description": "Authentication required to access this resource"
                      }
                    ]
                  }
                }
              }
            }
          },
          "403": {
            "description": "FORBIDDEN : Not authorised to access target resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutDefaultError"
                },
                "example": {
                  "fault": {
                    "faultId": "72d7036d-990a-4f84-9efa-ef5f40f6044b",
                    "traceId": "0HLOCKDKQPKIU",
                    "errors": [
                      {
                        "description": "Access to the resource is forbidden"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "NOT FOUND : Target resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout404Error"
                },
                "example": {
                  "fault": {
                    "faultId": "72d7036d-990a-4f84-9efa-ef5f40f6044b",
                    "traceId": "0HLOCKDKQPKIU",
                    "errors": [
                      {
                        "errorCode": "TENANT_NOT_SUPPORTED",
                        "description": "The tenant is not supported"
                      }
                    ]
                  }
                }
              }
            }
          },
          "409": {
            "description": "CONFLICT : Request not completed as it conflicts with target resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout409Error"
                },
                "example": {
                  "fault": {
                    "faultId": "72d7036d-990a-4f84-9efa-ef5f40f6044b",
                    "traceId": "0HLOCKDKQPKIU",
                    "errors": [
                      {
                        "errorCode": "CHECKOUT_INVALID",
                        "description": "The checkout is in an invalid state"
                      }
                    ]
                  }
                }
              }
            }
          },
          "429": {
            "description": "TOO MANY REQUESTS : Request not completed as server has received too many requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutDefaultError"
                },
                "example": {
                  "fault": {
                    "faultId": "72d7036d-990a-4f84-9efa-ef5f40f6044b",
                    "traceId": "0HLOCKDKQPKIU",
                    "errors": [
                      {
                        "description": "Couldn't complete request"
                      }
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR : Error on server preventing request from being fulfilled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutDefaultError"
                },
                "example": {
                  "fault": {
                    "faultId": "72d7036d-990a-4f84-9efa-ef5f40f6044b",
                    "traceId": "0HLOCKDKQPKIU",
                    "errors": [
                      {
                        "description": "Internal Server Error"
                      }
                    ]
                  }
                }
              }
            }
          },
          "503": {
            "description": "SERVICE UNAVAILABLE : Server currently unable to fulfil the request. The request can be retried.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutDefaultError"
                },
                "example": {
                  "fault": {
                    "faultId": "72d7036d-990a-4f84-9efa-ef5f40f6044b",
                    "traceId": "0HLOCKDKQPKIU",
                    "errors": [
                      {
                        "description": "Couldn't complete request"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/checkout/{tenant}/{checkoutId}/fulfilment/availabletimes": {
      "get": {
        "tags": [
          "Checkout",
          "publicly-accessible"
        ],
        "summary": "Get Available Fulfilment Times",
        "description": "Gets a collection of times for when an order can be fulfilled.",
        "x-status": "Stable",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "description": "A two-character country code. \n\nThe following countries are supported:\n  - United Kingdom (UK)\n  - Australia (AU)\n  - New Zealand (NZ)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "checkoutId",
            "in": "path",
            "description": "A unique identifier for a checkout. This is currently a Basket Id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "User-Agent",
            "in": "header",
            "description": "Allows the server to identify the application making the request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK : Request has succeeded.",
            "headers": {
              "cache-control": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "no-store"
                  ]
                },
                "description": "Response caching must not be applied."
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAvailableFulfilmentTimesResponse"
                },
                "example": {
                  "times": [
                    {
                      "from": "2020-01-01T00:30:00.000Z",
                      "to": "2020-01-01T00:45:00.000Z"
                    },
                    {
                      "from": "2020-01-01T00:45:00.000Z",
                      "to": "2020-01-01T01:00:00.000Z"
                    }
                  ],
                  "asapAvailable": true
                }
              }
            }
          },
          "400": {
            "description": "BAD REQUEST : Cannot process the request due to error by client.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutGet400Error"
                },
                "example": {
                  "fault": {
                    "faultId": "72d7036d-990a-4f84-9efa-ef5f40f6044b",
                    "traceId": "0HLOCKDKQPKIU",
                    "errors": [
                      {
                        "errorCode": "TENANT_INVALID",
                        "description": "The tenant is invalid"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "NOT FOUND : Target resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout404Error"
                },
                "example": {
                  "fault": {
                    "faultId": "72d7036d-990a-4f84-9efa-ef5f40f6044b",
                    "traceId": "0HLOCKDKQPKIU",
                    "errors": [
                      {
                        "errorCode": "TENANT_NOT_SUPPORTED",
                        "description": "The tenant is not supported"
                      }
                    ]
                  }
                }
              }
            }
          },
          "409": {
            "description": "CONFLICT : Request not completed as it conflicts with target resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableFulfilmentTimes409Error"
                },
                "example": {
                  "fault": {
                    "faultId": "72d7036d-990a-4f84-9efa-ef5f40f6044b",
                    "traceId": "0HLOCKDKQPKIU",
                    "errors": [
                      {
                        "errorCode": "FULFILMENT_TIME_BANDS_INVALID",
                        "description": "The fulfilment time bands are in an invalid state"
                      }
                    ]
                  }
                }
              }
            }
          },
          "429": {
            "description": "TOO MANY REQUESTS : Request not completed as server has received too many requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutDefaultError"
                },
                "example": {
                  "fault": {
                    "faultId": "72d7036d-990a-4f84-9efa-ef5f40f6044b",
                    "traceId": "0HLOCKDKQPKIU",
                    "errors": [
                      {
                        "description": "Couldn't complete request"
                      }
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR : Error on server preventing request from being fulfilled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutDefaultError"
                },
                "example": {
                  "fault": {
                    "faultId": "72d7036d-990a-4f84-9efa-ef5f40f6044b",
                    "traceId": "0HLOCKDKQPKIU",
                    "errors": [
                      {
                        "description": "Internal Server Error"
                      }
                    ]
                  }
                }
              }
            }
          },
          "503": {
            "description": "SERVICE UNAVAILABLE : Server currently unable to fulfil the request. The request can be retried.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutDefaultError"
                },
                "example": {
                  "fault": {
                    "faultId": "72d7036d-990a-4f84-9efa-ef5f40f6044b",
                    "traceId": "0HLOCKDKQPKIU",
                    "errors": [
                      {
                        "description": "Couldn't complete request"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/orders/{tenant}/{orderId}/consumerqueries/lateorder/restaurantresponse": {
      "post": {
        "tags": [
          "ConsumerQueries",
          "publicly-accessible"
        ],
        "summary": "Response to Late Order Update Request",
        "description": "If a customer has requested an update on the status of a late order, a response can be given by calling this endpoint.",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "description": "Request tenant.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderId",
            "in": "path",
            "description": "Id for the order.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Containing a partner issued API key e.g. `JE-API-KEY ABCDE123456789`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "An object for updating the status of a late order query with the amount of time to add to the delivery estimate in minutes (optional)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LateOrderRestaurantResponse"
              },
              "example": {
                "lateOrderStatus": "OnItsWay",
                "additionalDeliveryTimeToAddMinutes": 5
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request. Returned if the request is invalid i.e. missing a required parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "25bbe062-c53d-4fbc-9d6c-3df6127b94fd",
                  "traceId": "H3TKh4QSJUSwVBCBqEtkKw==",
                  "errors": [
                    {
                      "errorCode": "BadRequest",
                      "description": "Justification notes are required for this query. Query Type:type Tenant:tenant QueryId:queryId OrderId:orderId"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Consumer is not authorized to modify the resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "25bbe062-c53d-4fbc-9d6c-3df6127b94fd",
                  "traceId": "H3TKh4QSJUSwVBCBqEtkKw==",
                  "errors": [
                    {
                      "errorCode": "Unauthorized",
                      "description": "Unauthorized."
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found. Order query or Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "25bbe062-c53d-4fbc-9d6c-3df6127b94fd",
                  "traceId": "H3TKh4QSJUSwVBCBqEtkKw==",
                  "errors": [
                    {
                      "errorCode": "NotFound",
                      "description": "Order 1234 was not found"
                    }
                  ]
                }
              }
            }
          },
          "409": {
            "description": "Conflict. Query not in state to accept response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "25bbe062-c53d-4fbc-9d6c-3df6127b94fd",
                  "traceId": "H3TKh4QSJUSwVBCBqEtkKw==",
                  "errors": [
                    {
                      "errorCode": "Conflict",
                      "description": "Query 1234 cannot be responded to at this time"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500ErrorResponse"
          }
        }
      }
    },
    "/orders/{tenant}/{orderId}/consumerqueries/lateordercompensation/restaurantresponse": {
      "post": {
        "tags": [
          "ConsumerQueries",
          "publicly-accessible"
        ],
        "summary": "Update late order compensation request with Restaurant response",
        "description": "If a customer has requested compensation for a late order, a restaurant response is given by calling this endpoint.",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "description": "Request tenant.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderId",
            "in": "path",
            "description": "Id for the order.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Containing a partner issued API key e.g. `JE-API-KEY ABCDE123456789`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The restaurant response to a late order compensation request. Indicates either a monetary amount (when the compensation is accepted); or a rejection reason (when compensation is rejected).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LateOrderCompensationRestaurantResolution"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request. Returned if the request is invalid - e.g. contains missing or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "25bbe062-c53d-4fbc-9d6c-3df6127b94fd",
                  "traceId": "H3TKh4QSJUSwVBCBqEtkKw==",
                  "errors": [
                    {
                      "errorCode": "BadRequest",
                      "description": "A reason is required when compensation is rejected."
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Consumer is not authorized to modify the resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "25bbe062-c53d-4fbc-9d6c-3df6127b94fd",
                  "traceId": "H3TKh4QSJUSwVBCBqEtkKw==",
                  "errors": [
                    {
                      "errorCode": "Unauthorized",
                      "description": "Unauthorized."
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found. Order query or Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "25bbe062-c53d-4fbc-9d6c-3df6127b94fd",
                  "traceId": "H3TKh4QSJUSwVBCBqEtkKw==",
                  "errors": [
                    {
                      "errorCode": "NotFound",
                      "description": "Order 1234 was not found"
                    }
                  ]
                }
              }
            }
          },
          "409": {
            "description": "Conflict. Query not in state to accept response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "25bbe062-c53d-4fbc-9d6c-3df6127b94fd",
                  "traceId": "H3TKh4QSJUSwVBCBqEtkKw==",
                  "errors": [
                    {
                      "errorCode": "Conflict",
                      "description": "Query 1234 cannot be responded to at this time"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500ErrorResponse"
          }
        },
        "x-status": "Unstable"
      }
    },
    "/late-order-compensation-query": {
      "post": {
        "tags": [
          "Consumer Queries Webhooks",
          "publicly-accessible"
        ],
        "summary": "late order compensation query, restaurant response required",
        "description": "This webhook will be invoked when a late order compensation query has been raised and a restaurant response is required.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/late-order-compensation-query"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Respond with a 200 status code to indicate that you have received the notification"
          }
        }
      }
    },
    "/late-order-query": {
      "post": {
        "tags": [
          "Consumer Queries Webhooks",
          "publicly-accessible"
        ],
        "summary": "late order query, restaurant response required",
        "description": "This webhook will be invoked when a late order query has been raised and a restaurant response is required.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/late-order-query"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Respond with a 200 status code to indicate that you have received the notification."
          }
        }
      }
    },
    "/consumers/{tenant}": {
      "post": {
        "tags": [
          "Consumers",
          "publicly-accessible"
        ],
        "summary": "Create consumer",
        "description": "Creates a consumer for the given tenant.",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "description": "The identifier for the tenant. The only supported tenants are `uk`, `au` and `nz`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConsumerCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Consumer created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConsumerCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "25bbe062-c53d-4fbc-9d6c-3df6127b94fd",
                  "traceId": "H3TKh4QSJUSwVBCBqEtkKw==",
                  "errors": [
                    {
                      "errorCode": "BadRequest",
                      "description": "Email is required."
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "25bbe062-c53d-4fbc-9d6c-3df6127b94fd",
                  "traceId": "H3TKh4QSJUSwVBCBqEtkKw==",
                  "errors": [
                    {
                      "errorCode": "Forbidden",
                      "description": "Not authorized to do this."
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "The specified tenant does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "25bbe062-c53d-4fbc-9d6c-3df6127b94fd",
                  "traceId": "H3TKh4QSJUSwVBCBqEtkKw==",
                  "errors": [
                    {
                      "errorCode": "TenantNotFound",
                      "description": "Tenant not found"
                    }
                  ]
                }
              }
            }
          },
          "409": {
            "description": "The specified email already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "25bbe062-c53d-4fbc-9d6c-3df6127b94fd",
                  "traceId": "H3TKh4QSJUSwVBCBqEtkKw==",
                  "errors": [
                    {
                      "errorCode": "Conflict",
                      "description": "The specified email already exists"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500ErrorResponse"
          }
        }
      },
      "get": {
        "tags": [
          "Consumers",
          "publicly-accessible"
        ],
        "summary": "Get consumers details",
        "description": "Currently this operation only supports retrieving a count of consumer accounts given an email address.",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "description": "The identifier for the tenant.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emailAddress",
            "in": "query",
            "description": "Email address of the consumer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountType",
            "in": "query",
            "description": "The account type of the consumer - currently only 'registered' accounts are supported.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "registered",
              "enum": [
                "registered"
              ]
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Returns the number of consumers that matches the `emailAddress` and `accountType`. The query value should be empty, e.g. `/consumers/uk/?emailAddress=someone@email.com&accountType=registered&count`.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "cache-control": {
                "schema": {
                  "type": "string"
                },
                "description": "Information about how the response can be cached."
              }
            },
            "content": {
              "text/plain": {
                "schema": {
                  "type": "integer"
                },
                "example": 1
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "25bbe062-c53d-4fbc-9d6c-3df6127b94fd",
                  "traceId": "H3TKh4QSJUSwVBCBqEtkKw==",
                  "errors": [
                    {
                      "errorCode": "InvalidEmail",
                      "description": "The Email is missing or invalid."
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "The specified tenant does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "25bbe062-c53d-4fbc-9d6c-3df6127b94fd",
                  "traceId": "H3TKh4QSJUSwVBCBqEtkKw==",
                  "errors": [
                    {
                      "errorCode": "TenantNotFound",
                      "description": "Tenant not found"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500ErrorResponse"
          },
          "501": {
            "description": "The operation has not been implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/5XXErrorSchema"
                },
                "example": {
                  "faultId": "25bbe062-c53d-4fbc-9d6c-3df6127b94fd",
                  "traceId": "H3TKh4QSJUSwVBCBqEtkKw==",
                  "errors": [
                    {
                      "errorCode": "NotImplemented",
                      "description": "Non-Count queries have not been implemented"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/consumers/{tenant}/me/communication-preferences": {
      "get": {
        "tags": [
          "Consumers",
          "publicly-accessible"
        ],
        "summary": "Get communication preferences",
        "description": "Get all communication preferences for a given consumer.",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "description": "Request tenant.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "cache-control": {
                "description": "Information about how the response can be cached.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunicationPreferences"
                },
                "example": {
                  "marketing": {
                    "isDefault": false,
                    "subscribedChannels": [
                      "email",
                      "sms"
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "b39ae4c1-142f-4308-838d-1f01815e1cf1",
                  "traceId": "H3TKh4QSJUSwVBCBqEtkKw==",
                  "errors": [
                    {
                      "errorCode": "Unauthorized",
                      "description": "You are unauthorized to perform this request."
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "b39ae4c1-142f-4308-838d-1f01815e1cf1",
                  "traceId": "H3TKh4QSJUSwVBCBqEtkKw==",
                  "errors": [
                    {
                      "errorCode": "Forbidden",
                      "description": "You are forbidden from performing this request."
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "b39ae4c1-142f-4308-838d-1f01815e1cf1",
                  "traceId": "H3TKh4QSJUSwVBCBqEtkKw==",
                  "errors": [
                    {
                      "errorCode": "NotFound",
                      "description": "Tenant could not be found."
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "$ref": "#/components/responses/500ErrorResponse"
          }
        }
      }
    },
    "/consumers/{tenant}/me/communication-preferences/{type}": {
      "get": {
        "tags": [
          "Consumers",
          "publicly-accessible"
        ],
        "summary": "Get channel subscriptions for a given consumer's communication preference type",
        "description": "Get channel subscriptions for a given consumer's communication preference type",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "description": "Request tenant.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "path",
            "description": "The type of communication preferences.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/CommunicationTypes"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "cache-control": {
                "description": "Information about how the response can be cached.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelSubscriptionsWithDerivedField"
                },
                "example": {
                  "isDefault": false,
                  "subscribedChannels": [
                    "email",
                    "sms"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "b39ae4c1-142f-4308-838d-1f01815e1cf1",
                  "traceId": "H3TKh4QSJUSwVBCBqEtkKw==",
                  "errors": [
                    {
                      "errorCode": "Unauthorized",
                      "description": "You are unauthorized to perform this request."
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "b39ae4c1-142f-4308-838d-1f01815e1cf1",
                  "traceId": "H3TKh4QSJUSwVBCBqEtkKw==",
                  "errors": [
                    {
                      "errorCode": "Forbidden",
                      "description": "You are forbidden from performing this request."
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "b39ae4c1-142f-4308-838d-1f01815e1cf1",
                  "traceId": "H3TKh4QSJUSwVBCBqEtkKw==",
                  "errors": [
                    {
                      "errorCode": "NotFound",
                      "description": "Tenant could not be found."
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "$ref": "#/components/responses/500ErrorResponse"
          }
        }
      },
      "put": {
        "tags": [
          "Consumers",
          "publicly-accessible"
        ],
        "summary": "Set only the channel subscriptions for a given consumer's communication preference type",
        "description": "Set only the channel subscriptions for a given consumer's communication preference type. E.g., An empty list of subscribed Channels implies unsubscribe from all channels.",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "description": "Request tenant.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "path",
            "description": "The type of communication preferences.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/CommunicationTypes"
            }
          }
        ],
        "requestBody": {
          "description": "The list of channels that the consumer should be subscribed to.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChannelSubscriptions"
              },
              "example": {
                "subscribedChannels": [
                  "email",
                  "sms"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "b39ae4c1-142f-4308-838d-1f01815e1cf1",
                  "traceId": "H3TKh4QSJUSwVBCBqEtkKw==",
                  "errors": [
                    {
                      "errorCode": "Unauthorized",
                      "description": "You are unauthorized to perform this request."
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "b39ae4c1-142f-4308-838d-1f01815e1cf1",
                  "traceId": "H3TKh4QSJUSwVBCBqEtkKw==",
                  "errors": [
                    {
                      "errorCode": "NotFound",
                      "description": "Tenant could not be found."
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "$ref": "#/components/responses/500ErrorResponse"
          }
        }
      }
    },
    "/consumers/{tenant}/me/communication-preferences/{type}/subscribedChannels/{channel}": {
      "post": {
        "tags": [
          "Consumers",
          "publicly-accessible"
        ],
        "summary": "Subscribe to a specific communication preference channel",
        "description": "Subscribe to a specific communication preference channel.",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "description": "Request tenant.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "path",
            "description": "The type of communication preferences.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/CommunicationTypes"
            }
          },
          {
            "name": "channel",
            "in": "path",
            "description": "The channel.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/CommunicationChannels"
            }
          }
        ],
        "requestBody": {
          "content": {},
          "required": false
        },
        "responses": {
          "204": {
            "description": "Success",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "b39ae4c1-142f-4308-838d-1f01815e1cf1",
                  "traceId": "H3TKh4QSJUSwVBCBqEtkKw==",
                  "errors": [
                    {
                      "errorCode": "Unauthorized",
                      "description": "You are unauthorized to perform this request."
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "b39ae4c1-142f-4308-838d-1f01815e1cf1",
                  "traceId": "H3TKh4QSJUSwVBCBqEtkKw==",
                  "errors": [
                    {
                      "errorCode": "Forbidden",
                      "description": "You are forbidden from performing this request."
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "b39ae4c1-142f-4308-838d-1f01815e1cf1",
                  "traceId": "H3TKh4QSJUSwVBCBqEtkKw==",
                  "errors": [
                    {
                      "errorCode": "NotFound",
                      "description": "Tenant could not be found."
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "$ref": "#/components/responses/500ErrorResponse"
          }
        }
      },
      "delete": {
        "tags": [
          "Consumers",
          "publicly-accessible"
        ],
        "summary": "Remove subscription of a specific communication preference channel",
        "description": "Remove subscription of a specific communication preference channel.",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "description": "Request tenant.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "path",
            "description": "The type of communication preference.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/CommunicationTypes"
            }
          },
          {
            "name": "channel",
            "in": "path",
            "description": "The channel.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {},
          "required": false
        },
        "responses": {
          "204": {
            "description": "Success",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "b39ae4c1-142f-4308-838d-1f01815e1cf1",
                  "traceId": "H3TKh4QSJUSwVBCBqEtkKw==",
                  "errors": [
                    {
                      "errorCode": "Unauthorized",
                      "description": "You are unauthorized to perform this request."
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "b39ae4c1-142f-4308-838d-1f01815e1cf1",
                  "traceId": "H3TKh4QSJUSwVBCBqEtkKw==",
                  "errors": [
                    {
                      "errorCode": "NotFound",
                      "description": "Tenant could not be found."
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "$ref": "#/components/responses/500ErrorResponse"
          }
        }
      }
    },
    "/delivery-fees/{tenant}": {
      "get": {
        "tags": [
          "DeliveryFee",
          "publicly-accessible"
        ],
        "summary": "Get restaurant delivery fees",
        "description": "Retrieve delivery fees for many restaurants. Returns fees and minimum order values required for delivery orders.",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "description": "Tenant containing the restaurants.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "uk"
          },
          {
            "name": "restaurantIds",
            "in": "query",
            "description": "Restaurant IDs which fees are requested for. e.g. `?restaurantIds=1,2,3,4`",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "maxItems": 200
            },
            "example": [
              "1",
              "2",
              "3",
              "4"
            ]
          },
          {
            "name": "deliveryTime",
            "in": "query",
            "description": "Delivery date/time when fees are required (ISO8601 format).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2019-09-05T12:43:48.431Z"
          },
          {
            "name": "zone",
            "in": "query",
            "description": "Postcode or other location name identifying the location to which delivery is required. For use when precise location is not available. This will be removed in future in favour of location.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "BS1"
          },
          {
            "name": "latlong",
            "in": "query",
            "description": "Point to which delivery is required (latitude, longitude). Supply this where possible as support for zone-only based lookups will be removed in future.",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "number",
                "format": "double"
              },
              "minItems": 2,
              "maxItems": 2
            },
            "example": [
              51.3851513,
              -2.0841275
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "nullable": true,
                  "properties": {
                    "restaurants": {
                      "type": "array",
                      "description": "Collection of restaurants for which delivery fees were found.",
                      "items": {
                        "$ref": "#/components/schemas/RestaurantDeliveryFees"
                      }
                    }
                  }
                },
                "examples": {
                  "flatRate": {
                    "summary": "Single fee, with and without minimum order value",
                    "value": {
                      "restaurants": [
                        {
                          "restaurantId": "1234",
                          "minimumOrderValue": 1000,
                          "bands": [
                            {
                              "minimumAmount": 1000,
                              "fee": 250
                            }
                          ]
                        },
                        {
                          "restaurantId": "5678",
                          "minimumOrderValue": 0,
                          "bands": [
                            {
                              "minimumAmount": 0,
                              "fee": 100
                            }
                          ]
                        }
                      ]
                    }
                  },
                  "flatRateWithFreeTier": {
                    "summary": "Single fee with minimum order value, and free delivery threshold",
                    "value": {
                      "restaurants": [
                        {
                          "restaurantId": "1234",
                          "minimumOrderValue": 1000,
                          "bands": [
                            {
                              "minimumAmount": 1000,
                              "fee": 250
                            },
                            {
                              "minimumAmount": 2000,
                              "fee": 0
                            }
                          ]
                        }
                      ]
                    }
                  },
                  "threeTier": {
                    "summary": "No minimum order value, three pricing tiers",
                    "value": {
                      "restaurants": [
                        {
                          "restaurantId": "1234",
                          "minimumOrderValue": 0,
                          "bands": [
                            {
                              "minimumAmount": 0,
                              "fee": 250
                            },
                            {
                              "minimumAmount": 10,
                              "fee": 100
                            },
                            {
                              "minimumAmount": 2000,
                              "fee": 0
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/delivery/pools": {
      "get": {
        "tags": [
          "Delivery Pools API",
          "publicly-accessible"
        ],
        "summary": "Get your delivery pools",
        "description": "A delivery pool is a named group of drivers which deliver food for a set of restaurants.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "delivery-pool-id": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The name of the pool, used by operations teams, in reports, etc."
                        },
                        "restaurants": {
                          "description": "A list of Just Eat restaurant ids served by the delivery pool.",
                          "type": "array",
                          "items": {
                            "type": "number",
                            "format": "int32"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "d5f72466a6dd49a08166d5a044c5b9e4": {
                        "name": "Toronto - West",
                        "restaurants": [
                          123,
                          456
                        ]
                      },
                      "b9c6673b8e5948b98cfbd14a982de2c2": {
                        "name": "Toronto - East",
                        "restaurants": [
                          789
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "examples": {
                  "response": {
                    "value": "Internal Server Error"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Delivery Pools API",
          "publicly-accessible"
        ],
        "summary": "Create a new delivery pool",
        "description": "A delivery pool is a named group of drivers which deliver food for a set of restaurants.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create-delivery-pool"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Pool has been created."
          },
          "400": {
            "description": "There was something invalid in your request - check response body for details",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "name": [
                        "'Name' should not be empty"
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "examples": {
                  "response": {
                    "value": "Internal Server Error"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/delivery/pools/{deliveryPoolId}": {
      "parameters": [
        {
          "name": "deliveryPoolId",
          "in": "path",
          "required": true,
          "description": "Identifier for the pool",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "Delivery Pools API",
          "publicly-accessible"
        ],
        "summary": "Get an individual delivery pool",
        "description": "A delivery pool is a named group of drivers which deliver food for a set of restaurants.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the pool, used by operations teams, in reports, etc."
                    },
                    "restaurants": {
                      "description": "A list of Just Eat restaurant ids served by the delivery pool.",
                      "type": "array",
                      "items": {
                        "type": "number",
                        "format": "int32"
                      }
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "name": "Toronto - West",
                      "restaurants": [
                        123,
                        456
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The pool could not be found"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "examples": {
                  "response": {
                    "value": "Internal Server Error"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Delivery Pools API",
          "publicly-accessible"
        ],
        "summary": "Delete a delivery pool",
        "description": "The restaurants will no longer be associated with the pool.",
        "responses": {
          "200": {
            "description": "Pool deleted"
          },
          "404": {
            "description": "The pool could not be found"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "examples": {
                  "response": {
                    "value": "Internal Server Error"
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Delivery Pools API",
          "publicly-accessible"
        ],
        "summary": "Modify a delivery pool",
        "description": "Modify a delivery pool, changing its name, restaurants or both",
        "requestBody": {
          "required": true,
          "description": "Request body should contain an object with either or both of the properties. If a property is not specified then the existing values are retained.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patch-delivery-pool"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Pool has been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the pool, used by operations teams, in reports, etc."
                    },
                    "restaurants": {
                      "description": "A list of Just Eat restaurant ids served by the delivery pool.",
                      "type": "array",
                      "items": {
                        "type": "number",
                        "format": "int32"
                      }
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "name": "Toronto - North",
                      "restaurants": [
                        123,
                        456
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was something invalid in your request - check response body for details",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "name": [
                        "'Name' should not be empty"
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The pool could not be found"
          },
          "409": {
            "description": "A restaurant in your request already belongs to another pool",
            "content": {
              "text/plain": {
                "examples": {
                  "response": {
                    "value": "Restaurant(s) are already assigned to pools : `{RestaurantId:55474, PoolId:cccebb96452349b799b71a7adc51df66}`"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "examples": {
                  "response": {
                    "value": "Internal Server Error"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Delivery Pools API",
          "publicly-accessible"
        ],
        "summary": "Replace an existing delivery pool",
        "description": "Replace an existing delivery pool changing all of its properties",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create-delivery-pool"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Pool has been replaced",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the pool, used by operations teams, in reports, etc."
                    },
                    "restaurants": {
                      "description": "A list of Just Eat restaurant ids served by the delivery pool.",
                      "type": "array",
                      "items": {
                        "type": "number",
                        "format": "int32"
                      }
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "name": "Toronto - West",
                      "restaurants": [
                        123,
                        456
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was something invalid in your request - check response body for details",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "name": [
                        "'Name' should not be empty"
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The pool could not be found"
          },
          "409": {
            "description": "A restaurant in your request already belongs to another pool",
            "content": {
              "text/plain": {
                "examples": {
                  "response": {
                    "value": "Restaurant(s) are already assigned to pools : `{RestaurantId:55474, PoolId:cccebb96452349b799b71a7adc51df66}`"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "examples": {
                  "response": {
                    "value": "Internal Server Error"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/delivery/pools/{deliveryPoolId}/availability/relative": {
      "parameters": [
        {
          "name": "deliveryPoolId",
          "in": "path",
          "required": true,
          "description": "Identifier for the pool",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "Delivery Pools API",
          "publicly-accessible"
        ],
        "summary": "Get availability for pickup",
        "description": "Get the current amount of time it will take a driver to collect a new order from a restaurant in the pool.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "bestGuess": {
                      "type": "string",
                      "description": "Your best estimation (hh:mm:ss)"
                    }
                  }
                },
                "examples": {
                  "request": {
                    "value": {
                      "bestGuess": "00:35:00"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The pool could not be found"
          }
        }
      },
      "put": {
        "tags": [
          "Delivery Pools API",
          "publicly-accessible"
        ],
        "summary": "Set availability for pickup",
        "description": "Set the average amount of time it will take a driver to collect a new order from a restaurant in the pool.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/estimated-time"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Update will take effect shortly"
          },
          "404": {
            "description": "The pool could not be found"
          }
        }
      }
    },
    "/delivery/pools/{deliveryPoolId}/hours": {
      "parameters": [
        {
          "name": "deliveryPoolId",
          "in": "path",
          "required": true,
          "description": "Identifier for the pool",
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "tags": [
          "Delivery Pools API",
          "publicly-accessible"
        ],
        "summary": "Set the delivery pools daily start and end times",
        "description": "Set the daily start and end times for a pool or set closed flag if the pool does not operate on that day. Start and end times for all days must be provided. Though the API accepts array of start and end times for each day, multiple start and end time for a day are not accepted. If the end time for a day is equal to or before start time, end time will be considered as time for the next day.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/delivery-pool-hours"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pool hours have been updated"
          },
          "404": {
            "description": "The pool could not be found"
          }
        }
      }
    },
    "/delivery/pools/{deliveryPoolId}/restaurants": {
      "parameters": [
        {
          "name": "deliveryPoolId",
          "in": "path",
          "required": true,
          "description": "Identifier for the pool",
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "tags": [
          "Delivery Pools API",
          "publicly-accessible"
        ],
        "summary": "Add restaurants to an existing delivery pool",
        "description": "Add additional restaurants to a delivery pool",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/delivery-restaurantslist"
                },
                "examples": {
                  "response": {
                    "value": {
                      "restaurants": [
                        123,
                        456
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was something invalid in your request - check response body for details"
          },
          "404": {
            "description": "The pool could not be found"
          },
          "409": {
            "description": "The restaurants could not be added to the pool. Typically this is because they are already assigned to another pool"
          }
        }
      },
      "delete": {
        "tags": [
          "Delivery Pools API",
          "publicly-accessible"
        ],
        "summary": "Remove restaurants from a delivery pool",
        "description": "Remove restaurants from a delivery pool",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "restaurants": {
                    "description": "A list of Just Eat restaurant ids served by the delivery pool.",
                    "type": "array",
                    "items": {
                      "type": "number",
                      "format": "int32"
                    }
                  }
                },
                "example": {
                  "restaurants": [
                    123,
                    456
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pool has been updated"
          },
          "400": {
            "description": "There was something invalid in your request - check response body for details"
          },
          "404": {
            "description": "The pool could not be found"
          }
        }
      }
    },
    "/orders/{orderId}/accept": {
      "put": {
        "tags": [
          "Order Acceptance API",
          "publicly-accessible"
        ],
        "summary": "Accept order",
        "description": "Call when an order has been accepted. An order can only be accepted if it hasn't previously been accepted, rejected, cancelled or ignored",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/order-accept-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Order could not be found"
          },
          "409": {
            "description": "Conflict. This order has either already been accepted, rejected or ignored by restaurant or cancelled by ops"
          }
        }
      }
    },
    "/orders/{orderId}/cancel": {
      "put": {
        "tags": [
          "Order Acceptance API",
          "publicly-accessible"
        ],
        "summary": "Cancel order",
        "description": "Call when an order has been cancelled by Ops. Cancelling an order overrides any previous accept/reject calls. This should not be used for restaurant rejection but only from Ops involvement",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/order-cancel-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Order could not be found"
          },
          "409": {
            "description": "Conflict. This order has already been cancelled"
          }
        }
      }
    },
    "/orders/{orderId}/complete": {
      "post": {
        "tags": [
          "Order Acceptance API",
          "publicly-accessible"
        ],
        "summary": "Complete order",
        "description": "Call when an order is complete. An order can only be marked as complete if it hasn't already been marked as cancelled or complete.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "The ID of the order to mark as complete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content - status updated successfully"
          },
          "404": {
            "description": "Not found - order could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "b6a1d658-dda4-41b6-a9a5-dbfb7ba7b2aa",
                  "errors": [
                    {
                      "description": "Order could not be found"
                    }
                  ]
                }
              }
            }
          },
          "409": {
            "description": "Conflict - this order has already been marked as cancelled or complete",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "9c63827b-6fad-46bf-9e9a-9aafec941824",
                  "errors": [
                    {
                      "description": "Order cannot be marked as complete because it is already marked as cancelled"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500ErrorResponse"
          }
        }
      },
      "x-status": "Draft"
    },
    "/orders/{orderId}/duedate": {
      "put": {
        "tags": [
          "Order Acceptance API",
          "publicly-accessible"
        ],
        "summary": "Update order ETA",
        "description": "Use this to update the estimated time of arrival for an order (i.e. when you expect the customer to receive the food). NOTE: An initial estimate is given [upon acceptance](#/paths/~1orders~1{orderId}~1accept/put). This endpoint can be used to update that estimate.\n",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/order-due-date-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "The due date is missing, or out of range (either in the past, or > 7 days in the future)."
          },
          "404": {
            "description": "The order could not be found."
          }
        }
      }
    },
    "/orders/{orderId}/ignore": {
      "put": {
        "tags": [
          "Order Acceptance API",
          "publicly-accessible"
        ],
        "summary": "Ignore order",
        "description": "Call when an order has been ignored by restaurant. An order can only be ignored if it hasn't previously been accepted, rejected, cancelled or ignored",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Order could not be found"
          },
          "409": {
            "description": "Conflict. This order has either already been accepted, rejected or ignored by restaurant or cancelled by ops"
          }
        }
      }
    },
    "/orders/{orderId}/readyforcollection": {
      "post": {
        "tags": [
          "Order Acceptance API",
          "publicly-accessible"
        ],
        "summary": "Mark order as ready for collection",
        "description": "Call when a collection order is ready to be collected by the customer. An order can only be marked as ready for collection if it is a collection order in the accepted state.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "The ID of the order to mark as ready for collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content - status updated successfully"
          },
          "400": {
            "description": "Bad request - order cannot be marked as ready for collection because it is not a collection order",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "aa5d282c-498e-47dd-acca-d4bb811a8f9d",
                  "errors": [
                    {
                      "description": "Order cannot be marked as ready for collection because it is not a collection order"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not found - order could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "15c27f5b-5121-4c1f-bea3-34378dff2a79",
                  "errors": [
                    {
                      "description": "Order could not be found"
                    }
                  ]
                }
              }
            }
          },
          "409": {
            "description": "Conflict - this order is not in the accepted state",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "9c63827b-6fad-46bf-9e9a-9aafec941824",
                  "errors": [
                    {
                      "description": "Order cannot be marked as ready for collection because it is already marked as complete"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500ErrorResponse"
          }
        }
      },
      "x-status": "Draft"
    },
    "/orders/{orderId}/reject": {
      "put": {
        "tags": [
          "Order Acceptance API",
          "publicly-accessible"
        ],
        "summary": "Reject order",
        "description": "Call when an order has been rejected. An order can only be rejected if it hasn't previously been accepted, rejected, cancelled or ignored",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/order-reject-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Order could not be found"
          },
          "409": {
            "description": "Conflict. This order has either already been accepted, rejected or ignored by restaurant or cancelled by ops"
          }
        }
      }
    },
    "/acceptance-requested": {
      "post": {
        "tags": [
          "Order Acceptance Webhooks",
          "publicly-accessible"
        ],
        "summary": "Acceptance requested",
        "description": "This webhook will be invoked whenever acceptance has been requested for the order.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/acceptance-requested"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Respond with a 200 status code to indicate that you have received the notification."
          }
        }
      }
    },
    "/order-accepted": {
      "post": {
        "tags": [
          "Order Acceptance Webhooks",
          "publicly-accessible"
        ],
        "summary": "Order accepted",
        "description": "This webhook will be invoked whenever the order was accepted.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/order-accepted"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Respond with a 200 status code to indicate that you have received the notification."
          }
        }
      }
    },
    "/order-cancelled": {
      "post": {
        "tags": [
          "Order Acceptance Webhooks",
          "publicly-accessible"
        ],
        "summary": "Order cancelled",
        "description": "This webhook will be invoked whenever the order was cancelled.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/order-cancelled"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Respond with a 200 status code to indicate that you have received the notification."
          }
        }
      }
    },
    "/order-rejected": {
      "post": {
        "tags": [
          "Order Acceptance Webhooks",
          "publicly-accessible"
        ],
        "summary": "Order rejected",
        "description": "This webhook will be invoked whenever the order was rejected.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/order-rejected"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Respond with a 200 status code to indicate that you have received the notification."
          }
        }
      }
    },
    "/redelivery-requested": {
      "put": {
        "tags": [
          "Order Acceptance Webhooks",
          "publicly-accessible"
        ],
        "summary": "Customer Requested Redelivery",
        "description": "This webhook will be invoked whenever the customer responds to the attempted delivery notification.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/attempted-delivery-response-received"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Respond with a 200 status code to indicate that you have received the notification."
          }
        }
      }
    },
    "/delivery/estimate": {
      "get": {
        "tags": [
          "Order Delivery API",
          "publicly-accessible"
        ],
        "summary": "Get delivery estimate",
        "description": "Get delivery estimate",
        "parameters": [
          {
            "name": "restaurantReference",
            "in": "query",
            "description": "The reference of the restaurant to estimate the delivery time from.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toLat",
            "description": "The latitude of the position to estimate the delivery time to.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toLon",
            "in": "query",
            "description": "The longitude of the position to estimate the delivery time to.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toPostcode",
            "in": "query",
            "required": false,
            "description": "The postcode to estimate the delivery time to.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/estimated-delivery-time"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/orders/{orderId}/deliverystate/atdeliveryaddress": {
      "put": {
        "tags": [
          "Order Delivery API",
          "publicly-accessible"
        ],
        "summary": "Update order with driver at delivery address details",
        "description": "<p>The _at delivery address_ callback should be sent when the driver thinks that they have arrived at the specified delivery address.</p><p>NB&semi; This callback should be distinct from the delivered callback, as Just Eat use this callback to understand how much time is spent locating the customer's address.</p>",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Just Eat order identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/delivery-details"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/orders/{orderId}/deliverystate/atrestaurant": {
      "put": {
        "tags": [
          "Order Delivery API",
          "publicly-accessible"
        ],
        "summary": "Update order with driver at restaurant details",
        "description": "The _at restaurant_ callback should be sent when the driver arrives at the restaurant and is ready to collect the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Just Eat order identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/delivery-driver-details-with-eta"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/orders/{orderId}/deliverystate/atrestauranteta": {
      "put": {
        "tags": [
          "Order Delivery API",
          "publicly-accessible"
        ],
        "summary": "Update the driver's estimated time to arrive at the Restaurant",
        "description": "<p>In the UK, this endpoint updates the estimated arrival time at the restaurant. This value can be overridden from other endpoints like <a href=\"https://uk.api.just-eat.io/docs#tag/Order-Delivery-API/paths/~1orders~1{orderId}~1deliverystate~1driverlocation/put\">Driver Locations</a> </p> <p> This endpoint should be used to set initial at restaurant ETAs prior to driver assignment where available. The earlier a delivery partner is able to provide an estimate of when the driver will arrive at the restaurant the more likely it is that driver arrival and order preparation will be aligned. </p> <p> In other tenants (Not UK):Note that if set for a given order, this Eta will NOT be overridden by any other at restaurant ETAs provided in `DriverAssigned` or `DriverLocation` requests</p> <p>This value is significant since it informs when a restaurant is instructed to start preparing food. When the time remaining between current time and the estimated time of arrival becomes less than the restaurant's configured preparation time, food preparation is initiated</p>",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Just Eat order identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/eta-estimate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/orders/{orderId}/deliverystate/delivered": {
      "put": {
        "tags": [
          "Order Delivery API",
          "publicly-accessible"
        ],
        "summary": "Update order with delivered details",
        "description": "The _delivered_ callback should be sent when the driver has handed the food to the customer and completed the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Just Eat order identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/delivery-details"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/orders/{orderId}/deliverystate/driverassigned": {
      "put": {
        "tags": [
          "Order Delivery API",
          "publicly-accessible"
        ],
        "summary": "Update order with driver assigned details",
        "description": "The _driver assigned_ callback should be sent when a driver is assigned to the order. It should communicate important details about the driver - and also an estimated time for the driver to arrive at the restaurant and delivery address.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Just Eat order identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/delivery-driver-assigned-details"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/orders/{orderId}/deliverystate/driverlocation": {
      "put": {
        "tags": [
          "Order Delivery API",
          "publicly-accessible"
        ],
        "summary": "Update the driver's current location",
        "description": "<p>Just Eat requires all delivery partners to send regular driver location callbacks, that record the GPS location of the drivers assigned to each order</p><p>Partners should aim to supply this callback approximately every 10 seconds.</p><p>Please provide an up-to-date ETA for when the driver will reach the restaurant in this request - this value is significant since it informs when a restaurant is instructed to start preparing food - when the time remaining between current time and the estimated time of arrival becomes less than the restaurant's configured preparation time, food preparation is initiated</p><p>Note that at restaurant Eta provided in this request will NOT override any ETA set in the Driver At Restaurant Eta request</p>",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Just Eat order identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/delivery-driver-location"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/orders/{orderId}/deliverystate/driverunassigned": {
      "put": {
        "tags": [
          "Order Delivery API",
          "publicly-accessible"
        ],
        "summary": "Update order with driver unassigned details",
        "description": "The _driver unassigned_ callback should be sent when a driver is unassigned from the order. It may details about the reason for cancelling the assignment, the driver details, and any newer at restaurant and customer estimations.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Just Eat order identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/delivery-driver-unassigned-details"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/extensibleObject"
                },
                "example": {
                  "partnerId": [
                    "Partner id was not found or could not be parsed"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/orders/{orderId}/deliverystate/onitsway": {
      "put": {
        "tags": [
          "Order Delivery API",
          "publicly-accessible"
        ],
        "summary": "Update order with driver on its way details",
        "description": "The _on its way_ callback should be sent when the driver departs the restaurant with the customer's order. It should contain an ETA that records when the driver expects to arrive at the customer's address.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/on-its-way-details"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/orders/deliverystate/driverlocation": {
      "put": {
        "tags": [
          "Order Delivery API",
          "publicly-accessible"
        ],
        "summary": "Update current driver locations (bulk upload)",
        "description": "Current driver location (bulk upload)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bulk-delivery-details-list"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/driver-assigned-to-delivery": {
      "put": {
        "tags": [
          "Order Delivery Webhooks",
          "publicly-accessible"
        ],
        "summary": "Driver Assigned to Delivery",
        "description": "Driver Assigned to Delivery",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/driver-status"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/driver-at-delivery-address": {
      "put": {
        "tags": [
          "Order Delivery Webhooks",
          "publicly-accessible"
        ],
        "summary": "Driver at delivery address",
        "description": "Driver at delivery address",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/driver-status"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/driver-at-restaurant": {
      "put": {
        "tags": [
          "Order Delivery Webhooks",
          "publicly-accessible"
        ],
        "summary": "Driver at restaurant",
        "description": "Driver at restaurant",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/driver-status"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/driver-has-delivered-order": {
      "put": {
        "tags": [
          "Order Delivery Webhooks",
          "publicly-accessible"
        ],
        "summary": "Driver has delivered order",
        "description": "Driver has delivered order",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/driver-status"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/driver-location": {
      "put": {
        "tags": [
          "Order Delivery Webhooks",
          "publicly-accessible"
        ],
        "summary": "Driver Location",
        "description": "Driver Location",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/driver-location"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/driver-on-their-way-to-delivery-address": {
      "put": {
        "tags": [
          "Order Delivery Webhooks",
          "publicly-accessible"
        ],
        "summary": "Driver on their way to delivery address",
        "description": "Driver on their way to delivery address",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/driver-status"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/order-is-ready-for-pickup": {
      "put": {
        "tags": [
          "Order Delivery Webhooks",
          "publicly-accessible"
        ],
        "summary": "Order ready for pickup",
        "description": "<p>The \"Ready for pickup\" event lets the delivery partner know that the food has been cooked and is now ready for collection up from the restaurant.</p><p>When this event is received, it is important that you let your driver know that the order should now be collected from inside the restaurant. For example, this driver notification could take the form of an in-app notification or an SMS message.</p><p>This communication is needed to support restaurants who are unable to accommodate drivers inside their premises, as it allows restaurants to notify drivers waiting outside that they should come inside to collect their order.</p><p>NB&semi; This event can be sent by the restaurant at any point after the order is accepted by the restaurant (for instance, this event may be sent before the driver has arrived at the restaurant).</p>",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ready-for-pickup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Upon successful receipt of the event, delivery partners should return a 200 HTTP status code indicating acknowledgement of transmission."
          },
          "default": {
            "description": "In the unlikely case of unknown errors, JUST EAT will log a raw response. If possible, the response should have the following format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Timestamp": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "Message": {
                      "type": "string"
                    },
                    "Details": {
                      "type": "string"
                    },
                    "OrderId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/order-requires-delivery-acceptance": {
      "put": {
        "tags": [
          "Order Delivery Webhooks",
          "publicly-accessible"
        ],
        "summary": "Order requires delivery acceptance",
        "description": "This webhook will be invoked when we have determined that an order is required acceptance for delivery. Upon receiving the request, the order should be scheduled for pickup by a courier/driver. We expect an immediate `201` response from this webhook to denote that you have received the request.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/connectorder-list"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "In the event of successful handling of the request, a 201 status code should be returned, indicating acknowledgement of transmission success."
          },
          "default": {
            "description": "In the case that the order cannot be accepted, an appropriate HTTP status code, such as 400 (Bad request) or 500 (Internal server error) should be returned.  In addition to the HTTP status code, a specific reason code and explanatory message should be provided within the response body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "description": "<p>Each code should be selected from the following list of valid reasons.</p><table><tr><th>code</th><th>explanation</th></tr><tr><td>`outside_hours`</td><td>Delivery partner is closed and not accepting requests.</td></tr><tr><td>`too_busy`</td><td>Delivery partner does not have enough capacity to accept this request.</td></tr><tr><td>`too_far`</td><td>The customer is too far away from the restaurant, either by time or distance.</td></tr><tr><td>`not_supported`</td><td>Delivery partner is currently unable to deliver to the customer's location.</td></tr><tr><td>`bad_address`</td><td>The order contains an address that could not be processed or understood.</td></tr><tr><td>`bad_request`</td><td>The order format is invalid or the order contains required data or information that cannot be processed.</td></tr><tr><td>`restaurant_not_configured`</td><td>Delivery partner is not configured to accept requests for given restaurant.</td></tr><tr><td>`duplicate`</td><td>The request has already been processed before.</td></tr><tr><td>`other`</td><td>Any validation failure or unexpected error not covered by the above codes.</td></tr></table>",
                            "type": "string",
                            "enum": [
                              "outside_hours",
                              "too_busy",
                              "too_far",
                              "not_supported",
                              "bad_address",
                              "bad_request",
                              "restaurant_not_configured",
                              "duplicate",
                              "other"
                            ]
                          },
                          "message": {
                            "description": "<p>The accompanying message should, in each case, provide an explanation of the specific problem that was experienced.</p><br/><p>Please note that the accompanying explanatory text are part of the code is only intended as an explanation of each reason code - and should not be returned to us as the message.</p>",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/orders": {
      "post": {
        "tags": [
          "Order API",
          "publicly-accessible"
        ],
        "summary": "Create order",
        "description": "Create order",
        "parameters": [
          {
            "name": "x-je-api-version",
            "in": "header",
            "description": "The api version to use. Version 2.0 is the only available version.",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1
            },
            "example": 2
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/order-request-v2"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "OrderId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Request is for deprecated API version or has failed validation in some way - see response body for details"
          },
          "409": {
            "description": "Conflict - you've already told us about an order with this `OrderReference`",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "OrderId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/order-ready-for-preparation-async": {
      "post": {
        "tags": [
          "Order Webhooks",
          "publicly-accessible"
        ],
        "summary": "Order ready for preparation (async)",
        "description": "This webhook will be invoked when we have determined that an order is ready for preparation. Upon receiving the request, you should perform any preparation-related activities, such as sending the order to the POS system / kitchen screen.\n**NOTE:** This version of the webhook is asynchronous, and we expect a response in two parts:\n  1. We expect an immediate `202` response from this webhook to denote that you have received the request;\n  2. Following that, we expect an [async callback](#section/Async-Webhooks) - indicating either success or failure of the operation. The body for the async callbacks are as below:\n  \n  **Success callback**\n  ```\n  {\n        \"status\": \"Success\",\n        \"message\": \"Order successfully sent to POS\",\n        \"data\": {}\n  }\n  ```\n  **Failure callback**\n  ```\n  {\n        \"status\": \"Failure\",\n        \"message\": \"{errorMessage}\",   // e.g. \"The POS is currently in use\"\n        \"data\": {}\n  }\n  ```\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/order-ready-for-preparation"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Upon successful receipt of this event, a `202` status code should be returned, indicating the request has been accepted. You should then later respond with the result of processing this request, via the [callback URL](#section/Async-Webhooks) endpoint."
          },
          "400": {
            "description": "Should the initial validation of the order fail, return a `400` status code. NOTE: In this instance we do not also expect a failure callback via the async callback URL."
          }
        }
      }
    },
    "/order-ready-for-preparation-sync": {
      "post": {
        "tags": [
          "Order Webhooks",
          "publicly-accessible"
        ],
        "summary": "Order ready for preparation (sync)",
        "description": "This webhook will be invoked when we have determined that an order is ready for preparation. Upon receiving the request, you should perform any preparation-related activities, such as sending the order to the POS system / kitchen screen.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/order-ready-for-preparation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Respond with a 200 status code to indicate that you have received the notification."
          }
        }
      }
    },
    "/send-to-pos-failed": {
      "post": {
        "tags": [
          "Order Webhooks",
          "publicly-accessible"
        ],
        "summary": "Send to POS failed",
        "description": "This webhook will be invoked if we experience an error or timeout in sending an order to the underlying POS / kitchen screen. When notified via this webhook, typically you will perform some form of alerting or backup flow (e.g. ask the operator to enter the order manually into the POS). NOTE: This message contains the `OrderId`, but not the full order. It is assumed that you have stored/cached the full order details earlier in the flow - e.g. via the [/order-ready-for-preparation](#/paths/~1order-ready-for-preparation-sync/post) webhook.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/send-to-pos-failed"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Respond with a 200 status code to indicate that you have received the notification."
          }
        }
      }
    },
    "/restaurants/{tenant}/{restaurantId}/customerclaims": {
      "get": {
        "tags": [
          "Restaurant Claims",
          "publicly-accessible"
        ],
        "summary": "Get claims",
        "description": "Provides claims for a given restaurant with optional filtering",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "description": "Two letter code indicating the tenant",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "restaurantId",
            "in": "path",
            "required": true,
            "description": "Just Eat restaurant identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "required": false,
            "description": "Start date limiter",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "required": false,
            "description": "End date limiter",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Pagination limit",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true,
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "description": "Pagination offset",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0,
              "nullable": true
            }
          },
          {
            "name": "Accept",
            "in": "header",
            "required": false,
            "description": "Indicates what type of response client understands and is also used for content type negotiation (if version is specified), otherwise tells the server to return the latest version",
            "example": "application/json;v=1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded",
            "headers": {
              "cache-control": {
                "description": "Information about how the response can be cached",
                "schema": {
                  "type": "string"
                }
              },
              "Content-Type": {
                "description": "Content type of document including version",
                "schema": {
                  "type": "string"
                },
                "example": "application/json;v=1"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Returned if the request is invalid e.g. has incorrect date limiter format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "25bbe062-c53d-4fbc-9d6c-3df6127b94fd",
                  "traceId": "H3TKh4QSJUSwVBCBqEtkKw==",
                  "errors": [
                    {
                      "description": "Bad Request. End date limiter should have date-time format."
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401UnauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403ForbiddenResponse"
          },
          "500": {
            "$ref": "#/components/responses/500ErrorResponse"
          }
        },
        "x-status": "Draft"
      }
    },
    "/restaurants/{tenant}/{restaurantId}/customerclaims/{id}": {
      "get": {
        "tags": [
          "Restaurant Claims",
          "publicly-accessible"
        ],
        "summary": "Get order claim",
        "description": "Get information about a order claim",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "description": "Two letter code indicating the tenant",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "restaurantId",
            "in": "path",
            "required": true,
            "description": "Just Eat restaurant identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Claim identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept",
            "in": "header",
            "required": false,
            "description": "Indicates what type of response client understands and is also used for content type negotiation (if version is specified), otherwise tells the server to return the latest version",
            "example": "application/json;v=1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded",
            "headers": {
              "cache-control": {
                "description": "Information about how the response can be cached.",
                "schema": {
                  "type": "string"
                }
              },
              "Content-Type": {
                "description": "Content type of document including version",
                "schema": {
                  "type": "string"
                },
                "example": "application/json;v=1"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderClaim"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401UnauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403ForbiddenResponse"
          },
          "404": {
            "description": "Not Found. Claim could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500ErrorResponse"
          }
        },
        "x-status": "Draft"
      }
    },
    "/restaurants/{tenant}/{restaurantId}/customerclaims/{id}/restaurantresponse": {
      "post": {
        "tags": [
          "Restaurant Claims",
          "publicly-accessible"
        ],
        "summary": "Submit a restaurant response for the claim",
        "description": "Submit a restaurant response for the claim, where the restaurant can tell us if they accept or reject the claim",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "description": "Two letter code indicating the tenant",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "restaurantId",
            "in": "path",
            "required": true,
            "description": "Just Eat restaurant identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Claim identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "description": "Indicates the representation of the request body the client is sending (including version)",
            "schema": {
              "type": "string"
            },
            "example": "application/json;v=1"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "requestBody": {
          "description": "Payload containing the response of the restaurant on the order claim",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderClaimRestaurantResponse"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Request succeeded. Your response to the claim has been submitted"
          },
          "400": {
            "description": "Bad Request. Returned if the request is invalid e.g. decision value is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "25bbe062-c53d-4fbc-9d6c-3df6127b94fd",
                  "traceId": "H3TKh4QSJUSwVBCBqEtkKw==",
                  "errors": [
                    {
                      "errorCode": "IncorrectDecision",
                      "description": "Bad Request. Incorrect decision"
                    },
                    {
                      "errorCode": "MissingDecision",
                      "description": "Bad Request. Missing decision"
                    },
                    {
                      "errorCode": "MissingItems",
                      "description": "Bad Request. The request you are sending is missing some items for the claim you are trying to resolve"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401UnauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403ForbiddenResponse"
          },
          "404": {
            "description": "Not Found. Claim could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                }
              }
            }
          },
          "409": {
            "description": "Conflict. The claim you are attempting to resolve is has been resolved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "25bbe062-c53d-4fbc-9d6c-3df6127b94fd",
                  "traceId": "H3TKh4QSJUSwVBCBqEtkKw==",
                  "errors": [
                    {
                      "errorCode": "AlreadyResolved",
                      "description": "The claim you are attempting to resolve is has been resolved"
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable. The claim you are attempting to update does not contain the items from the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "25bbe062-c53d-4fbc-9d6c-3df6127b94fd",
                  "traceId": "H3TKh4QSJUSwVBCBqEtkKw==",
                  "errors": [
                    {
                      "errorCode": "WrongItems",
                      "description": "The claim you are attempting to update does not contain the items from the request"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500ErrorResponse"
          }
        },
        "x-status": "Draft"
      }
    },
    "/restaurants/{tenant}/{restaurantId}/customerclaims/{id}/restaurantresponse/justification": {
      "put": {
        "tags": [
          "Restaurant Claims",
          "publicly-accessible"
        ],
        "summary": "Add reason and comments to the response",
        "description": "Add reason and optional comments in case of rejection of order claim",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "description": "Two letter code indicating the tenant",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "restaurantId",
            "in": "path",
            "required": true,
            "description": "Just Eat restaurant identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Claim identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "description": "Indicates the representation of the request body the client is sending (including version)",
            "schema": {
              "type": "string"
            },
            "example": "application/json;v=1"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "requestBody": {
          "description": "Payload containing the reason of rejection and optional comments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Justification"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Request succeeded. Justification was successfully submitted"
          },
          "400": {
            "description": "Bad Request. Returned if the request is invalid e.g. reason doesn't match any of the predefined values",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "25bbe062-c53d-4fbc-9d6c-3df6127b94fd",
                  "traceId": "H3TKh4QSJUSwVBCBqEtkKw==",
                  "errors": [
                    {
                      "description": "Bad Request. Reason doesn't match any of the predefined values"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401UnauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403ForbiddenResponse"
          },
          "404": {
            "description": "Not Found. Claim could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                }
              }
            }
          },
          "409": {
            "description": "Conflict. The claim you are attempting to update is older than the current claim. Fetch the last copy of the entity and try the request again.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500ErrorResponse"
          }
        },
        "x-status": "Draft"
      }
    },
    "/v1/{tenant}/restaurants/{id}/event/offline": {
      "delete": {
        "tags": [
          "Restaurant Events",
          "publicly-accessible"
        ],
        "summary": "Delete Offline Event",
        "description": "Removes specified restaurant from offline events. If role header is `System` or `Operations` only events created by the specified role will be affected. If role header is `Restaurant` then all events that have `allowRestaurantOverride=true` will be affected.",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "description": "The identifier for the tenant",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The identifier for the restaurant",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "X-JE-Requester",
            "in": "header",
            "description": "Name of the user or system creating the event. Used for auditing purposes",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "X-JE-User-Role",
            "in": "header",
            "description": "The role the user or system creating the event has assumed.",
            "schema": {
              "$ref": "#/components/schemas/UserRole"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "No Events to Delete"
          },
          "202": {
            "description": "Request Succeeded"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ValidationError"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        },
        "x-status": "Stable"
      }
    },
    "/v1/{tenant}/restaurants/event/offline": {
      "post": {
        "tags": [
          "Restaurant Events",
          "publicly-accessible"
        ],
        "summary": "Create Offline Event",
        "description": "Creates an event for the specified restaurants that indicates a reason for those restaurants to be offline.",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "description": "The identifier for the tenant",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "X-JE-Requester",
            "in": "header",
            "description": "Name of the user or system creating the event. Used for auditing purposes",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "X-JE-User-Role",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/UserRole"
            },
            "required": true
          }
        ],
        "requestBody": {
          "x-name": "model",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OfflineRestaurantsRequestModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "restaurantEventId": {
                      "type": "string",
                      "description": "The ID of the offline event created"
                    },
                    "restaurantIds": {
                      "type": "string",
                      "description": "A CSV of the restaurant IDs added to the offline event"
                    }
                  },
                  "example": {
                    "restaurantIds": "12345",
                    "restaurantEventId": "03bff206-d136-405f-b789-95190e9711a4"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ValidationError"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        },
        "x-status": "Stable"
      }
    },
    "/restaurant-offline-status": {
      "put": {
        "tags": [
          "Restaurant Events Webhooks",
          "publicly-accessible"
        ],
        "summary": "Restaurant Offline Status",
        "description": "Callback to notify that a restaurant has been taken offline through an active Restaurant Event or there's been a change in whether the restaurant can override a previous offline status.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestaurantOfflineStatus"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/restaurant-online-status": {
      "put": {
        "tags": [
          "Restaurant Events Webhooks",
          "publicly-accessible"
        ],
        "summary": "Restaurant Online Status",
        "description": "Callback to notify that a restaurant is now able to come back online as there are no longer any active offline Restaurant Events",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestaurantOfflineStatus"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/orders/{tenant}/{orderId}/restaurantqueries/compensation": {
      "post": {
        "tags": [
          "RestaurantQueries",
          "publicly-accessible"
        ],
        "summary": "Create Compensation requests",
        "description": "When an order is cancelled the restaurant might be eligible for compensation, this endpoint allows a request for compensation to be created.",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "description": "Request tenant.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderId",
            "in": "path",
            "description": "Id for the order.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Containing a partner issued API key e.g. `JE-API-KEY ABCDE123456789`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "An object for providing the reason that the compensation is being created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRestaurantCompensationQuery"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request - returned if providing invalid data such as an unacceptable reason code",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "25bbe062-c53d-4fbc-9d6c-3df6127b94fd",
                  "traceId": "H3TKh4QSJUSwVBCBqEtkKw==",
                  "errors": [
                    {
                      "errorCode": "InvalidReasonCode",
                      "description": "The value provided in the field ReasonCode is invalid"
                    },
                    {
                      "errorCode": "CommentsTooLong",
                      "description": "Comments field is too long, max 1000"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - consumer has not provided the necessary credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "25bbe062-c53d-4fbc-9d6c-3df6127b94fd",
                  "traceId": "H3TKh4QSJUSwVBCBqEtkKw==",
                  "errors": [
                    {
                      "errorCode": "Unauthorized",
                      "description": "Invalid credentials"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - credentials provided by consumer do not allow access to this resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "25bbe062-c53d-4fbc-9d6c-3df6127b94fd",
                  "traceId": "H3TKh4QSJUSwVBCBqEtkKw==",
                  "errors": [
                    {
                      "errorCode": "Forbidden",
                      "description": "The credentials provided doesn't have permissions to perform the request"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "25bbe062-c53d-4fbc-9d6c-3df6127b94fd",
                  "traceId": "H3TKh4QSJUSwVBCBqEtkKw==",
                  "errors": [
                    {
                      "errorCode": "NotFound",
                      "description": "Resource not found"
                    }
                  ]
                }
              }
            }
          },
          "409": {
            "description": "Conflict - returned if tried to claim compensation for an order that is not eligible",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "25bbe062-c53d-4fbc-9d6c-3df6127b94fd",
                  "traceId": "H3TKh4QSJUSwVBCBqEtkKw==",
                  "errors": [
                    {
                      "errorCode": "OrderNotEligible",
                      "description": "This order is not eligible for compensation"
                    },
                    {
                      "errorCode": "CompensationAlreadyExists",
                      "description": "A compensation request has already been requested for this order"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500ErrorResponse"
          }
        }
      }
    },
    "/order-eligible-for-restaurant-compensation": {
      "post": {
        "tags": [
          "RestaurantQueries Webhooks",
          "publicly-accessible"
        ],
        "summary": "Order Eligible For Restaurant Compensation",
        "description": "This webhook will be invoked for every cancelled order and it will inform if the order is eligible for compensation.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderEligibleForRestaurantCompensation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Respond with a 200 status code to indicate that you have received the notification."
          }
        }
      }
    },
    "/restaurants/{tenant}/{restaurantId}/catalogue": {
      "get": {
        "tags": [
          "Restaurants",
          "publicly-accessible"
        ],
        "summary": "Get product catalogue",
        "description": "Get details of the restaurant's product catalogue",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "description": "Request tenant.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "restaurantId",
            "in": "path",
            "description": "The restaurant Id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "headers": {
              "cache-control": {
                "description": "Information about how the response can be cached.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuBase"
                }
              }
            }
          },
          "404": {
            "description": "No product catalogue found for given tenant and restaurantId.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "b39ae4c1-142f-4308-838d-1f01815e1cf1",
                  "errors": [
                    {
                      "description": "Resource with identifier restaurantId:95224345321 for tenant:uk not found."
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500ErrorResponse"
          }
        },
        "x-status": "Stable"
      }
    },
    "/restaurants/{tenant}/{restaurantId}/catalogue/availabilities": {
      "get": {
        "tags": [
          "Restaurants",
          "publicly-accessible"
        ],
        "summary": "Get all availabilities",
        "description": "Get all availabilities on the restaurant's menu",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "description": "Request tenant.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "restaurantId",
            "in": "path",
            "description": "The restaurant Id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of availabilities to fetch.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "Value representing a cursor - position to use when retrieving the next page of data. If provided, the value of this parameter must be URL encoded.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "headers": {
              "cache-control": {
                "description": "Information about how the response can be cached.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedAvailabilitiesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "e21a9947-4352-449f-a4dc-5e69d57b0c5f",
                  "errors": [
                    {
                      "description": "Invalid value 0 for parameter limit."
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "No availabilities found for given tenant and restaurantId.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "b39ae4c1-142f-4308-838d-1f01815e1cf1",
                  "errors": [
                    {
                      "description": "Resource with identifier restaurantId:95224345321 for tenant:uk not found."
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500ErrorResponse"
          }
        },
        "x-status": "Stable"
      }
    },
    "/restaurants/{tenant}/{restaurantId}/catalogue/categories": {
      "get": {
        "tags": [
          "Restaurants",
          "publicly-accessible"
        ],
        "summary": "Get all categories",
        "description": "Get all categories on the restaurant's menu",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "description": "Request tenant.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "restaurantId",
            "in": "path",
            "description": "The restaurant Id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of categories to fetch.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "Value representing a cursor - position to use when retrieving the next page of data. If provided, the value of this parameter must be URL encoded.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "headers": {
              "cache-control": {
                "description": "Information about how the response can be cached.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedCategoriesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "e21a9947-4352-449f-a4dc-5e69d57b0c5f",
                  "errors": [
                    {
                      "description": "Invalid value 0 for parameter limit."
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "No availabilities found for given tenant and restaurantId.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "b39ae4c1-142f-4308-838d-1f01815e1cf1",
                  "errors": [
                    {
                      "description": "Resource with identifier restaurantId:95224345321 for tenant:uk not found."
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500ErrorResponse"
          }
        },
        "x-status": "Stable"
      }
    },
    "/restaurants/{tenant}/{restaurantId}/catalogue/categories/{categoryId}/items": {
      "get": {
        "tags": [
          "Restaurants",
          "publicly-accessible"
        ],
        "summary": "Get all category item IDs",
        "description": "Get all item IDs which are assigned to the specified category",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "description": "Request tenant.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "restaurantId",
            "in": "path",
            "description": "The restaurant ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categoryId",
            "in": "path",
            "description": "The category ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of item IDs to fetch.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "Value representing a cursor - position to use when retrieving the next page of data. If provided, the value of this parameter must be URL encoded.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "headers": {
              "cache-control": {
                "description": "Information about how the response can be cached.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedCategoryItemsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "e21a9947-4352-449f-a4dc-5e69d57b0c5f",
                  "errors": [
                    {
                      "description": "Invalid value 0 for parameter limit."
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "No availabilities found for given tenant and restaurantId.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "b39ae4c1-142f-4308-838d-1f01815e1cf1",
                  "errors": [
                    {
                      "description": "Resource with identifier restaurantId:95224345321 for tenant:uk not found."
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500ErrorResponse"
          }
        },
        "x-status": "Stable"
      }
    },
    "/restaurants/{tenant}/{restaurantId}/catalogue/items": {
      "get": {
        "tags": [
          "Restaurants",
          "publicly-accessible"
        ],
        "summary": "Get all menu items",
        "description": "Get all menu items on the restaurant's menu",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "description": "Request tenant.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "restaurantId",
            "in": "path",
            "description": "The restaurant Id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of menu items to fetch.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "Value representing a cursor - position to use when retrieving the next page of data. If provided, the value of this parameter must be URL encoded.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "headers": {
              "cache-control": {
                "description": "Information about how the response can be cached.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedMenuItemsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "e21a9947-4352-449f-a4dc-5e69d57b0c5f",
                  "errors": [
                    {
                      "description": "Invalid value 0 for parameter limit."
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "No menu items found for given tenant and restaurantId.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "b39ae4c1-142f-4308-838d-1f01815e1cf1",
                  "errors": [
                    {
                      "description": "Resource with identifier restaurantId:95224345321 for tenant:uk not found."
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500ErrorResponse"
          }
        },
        "x-status": "Stable"
      }
    },
    "/restaurants/{tenant}/{restaurantId}/catalogue/items/{itemId}/dealgroups": {
      "get": {
        "tags": [
          "Restaurants",
          "publicly-accessible"
        ],
        "summary": "Get all menu item deal groups",
        "description": "Get all deal groups for the menu item with the provided ID",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "description": "Request tenant",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "restaurantId",
            "in": "path",
            "description": "The restaurant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "in": "path",
            "description": "The menu item ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of menu items to fetch.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "Value representing a cursor - position to use when retrieving the next page of data. If provided, the value of this parameter must be URL encoded.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "headers": {
              "cache-control": {
                "description": "Information about how the response can be cached.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedMenuDealGroupsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "e21a9947-4352-449f-a4dc-5e69d57b0c5f",
                  "errors": [
                    {
                      "description": "Invalid value 0 for parameter limit."
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "No deal groups found for given `tenant`, `restaurantId` and `itemId`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "b39ae4c1-142f-4308-838d-1f01815e1cf1",
                  "errors": [
                    {
                      "description": "Resource with identifier restaurantId:95224345321 for tenant:uk and itemId:534685 not found."
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500ErrorResponse"
          }
        },
        "x-status": "Stable"
      }
    },
    "/restaurants/{tenant}/{restaurantId}/catalogue/items/{itemId}/dealgroups/{dealGroupId}/dealitemvariations": {
      "get": {
        "tags": [
          "Restaurants",
          "publicly-accessible"
        ],
        "summary": "Get all deal item variations for a deal group",
        "description": "Get all deal item variations for the deal group with the specified ID, in the menu item with the specified ID",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "description": "Request tenant",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "restaurantId",
            "in": "path",
            "description": "The restaurant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "in": "path",
            "description": "The menu item ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dealGroupId",
            "in": "path",
            "description": "The menu item ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of menu items to fetch.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "Value representing a cursor - position to use when retrieving the next page of data. If provided, the value of this parameter must be URL encoded.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "headers": {
              "cache-control": {
                "description": "Information about how the response can be cached.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedDealItemVariationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "e21a9947-4352-449f-a4dc-5e69d57b0c5f",
                  "errors": [
                    {
                      "description": "Invalid value 0 for parameter limit."
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "No deal item variations found for given `tenant`, `restaurantId`, `itemId` and `dealGroupId`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "b39ae4c1-142f-4308-838d-1f01815e1cf1",
                  "errors": [
                    {
                      "description": "Resource with identifier restaurantId:95224345321 for tenant:uk for itemId:534685 and dealGroupId:463847 not found."
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500ErrorResponse"
          }
        },
        "x-status": "Stable"
      }
    },
    "/restaurants/{tenant}/{restaurantId}/catalogue/items/{itemId}/modifiergroups": {
      "get": {
        "tags": [
          "Restaurants",
          "publicly-accessible"
        ],
        "summary": "Get all menu item modifier groups",
        "description": "Get all modifier groups for the menu item with the provided ID",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "description": "Request tenant",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "restaurantId",
            "in": "path",
            "description": "The restaurant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "in": "path",
            "description": "The menu item ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of menu items to fetch.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "Value representing a cursor - position to use when retrieving the next page of data. If provided, the value of this parameter must be URL encoded.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "headers": {
              "cache-control": {
                "description": "Information about how the response can be cached.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedMenuModifierGroupsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "e21a9947-4352-449f-a4dc-5e69d57b0c5f",
                  "errors": [
                    {
                      "description": "Invalid value 0 for parameter limit."
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "No modifier groups found for given `tenant`, `restaurantId` and `itemId`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "b39ae4c1-142f-4308-838d-1f01815e1cf1",
                  "errors": [
                    {
                      "description": "Resource with identifier restaurantId:95224345321 for tenant:uk and itemId:534685 not found."
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500ErrorResponse"
          }
        },
        "x-status": "Stable"
      }
    },
    "/restaurants/{tenant}/{restaurantId}/catalogue/items/{itemId}/variations": {
      "get": {
        "tags": [
          "Restaurants",
          "publicly-accessible"
        ],
        "summary": "Get all menu item variations",
        "description": "Get all variations for the menu item with the provided ID",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "description": "Request tenant",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "restaurantId",
            "in": "path",
            "description": "The restaurant ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "in": "path",
            "description": "The menu item ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of menu items to fetch.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "Value representing a cursor - position to use when retrieving the next page of data. If provided, the value of this parameter must be URL encoded.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "headers": {
              "cache-control": {
                "description": "Information about how the response can be cached.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedVariationsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "e21a9947-4352-449f-a4dc-5e69d57b0c5f",
                  "errors": [
                    {
                      "description": "Invalid value 0 for parameter limit."
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "No variations found for given `tenant`, `restaurantId` and `itemId`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "b39ae4c1-142f-4308-838d-1f01815e1cf1",
                  "errors": [
                    {
                      "description": "Resource with identifier restaurantId:95224345321 for tenant:uk and itemId:534685 not found."
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500ErrorResponse"
          }
        },
        "x-status": "Stable"
      }
    },
    "/restaurants/{tenant}/{restaurantId}/fees": {
      "get": {
        "tags": [
          "Restaurants",
          "publicly-accessible"
        ],
        "summary": "Get Restaurant Fees",
        "description": "Get the fees currently applied to a restaurant in a particular tenant",
        "x-status": "Draft",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "description": "A two-character country code for which country the restaurant resides in.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "restaurantId",
            "in": "path",
            "description": "A unique identifier for a restaurant",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "User-Agent",
            "in": "header",
            "description": "Request header string that allows the server to identify the application making the request.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "cache-control": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "no-store"
                  ]
                },
                "description": "Information about how the response can be cached. (No caching will be applied)"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestaurantFees"
                },
                "example": {
                  "bagFee": {
                    "description": "A charge for bags in delivery",
                    "serviceTypes": {
                      "default": {
                        "amount": 0
                      },
                      "collection": {
                        "amount": 5
                      },
                      "delivery": {
                        "amount": 10
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "72d7036d-990a-4f84-9efa-ef5f40f6044b",
                  "traceId": "0HLOCKDKQPKIU",
                  "errors": [
                    {
                      "errorCode": "UnsupportedTenant",
                      "description": "The supplied tenant is not supported"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "72d7036d-990a-4f84-9efa-ef5f40f6044b",
                  "traceId": "0HLOCKDKQPKIU",
                  "errors": [
                    {
                      "errorCode": "Unauthorized",
                      "description": "Authorization required"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "72d7036d-990a-4f84-9efa-ef5f40f6044b",
                  "traceId": "0HLOCKDKQPKIU",
                  "errors": [
                    {
                      "errorCode": "Forbidden",
                      "description": "You do not have permission to access this resource"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "72d7036d-990a-4f84-9efa-ef5f40f6044b",
                  "traceId": "0HLOCKDKQPKIU",
                  "errors": [
                    {
                      "errorCode": "NotFound",
                      "description": "The requested resource does not exist on this server"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "$ref": "#/components/responses/500ErrorResponse"
          }
        }
      },
      "put": {
        "tags": [
          "Restaurants",
          "publicly-accessible"
        ],
        "summary": "Create or Update Restaurant Fees",
        "description": "Creates or Updates the fees for a restaurant in a particular tenant",
        "x-status": "Draft",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "description": "A two-character country code for which country the restaurant resides in.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "restaurantId",
            "in": "path",
            "description": "A unique identifier for a restaurant",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "User-Agent",
            "in": "header",
            "description": "Request header string that allows the server to identify the application making the request.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "requestBody": {
          "description": "Update Restaurant Fees",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestaurantFees"
              },
              "example": {
                "bagFee": {
                  "description": "A charge for bags in delivery",
                  "serviceTypes": {
                    "default": {
                      "amount": 0
                    },
                    "collection": {
                      "amount": 5
                    },
                    "delivery": {
                      "amount": 10
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "cache-control": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "no-store"
                  ]
                },
                "description": "Information about how the response can be cached. (No caching will be applied)"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestaurantFees"
                },
                "example": {
                  "bagFee": {
                    "description": "A charge for bags in delivery",
                    "serviceTypes": {
                      "default": {
                        "amount": 0
                      },
                      "collection": {
                        "amount": 5
                      },
                      "delivery": {
                        "amount": 10
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "72d7036d-990a-4f84-9efa-ef5f40f6044b",
                  "traceId": "0HLOCKDKQPKIU",
                  "errors": [
                    {
                      "errorCode": "UnsupportedTenant",
                      "description": "The supplied tenant is not supported"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "72d7036d-990a-4f84-9efa-ef5f40f6044b",
                  "traceId": "0HLOCKDKQPKIU",
                  "errors": [
                    {
                      "errorCode": "Unauthorized",
                      "description": "Authorization required"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "72d7036d-990a-4f84-9efa-ef5f40f6044b",
                  "traceId": "0HLOCKDKQPKIU",
                  "errors": [
                    {
                      "errorCode": "Forbidden",
                      "description": "You do not have permission to access this resource"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "72d7036d-990a-4f84-9efa-ef5f40f6044b",
                  "traceId": "0HLOCKDKQPKIU",
                  "errors": [
                    {
                      "errorCode": "NotFound",
                      "description": "The requested resource does not exist on this server"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "$ref": "#/components/responses/500ErrorResponse"
          }
        }
      }
    },
    "/restaurants/{tenant}/{restaurantId}/menu": {
      "put": {
        "tags": [
          "Restaurants",
          "publicly-accessible"
        ],
        "summary": "Create or update a menu",
        "description": "This will begin an asynchronous process that will lead to that menu becoming live on the Just Eat platform",
        "operationId": "putMenuForIngestion",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "description": "The tenant of the restaurant in which to put a menu",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "restaurantId",
            "in": "path",
            "required": true,
            "description": "The restaurant identifier to associated with the menu",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Containing a partner issued API key e.g. `JE-API-KEY ABCDE123456789`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "Used to denote the version of the menu payload within the body, will default to latest if not supplied e.g. application/=1.0",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Specification of the menu. This must be valid according to the rules described here: https://developers.just-eat.com/docs/pos-how-the-integration-works#validation-rules",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Menu"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuIngestionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConsumerErrorResponse"
                }
              }
            }
          }
        },
        "x-status": "Stable"
      },
      "get": {
        "tags": [
          "Restaurants",
          "publicly-accessible"
        ],
        "summary": "Get the latest version of the restaurant's full menu",
        "description": "The endpoint will return a 301 redirect containing a URL that will grant access to the Menu file. The URL will only be available for a short period of time. The Menu file will be a single document containing the information that Just Eat has and uses to display the Menu on our customer clients. This will include a collection of items, a collection of Categories and a collection of Availabilities for when the items are available. Partners will be able to retrieve the Menu for any Restaurants that they currently manage.",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "description": "The tenant of the restaurant in which to put a menu",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "restaurantId",
            "in": "path",
            "required": true,
            "description": "The restaurant identifier to associated with the menu",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Containing a partner issued API key e.g. Bearer ABCDE123456789",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "301": {
            "description": "Temporary Redirect. The redirect will contain the signed URL that the client needs to access the resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Menu"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. We were unable to process the request due to data you sent us"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConsumerErrorResponse"
                }
              }
            }
          }
        },
        "x-status": "Stable"
      }
    },
    "/restaurants/{tenant}/{restaurantId}/ordertimes": {
      "get": {
        "tags": [
          "publicly-accessible",
          "Restaurant OrderTimes"
        ],
        "summary": "Get the restaurant's delivery and collection lead times",
        "description": "Get list of the delivery and collection lead times supplied by the restaurant",
        "operationId": "GetOrderTimes",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "description": "A valid country code, e.g. \"uk\".",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "restaurantId",
            "in": "path",
            "description": "The restaurant Id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "OAuth2 token issued for logged in restaurant",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "cache-control": {
                "description": "Information about how the response can be cached.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "uniqueItems": true,
                  "type": "array",
                  "maxItems": 14,
                  "items": {
                    "$ref": "#/components/schemas/orderTime"
                  }
                },
                "example": [
                  {
                    "serviceType": "Delivery",
                    "dayOfWeek": "Sunday",
                    "lowerBoundMinutes": 35,
                    "upperBoundMinutes": 50
                  },
                  {
                    "serviceType": "Delivery",
                    "dayOfWeek": "Monday",
                    "lowerBoundMinutes": 35,
                    "upperBoundMinutes": 50
                  },
                  {
                    "serviceType": "Delivery",
                    "dayOfWeek": "Tuesday",
                    "lowerBoundMinutes": 35,
                    "upperBoundMinutes": 50
                  },
                  {
                    "serviceType": "Delivery",
                    "dayOfWeek": "Wednesday",
                    "lowerBoundMinutes": 35,
                    "upperBoundMinutes": 50
                  },
                  {
                    "serviceType": "Delivery",
                    "dayOfWeek": "Thursday",
                    "lowerBoundMinutes": 35,
                    "upperBoundMinutes": 50
                  },
                  {
                    "serviceType": "Delivery",
                    "dayOfWeek": "Friday",
                    "lowerBoundMinutes": 35,
                    "upperBoundMinutes": 50
                  },
                  {
                    "serviceType": "Delivery",
                    "dayOfWeek": "Saturday",
                    "lowerBoundMinutes": 35,
                    "upperBoundMinutes": 50
                  },
                  {
                    "serviceType": "Collection",
                    "dayOfWeek": "Sunday",
                    "lowerBoundMinutes": 35,
                    "upperBoundMinutes": 50
                  },
                  {
                    "serviceType": "Collection",
                    "dayOfWeek": "Monday",
                    "lowerBoundMinutes": 35,
                    "upperBoundMinutes": 50
                  },
                  {
                    "serviceType": "Collection",
                    "dayOfWeek": "Tuesday",
                    "lowerBoundMinutes": 35,
                    "upperBoundMinutes": 50
                  },
                  {
                    "serviceType": "Collection",
                    "dayOfWeek": "Wednesday",
                    "lowerBoundMinutes": 35,
                    "upperBoundMinutes": 50
                  },
                  {
                    "serviceType": "Collection",
                    "dayOfWeek": "Thursday",
                    "lowerBoundMinutes": 35,
                    "upperBoundMinutes": 50
                  },
                  {
                    "serviceType": "Collection",
                    "dayOfWeek": "Friday",
                    "lowerBoundMinutes": 35,
                    "upperBoundMinutes": 50
                  },
                  {
                    "serviceType": "Collection",
                    "dayOfWeek": "Saturday",
                    "lowerBoundMinutes": 35,
                    "upperBoundMinutes": 50
                  }
                ]
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401UnauthorizedResponse"
          },
          "403": {
            "description": "Forbidden - the restaurant still uses deprecated approach of Lunch and Night menus",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "25bbe062-c53d-4fbc-9d6c-3df6127b94fd",
                  "traceId": "H3TKh4QSJUSwVBCBqEtkKw==",
                  "errors": [
                    {
                      "errorCode": "Forbidden",
                      "description": "The restaurant still uses deprecated approach of Lunch and Night menus"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500ErrorSchema"
                }
              }
            }
          }
        }
      }
    },
    "/restaurants/{tenant}/{restaurantId}/ordertimes/{dayOfWeek}/{serviceType}": {
      "put": {
        "tags": [
          "publicly-accessible",
          "Restaurant OrderTimes"
        ],
        "summary": "Update the restaurant's delivery and collection lead times",
        "description": "Update the restaurant's delivery and collection lead times",
        "operationId": "UpdateOrderTime",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "description": "A valid country code, e.g. \"uk\".",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "restaurantId",
            "in": "path",
            "description": "The restaurant Id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dayOfWeek",
            "in": "path",
            "required": true,
            "description": "Day of week for order time",
            "schema": {
              "type": "string",
              "enum": [
                "Sunday",
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday"
              ]
            }
          },
          {
            "name": "serviceType",
            "in": "path",
            "required": true,
            "description": "Service type of the order time",
            "schema": {
              "type": "string",
              "enum": [
                "Delivery",
                "Collection"
              ]
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "OAuth2 token issued for logged in restaurant OR API token for third party, in the format `Bearer {api_key}`",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateOrderTimeRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "25bbe062-c53d-4fbc-9d6c-3df6127b94fd",
                  "traceId": "H3TKh4QSJUSwVBCBqEtkKw==",
                  "errors": [
                    {
                      "errorCode": "ERR400",
                      "description": "Bad Request"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401UnauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/403ForbiddenResponse"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500ErrorSchema"
                }
              }
            }
          }
        }
      }
    },
    "/restaurants/{tenant}/{restaurantId}/servicetimes": {
      "get": {
        "tags": [
          "Restaurants",
          "publicly-accessible"
        ],
        "summary": "Get service times",
        "description": "Gets the service times (the weekly times at which a restaurant is in service for delivery or collection) for a restaurant",
        "operationId": "getRestaurantServiceTimes",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "description": "Two letter code of restaurant's tenant",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "restaurantId",
            "in": "path",
            "required": true,
            "description": "The restaurant identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The restaurant's service times",
            "headers": {
              "cache-control": {
                "description": "Information about how the response can be cached.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceTimes"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "25bbe062-c53d-4fbc-9d6c-3df6127b94fd",
                  "traceId": "H3TKh4QSJUSwVBCBqEtkKw==",
                  "errors": [
                    {
                      "errorCode": "ERR1234",
                      "description": "Order not found"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500ErrorResponse"
          }
        },
        "x-status": "Draft"
      },
      "put": {
        "tags": [
          "Restaurants",
          "publicly-accessible"
        ],
        "summary": "Create or update service times",
        "description": "Creates or updates the service times (the weekly times at which a restaurant is in service for delivery or collection) for a restaurant",
        "operationId": "putRestaurantServiceTimes",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "description": "Two letter code of restaurant's tenant",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "restaurantId",
            "in": "path",
            "required": true,
            "description": "The restaurant identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceTimes"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The new service times",
            "headers": {
              "cache-control": {
                "description": "Information about how the response can be cached.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceTimes"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "25bbe062-c53d-4fbc-9d6c-3df6127b94fd",
                  "traceId": "H3TKh4QSJUSwVBCBqEtkKw==",
                  "errors": [
                    {
                      "errorCode": "ERR1234",
                      "description": "The value of \"end\" must be greater than \"start\", or \"00:00:00\""
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/500ErrorResponse"
          }
        },
        "x-status": "Draft"
      }
    },
    "/restaurants/bylatlong": {
      "get": {
        "tags": [
          "Restaurants",
          "publicly-accessible"
        ],
        "summary": "Get restaurants by location",
        "description": "Provides details of all restaurants that deliver to the specified location",
        "operationId": "SearchByLocation",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2 token issued for logged in consumer or API key issued to partner",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "Accept-Tenant",
            "in": "header",
            "description": "A valid country code, e.g. \"uk\". Filter search results to only include restaurants for the specified country. Required when using OAuth for authentication.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "latitude",
            "in": "query",
            "required": true,
            "description": "Filter search results to only include restaurants that deliver to the specified location",
            "schema": {
              "type": "number"
            },
            "x-position": 1
          },
          {
            "name": "longitude",
            "in": "query",
            "required": true,
            "description": "Filter search results to only include restaurants that deliver to the specified location",
            "schema": {
              "type": "number"
            },
            "x-position": 2
          },
          {
            "name": "cuisine",
            "in": "query",
            "required": false,
            "description": "Filter search results to only include restaurants that offer the specified cuisine",
            "schema": {
              "type": "string"
            },
            "x-position": 3
          },
          {
            "name": "restaurantName",
            "in": "query",
            "required": false,
            "description": "Filter search results to only include restaurants that have a name that matches the specified value",
            "schema": {
              "type": "string"
            },
            "x-position": 4
          },
          {
            "name": "brandName",
            "in": "query",
            "required": false,
            "description": "Filter search results to only include restaurants of the specified brand",
            "schema": {
              "type": "string"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "cache-control": {
                "description": "Information about how the response can be cached.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/SearchResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ExternalSearchResponse"
                    },
                    {
                      "$ref": "#/components/schemas/SearchWebResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "Message": "The request is invalid.",
                  "ModelState": {
                    "Longitude": [
                      "The value 'nan' is not valid for Longitude."
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "message": "No API key found in request"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "Message": "An error has occurred.",
                  "ExceptionMessage": "Object reference not set to an instance of an object.",
                  "ExceptionType": "System.NullReferenceException",
                  "StackTrace": "   at JE.SearchOrchestrator.Controllers.Filters.CacheControlFilter.OnActionExecuted(HttpActionExecutedContext actionExecutedContext) in \\\\Mac\\Home\\Documents\\GitHub\\SearchOrchestrator\\src\\JE.SearchOrchestrator\\Controllers\\Filters\\CacheControlFilter.cs:line 18\r\n   at System.Web.Http.Filters.ActionFilterAttribute.OnActionExecutedAsync(HttpActionExecutedContext actionExecutedContext, CancellationToken cancellationToken)\r\n--- End of stack"
                }
              }
            }
          }
        },
        "x-status": "Deprecated"
      }
    },
    "/restaurants/bypostcode/{postcode}": {
      "get": {
        "tags": [
          "Restaurants",
          "publicly-accessible"
        ],
        "summary": "Get restaurants by postcode",
        "description": "Provides details of restaurants that deliver to the specified postcode",
        "operationId": "SearchByPostcode",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "OAuth2 token issued for logged in consumer or API key issued to partner",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "Accept-Tenant",
            "in": "header",
            "description": "A valid country code, e.g. \"uk\". Filter search results to only include restaurants for the specified country. Required when using OAuth for authentication.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "postcode",
            "in": "path",
            "required": true,
            "description": "Filter search results to only include restaurants that deliver to the specified postcode",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cuisine",
            "in": "query",
            "required": false,
            "description": "Filter search results to only include restaurants that offer the specified cuisine",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "restaurantName",
            "in": "query",
            "required": false,
            "description": "Filter search results to only include restaurants that have a name that matches the specified value",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "brandName",
            "in": "query",
            "required": false,
            "description": "Filter search results to only include restaurants of the specified brand",
            "schema": {
              "type": "string"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "cache-control": {
                "description": "Information about how the response can be cached.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/SearchResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ExternalSearchResponse"
                    },
                    {
                      "$ref": "#/components/schemas/SearchWebResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "Message": "The request is invalid.",
                  "ModelState": {
                    "Postcode": [
                      "Invalid Postcode."
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "message": "No API key found in request"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "Message": "An error has occurred.",
                  "ExceptionMessage": "Object reference not set to an instance of an object.",
                  "ExceptionType": "System.NullReferenceException",
                  "StackTrace": "   at JE.SearchOrchestrator.Controllers.Filters.CacheControlFilter.OnActionExecuted(HttpActionExecutedContext actionExecutedContext) in \\\\Mac\\Home\\Documents\\GitHub\\SearchOrchestrator\\src\\JE.SearchOrchestrator\\Controllers\\Filters\\CacheControlFilter.cs:line 18\r\n   at System.Web.Http.Filters.ActionFilterAttribute.OnActionExecutedAsync(HttpActionExecutedContext actionExecutedContext, CancellationToken cancellationToken)\r\n--- End of stack"
                }
              }
            }
          }
        },
        "x-status": "Deprecated"
      }
    },
    "/restaurants/driver/eta": {
      "put": {
        "tags": [
          "Restaurants",
          "publicly-accessible"
        ],
        "summary": "Set ETA for pickup",
        "description": "Set the average amount of time it will take a driver to collect a new order from a restaurant.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestaurantETAs"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Update will take effect shortly",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IgnoredRestaurantIds"
                }
              }
            }
          },
          "400": {
            "description": "There was something invalid in your request - check response body for details"
          }
        }
      }
    },
    "/menu-ingestion-complete": {
      "post": {
        "tags": [
          "Restaurant Webhooks",
          "publicly-accessible"
        ],
        "summary": "Menu ingestion complete",
        "description": "Callback to confirm that an attempt to ingest a menu has completed either successfully or unsuccessfully",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/menu-ingestion-complete"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/order-time-updated": {
      "post": {
        "tags": [
          "Restaurant Webhooks",
          "publicly-accessible"
        ],
        "summary": "Order time updated",
        "description": "Callback to notify recipients that there has been a change to the restaurant order times for a given day and service type",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/order-time-updated"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/search/autocomplete/{tenant}": {
      "get": {
        "tags": [
          "Search",
          "publicly-accessible"
        ],
        "summary": "Get auto-completed search terms",
        "description": "Provides auto-completed search terms for restaurants, cuisines and products available in a given location.",
        "x-status": "Stable",
        "parameters": [
          {
            "name": "tenant",
            "description": "A valid country code, e.g. \"uk\".",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "User's search term - at least one character required",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "latlong",
            "in": "query",
            "description": "The latitude and longitude coordinates of the location in which to search.\r\nSpecify the coordinates as latitude,longitude.",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "maxItems": 2,
              "minItems": 2,
              "items": {
                "type": "number",
                "format": "decimal"
              }
            },
            "example": [
              51.501285,
              -0.1424422
            ]
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the number of auto-completed terms returned by the API. Defaults to 7. Valid values 1 - 10",
            "required": false,
            "schema": {
              "type": "number",
              "format": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "cache-control": {
                "description": "Information about how the response can be cached.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutoCompleteSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A HTTP 4xx error response",
                  "properties": {
                    "fault": {
                      "type": "object",
                      "required": [
                        "faultId"
                      ],
                      "properties": {
                        "faultId": {
                          "type": "string",
                          "description": "A value that helps identify this response back to logs, so we can easily find this specific fault"
                        },
                        "traceId": {
                          "type": "string",
                          "description": "A value that helps identify the trace back to logs, so that we can easily find what was happening on our system when the fault was generated"
                        },
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "description": {
                                "type": "string",
                                "description": "Specific details about the error that may assist the you in resolving the issue"
                              },
                              "errorCode": {
                                "type": "string",
                                "description": "A code that identifies the problem type. It will be supported by human-readable documentation that identifies how to resolve the error"
                              },
                              "fields": {
                                "type": "array",
                                "description": "An array of invalid query fields",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "faultId": "72d7036d-990a-4f84-9efa-ef5f40f6044b",
                  "traceId": "0HLOCKDKQPKIU",
                  "errors": [
                    {
                      "description": "Validation failed on one or more fields",
                      "errorCode": 400,
                      "fields": [
                        "latlong"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "72d7036d-990a-4f84-9efa-ef5f40f6044b",
                  "traceId": "0HLOCKDKQPKIU",
                  "errors": [
                    {
                      "errorCode": "401"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500ErrorResponse"
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Service Unavailable",
                  "properties": {
                    "fault": {
                      "type": "object",
                      "required": [
                        "faultId"
                      ],
                      "properties": {
                        "faultId": {
                          "type": "string",
                          "description": "A value that helps identify this response back to logs, so we can easily find this specific fault"
                        },
                        "traceId": {
                          "type": "string",
                          "description": "A value that helps identify the trace back to logs, so that we can easily find what was happening on our system when the fault was generated"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "faultId": "72d7036d-990a-4f84-9efa-ef5f40f6044b",
                  "traceId": "0HLOCKDKQPKIU"
                }
              }
            }
          }
        }
      }
    },
    "/search/restaurants/{tenant}": {
      "get": {
        "tags": [
          "Search",
          "publicly-accessible"
        ],
        "summary": "Search restaurants",
        "description": "Get restaurants available in a given lat-long which match a search term.\r\nMatches can be found against the name, a cuisine or a product.",
        "x-status": "Stable",
        "parameters": [
          {
            "name": "tenant",
            "description": "A valid country code, e.g. \"uk\".",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "User's search term.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "latlong",
            "in": "query",
            "description": "The latitude and longitude coordinates of the location in which to search.\r\nSpecify the coordinates as latitude,longitude.",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "maxItems": 2,
              "minItems": 2,
              "items": {
                "type": "number",
                "format": "decimal"
              }
            },
            "example": [
              51.501285,
              -0.1424422
            ]
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the number of restaurants returned by the API.\r\nValid values are numbers between 1 and 500.\r\nIf not provided, the limit defaults to 300.",
            "required": false,
            "schema": {
              "type": "number",
              "format": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "cache-control": {
                "description": "Information about how the response can be cached.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestaurantSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "72d7036d-990a-4f84-9efa-ef5f40f6044b",
                  "traceId": "0HLOCKDKQPKIU",
                  "errors": [
                    {
                      "description": "Validation failed on one or more fields",
                      "errorCode": 400,
                      "fields": [
                        "latlong"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "72d7036d-990a-4f84-9efa-ef5f40f6044b",
                  "traceId": "0HLOCKDKQPKIU",
                  "errors": [
                    {
                      "errorCode": "401"
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - search term rejected",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/4XXErrorSchema"
                },
                "example": {
                  "faultId": "72d7036d-990a-4f84-9efa-ef5f40f6044b",
                  "traceId": "0HLOCKDKQPKIU",
                  "errors": [
                    {
                      "errorCode": "422"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500ErrorResponse"
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Service Unavailable",
                  "properties": {
                    "fault": {
                      "type": "object",
                      "required": [
                        "faultId"
                      ],
                      "properties": {
                        "faultId": {
                          "type": "string",
                          "description": "A value that helps identify this response back to logs, so we can easily find this specific fault"
                        },
                        "traceId": {
                          "type": "string",
                          "description": "A value that helps identify the trace back to logs, so that we can easily find what was happening on our system when the fault was generated"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "faultId": "72d7036d-990a-4f84-9efa-ef5f40f6044b",
                  "traceId": "0HLOCKDKQPKIU"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "4XXErrorSchema": {
        "type": "object",
        "description": "A HTTP 4xx error response",
        "properties": {
          "fault": {
            "type": "object",
            "required": [
              "faultId"
            ],
            "properties": {
              "faultId": {
                "type": "string",
                "description": "A value that helps identify this response back to logs, so we can easily find this specific fault"
              },
              "traceId": {
                "type": "string",
                "description": "A value that helps identify the trace back to logs, so that we can easily find what was happening on our system when the fault was generated"
              },
              "errors": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "description": {
                      "type": "string",
                      "description": "Specific details about the error that may assist you in resolving the issue"
                    },
                    "errorCode": {
                      "type": "string",
                      "description": "A code that identifies the problem type. It will be supported by human-readable documentation that identifies how to resolve the error"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "500ErrorSchema": {
        "type": "object",
        "description": "A HTTP 500 error response",
        "properties": {
          "fault": {
            "type": "object",
            "required": [
              "faultId"
            ],
            "properties": {
              "faultId": {
                "type": "string",
                "description": "A value that helps identify this response back to logs, so we can easily find this specific fault"
              },
              "traceId": {
                "type": "string",
                "description": "A value that helps identify the trace back to logs, so that we can easily find what was happening on our system when the fault was generated"
              },
              "errors": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "description": {
                      "type": "string",
                      "description": "If returned, the only value returned will be Internal Server Error\"",
                      "enum": [
                        "Internal Server Error"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "5XXErrorSchema": {
        "type": "object",
        "description": "A HTTP 5xx error response",
        "properties": {
          "fault": {
            "type": "object",
            "description": "An object representing the nature of the failure.",
            "required": [
              "faultId"
            ],
            "properties": {
              "faultId": {
                "type": "string",
                "description": "A value that helps identify this response back to logs, so we can easily find this specific fault"
              },
              "traceId": {
                "type": "string",
                "description": "A value that helps identify the trace back to logs, so that we can easily find what was happening on our system when the fault was generated"
              },
              "errors": {
                "type": "array",
                "description": "The list of errors.",
                "items": {
                  "type": "object",
                  "properties": {
                    "description": {
                      "type": "string",
                      "description": "Specific details about the error that may assist you in resolving the issue"
                    },
                    "errorCode": {
                      "type": "string",
                      "description": "A code that identifies the problem type. It will be supported by human-readable documentation that identifies how to resolve the error"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "AddressGeocodingRequest": {
        "required": [
          "addressLines"
        ],
        "type": "object",
        "properties": {
          "addressLines": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string"
            },
            "description": "Lines of the consumers address, a minimum of 3 is preferred but only 1 is required."
          }
        },
        "example": {
          "addressLines": [
            "2 Fleet Place",
            "Fleet Place",
            "London",
            "EC4M 7RF"
          ]
        }
      },
      "Geometry": {
        "type": "object",
        "description": "Geometry information for consumers location",
        "properties": {
          "type": {
            "type": "string",
            "description": "type of primitive"
          },
          "coordinates": {
            "type": "array",
            "description": "first element of the array represents longitude, second latitude",
            "minItems": 2,
            "maxItems": 2,
            "items": {
              "type": "number",
              "format": "double"
            }
          }
        },
        "example": {
          "type": "Point",
          "coordinates": [
            -0.10358,
            51.51469
          ]
        }
      },
      "Properties": {
        "type": "object",
        "description": "Geometry information for consumers location",
        "properties": {
          "geocodingProvider": {
            "type": "string",
            "description": "the geocoding provider"
          },
          "accuracyScore": {
            "type": "number",
            "format": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 80,
            "description": "Just Eat Takeaway address accuracy score"
          },
          "matchScore": {
            "type": "number",
            "format": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 100,
            "description": "Just Eat Takeaway address match score"
          }
        },
        "example": {
          "geocodingProvider": "Google",
          "accuracyScore": 100,
          "matchScore": 100
        }
      },
      "ReverseGeocodingResponse": {
        "type": "object",
        "description": "Best guess address for passed lat-long",
        "properties": {
          "type": {
            "type": "string",
            "description": "type of primitive"
          },
          "properties": {
            "type": "object",
            "description": "feature metadata",
            "properties": {
              "address": {
                "type": "array",
                "description": "list of address chunks",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "geometry": {
            "type": "object",
            "description": "Geometry information for consumers location",
            "properties": {
              "type": {
                "type": "string",
                "description": "type of primitive"
              },
              "coordinates": {
                "type": "array",
                "description": "longitude and latitude",
                "minItems": 2,
                "maxItems": 2,
                "items": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          }
        },
        "example": {
          "type": "Feature",
          "properties": {
            "address": [
              "Flat 3",
              "Greystoke House",
              "127 High Street",
              "Chelmsford",
              "Essex",
              "CM1 4QQ"
            ]
          },
          "geometry": {
            "type": "Point",
            "coordinates": [
              -0.01938,
              51.10234
            ]
          }
        }
      },
      "attempted-delivery-created": {
        "type": "object",
        "properties": {
          "OrderId": {
            "type": "string",
            "description": "The id of the order"
          },
          "RestaurantId": {
            "type": "number",
            "description": "The id of the restaurant"
          },
          "Reason": {
            "type": "string",
            "description": "The reason for creating the attempted delivery"
          },
          "Tenant": {
            "type": "string",
            "description": "The tenant associated with the order"
          }
        },
        "example": {
          "OrderId": "wiej234idf09i29jijgf4",
          "RestaurantId": 110230,
          "Reason": "Customer did not answer the door",
          "Tenant": "uk"
        }
      },
      "attempted-delivery-resolved": {
        "type": "object",
        "properties": {
          "OrderId": {
            "type": "string",
            "description": "The ID of the order for which an attempted delivery query has been resolved"
          },
          "Tenant": {
            "type": "string",
            "description": "The tenant of the restaurant the order was placed at",
            "enum": [
              "uk",
              "dk",
              "es",
              "ie",
              "it",
              "no",
              "au",
              "nz"
            ]
          },
          "Resolution": {
            "type": "object",
            "description": "Details of the resolution to the query",
            "properties": {
              "Type": {
                "type": "string",
                "description": "The type of resolution to the query, either cancellation or redelivery",
                "enum": [
                  "order_cancelled",
                  "redeliver_order"
                ]
              },
              "Cancellation": {
                "type": "object",
                "description": "The cancellation properties. Only required if the order has been cancelled, otherwise null",
                "properties": {
                  "Reason": {
                    "type": "string",
                    "description": "The reason for cancelling the order",
                    "enum": [
                      "new_address_not_within_area",
                      "unable_to_reprepare",
                      "driver_not_available",
                      "area_unsafe",
                      "customer_doesnt_want_anymore"
                    ]
                  }
                }
              },
              "Redelivery": {
                "type": "object",
                "description": "The redelivery properties. Only required if the order is being redelivered, otherwise null",
                "properties": {
                  "Status": {
                    "type": "string",
                    "description": "The current status of the order",
                    "enum": [
                      "driver_at_address",
                      "repreparing"
                    ]
                  },
                  "NewDueDate": {
                    "format": "date-time",
                    "type": "string",
                    "description": "Updated due date for delivery of the order in ISO 8601 format"
                  },
                  "CustomerTimeZone": {
                    "type": "string",
                    "description": "The IANA TZ database name of the time zone the customer that placed the order is in"
                  }
                }
              }
            }
          }
        },
        "example": {
          "OrderId": "wiej234idf09i29jijgf4",
          "Tenant": "uk",
          "Resolution": {
            "Type": "redeliver_order",
            "Redelivery": {
              "Status": "repreparing",
              "NewDueDate": "2018-03-10T14:45:28Z",
              "CustomerTimeZone": "Europe/London"
            }
          }
        }
      },
      "attempted-delivery-response-received": {
        "type": "object",
        "properties": {
          "OrderId": {
            "type": "string"
          },
          "Tenant": {
            "type": "string"
          },
          "Update": {
            "type": "string"
          },
          "Notes": {
            "type": "string"
          }
        },
        "example": {
          "OrderId": "wiej234idf09i29jijgf4",
          "Tenant": "uk",
          "Update": "Please redeliver",
          "Notes": "Please press 123 on the door"
        }
      },
      "create-attempted-delivery": {
        "type": "object",
        "properties": {
          "ReasonCode": {
            "type": "string",
            "description": "The reason the attempted delivery event was created",
            "enum": [
              "problem_with_address",
              "no_answer"
            ]
          }
        },
        "example": {
          "ReasonCode": "problem_with_address"
        }
      },
      "resolve-attempted-delivery-cancel": {
        "type": "object",
        "properties": {
          "ReasonCode": {
            "type": "string",
            "description": "The reason the order has been cancelled",
            "enum": [
              "new_address_not_within_area",
              "unable_to_reprepare",
              "driver_not_available",
              "area_unsafe",
              "customer_doesnt_want_anymore"
            ]
          }
        },
        "example": {
          "ReasonCode": "new_address_not_within_area"
        }
      },
      "resolve-attempted-delivery-redeliver": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "string",
            "description": "The current status of the order",
            "enum": [
              "driver_at_address",
              "repreparing"
            ]
          },
          "NewDueDate": {
            "type": "string",
            "format": "date-time",
            "description": "Updated due date for delivery of the order"
          }
        },
        "example": {
          "Status": "driver_at_address",
          "NewDueDate": "2018-03-10T14:45:28Z"
        }
      },
      "400ConnectTokenResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "A description of the error that occurred."
          }
        }
      },
      "ConnectTokenRequest": {
        "required": [
          "client_id",
          "grant_type"
        ],
        "properties": {
          "client_id": {
            "type": "string",
            "description": "client identifier"
          },
          "client_secret": {
            "type": "string",
            "description": "The client secret - either in the post body, or as a basic authentication header."
          },
          "grant_type": {
            "type": "string",
            "enum": [
              "authorization_code",
              "client_credentials",
              "password",
              "refresh_token",
              "urn:ietf:params:oauth:grant-type:device_code"
            ],
            "description": "The grant type which determines the type of flow. A custom value is also allowed."
          },
          "scope": {
            "type": "string",
            "description": "One or more registered scopes. If not specified, a token for all explicitly  allowed scopes will be issued."
          },
          "redirect_uri": {
            "type": "string",
            "description": "Required for the `authorization_code` grant type"
          },
          "code": {
            "type": "string",
            "description": "The authorization code (required for `authorization_code` grant type)"
          },
          "code_verifier": {
            "type": "string",
            "description": "PKCE proof key"
          },
          "username": {
            "type": "string",
            "description": "Resource owner username (required for `password` grant type)"
          },
          "password": {
            "type": "string",
            "description": "Resource owner password (required for `password` grant type)"
          },
          "acr_values": {
            "type": "string",
            "description": "Allows passing in additional authentication related information for the `password` grant type - the following  are special proprietary `acr_values`:\n- `idp:name_of_idp` bypasses the login/home realm screen and forwards the user directly to the selected identity provider (if allowed per client configuration)\n- `tenant:name_of_tenant` can be used to pass a tenant name to the token endpoint"
          },
          "refresh_token": {
            "type": "string",
            "description": "The refresh token (required for `refresh_token` grant type)"
          },
          "device_code": {
            "type": "string",
            "description": "The device code (required for `urn:ietf:params:oauth:grant-type:device_code` grant type)"
          }
        }
      },
      "ConnectTokenResponse": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "The access token. This is a JSON web token (JWT) encoded as Base64 URL-encoding. This is returned if the `response_type` included `token`."
          },
          "expires_in": {
            "type": "integer",
            "description": "The number of seconds until the access token expires."
          },
          "id_token": {
            "type": "string",
            "description": "An ID token. This is a JSON web token (JWT) encoded as Base64 URL-encoding. \nThis is returned if the `response_type` included `id_token`."
          },
          "scope": {
            "type": "string",
            "description": "The original scopes you provided."
          },
          "token_type": {
            "type": "string",
            "description": "This is always `bearer`, and is returned only  when `token` is specified as a `response_type`."
          }
        }
      },
      "BasketErrorResponse": {
        "type": "object",
        "description": "The error object returned when an operation fails",
        "properties": {
          "ErrorType": {
            "$ref": "#/components/schemas/BasketErrorType"
          },
          "Message": {
            "type": "string"
          },
          "InnerErrors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "ErrorType": {
                  "$ref": "#/components/schemas/BasketErrorType"
                },
                "Message": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "BasketErrorType": {
        "type": "string",
        "enum": [
          "Unknown",
          "MenuNotFound",
          "BasketNotRetrieved",
          "BasketNotMapped",
          "BasketNotDeserialised",
          "BasketErrorsNotDeserialised",
          "InvalidBasketItems",
          "BasketNotCreated",
          "InvalidBasketUpdateRequest",
          "ProductNotFound",
          "ProductNotUpdated",
          "ZipcodeNotUpdated",
          "ServiceTypeNotUpdated",
          "ProductNotAdded",
          "ProductsNotAdded",
          "MaximumBasketSizeReached",
          "MinimumBasketSizeReached",
          "OrderItemNotRemoved",
          "NoAvailableMenu",
          "RestaurantDoesNotDeliverToLocation",
          "InvalidLocation",
          "OrderItemNotFound",
          "PartialProductsUpdate",
          "AllProductsUpdateFailed",
          "ProductsNotRemoved",
          "InvalidCreateBasketRequest",
          "BasketNotFound"
        ]
      },
      "BasketGeoLocation": {
        "type": "object",
        "properties": {
          "Latitude": {
            "type": "number",
            "format": "decimal"
          },
          "Longitude": {
            "type": "number",
            "format": "decimal"
          }
        }
      },
      "BasketLocation": {
        "type": "object",
        "properties": {
          "ZipCode": {
            "type": "string"
          },
          "GeoLocation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasketGeoLocation"
              }
            ],
            "nullable": true,
            "description": "Not available across platform yet, but applied for future proofing."
          }
        }
      },
      "BasketResponse": {
        "type": "object",
        "description": "The response object for all basket endpoints.",
        "properties": {
          "BasketId": {
            "type": "string"
          },
          "CreateDate": {
            "type": "string",
            "nullable": true,
            "description": "`YYYY-MM-DDThh:mm:ssZ (UTC)`"
          },
          "RestaurantSeoName": {
            "type": "string",
            "nullable": true,
            "description": "A unique per tenant identifier for a restaurant used for external operations."
          },
          "MenuGroupId": {
            "type": "string"
          },
          "ServiceType": {
            "type": "string"
          },
          "BasketSummary": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasketSummary"
              }
            ],
            "description": "Information for displaying the basket to the user."
          },
          "IsOrderable": {
            "type": "boolean"
          }
        }
      },
      "BasketSummary": {
        "type": "object",
        "properties": {
          "Products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          },
          "Deals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Deal"
            }
          },
          "CategoryOffers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryOffer"
            }
          },
          "RestaurantOffers": {
            "description": "The list of restaurant offers",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RestaurantOffer"
            },
            "example": [
              {
                "OfferId": "ftcOfferId75",
                "OfferType": "Percent",
                "ConsumerSegment": "NewToRestaurant",
                "DiscountValue": 20,
                "DiscountApplied": 8.37
              },
              {
                "OfferId": "stampCardLoyaltyCampaignOfferId287",
                "OfferType": "StampCard",
                "ConsumerSegment": "All",
                "DiscountValue": 0,
                "DiscountApplied": 28.37,
                "DiscountCode": "mgt36rtp8VoucherCode"
              }
            ]
          },
          "DeliveryCharge": {
            "type": "number",
            "format": "decimal"
          },
          "BasketTotals": {
            "type": "object",
            "items": {
              "$ref": "#/components/schemas/BasketTotals"
            }
          },
          "Prompts": {
            "type": "object",
            "nullable": true,
            "$ref": "#/components/schemas/Prompts"
          },
          "MaximumAdditionalOrderItems": {
            "type": "number",
            "format": "integer"
          },
          "PaymentDirectives": {
            "description": "The directives to payment component",
            "$ref": "#/components/schemas/PaymentDirectives",
            "example": {
              "DisableCashPayment": true
            }
          }
        },
        "required": [
          "MaximumAdditionalOrderItems"
        ]
      },
      "BasketTotals": {
        "type": "object",
        "properties": {
          "SubTotal": {
            "type": "number",
            "format": "decimal"
          },
          "Total": {
            "type": "number",
            "format": "decimal"
          }
        }
      },
      "CategoryOffer": {
        "type": "object",
        "properties": {
          "CategoryId": {
            "type": "string"
          },
          "DiscountValue": {
            "type": "number",
            "format": "decimal"
          },
          "ProductId": {
            "type": "string",
            "description": "The unique identifier of product qualified for discount"
          },
          "OfferId": {
            "type": "string",
            "nullable": true,
            "description": "The unique identifier of underlying consumer offers, if applicable"
          },
          "DiscountType": {
            "type": "string",
            "description": "The type of discount"
          }
        }
      },
      "CollectionActionType": {
        "type": "string",
        "enum": [
          "REPLACE",
          "APPEND",
          "PREPEND",
          "REMOVE"
        ]
      },
      "CreateDeal": {
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "description": "`YYYY-MM-DDThh:mm:ssZ (UTC)`"
          },
          "ProductId": {
            "type": "string"
          },
          "DealGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateDealGroup"
            }
          },
          "Quantity": {
            "type": "number",
            "format": "integer"
          }
        }
      },
      "CreateDealGroup": {
        "type": "object",
        "properties": {
          "DealGroupId": {
            "type": "string"
          },
          "Products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateProduct"
            }
          }
        }
      },
      "CreateGeoLocation": {
        "type": "object",
        "properties": {
          "Latitude": {
            "type": "number",
            "format": "decimal"
          },
          "Longitude": {
            "type": "number",
            "format": "decimal"
          }
        }
      },
      "CreateLocation": {
        "type": "object",
        "properties": {
          "ZipCode": {
            "type": "string"
          },
          "GeoLocation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateGeoLocation"
              }
            ],
            "nullable": true,
            "description": "Not available across platform yet, but applied for future proofing."
          }
        }
      },
      "CreateModifier": {
        "type": "object",
        "properties": {
          "ModifierId": {
            "type": "string"
          },
          "Quantity": {
            "type": "number",
            "format": "integer"
          }
        }
      },
      "CreateModifierGroup": {
        "type": "object",
        "properties": {
          "ModifierGroupId": {
            "type": "string"
          },
          "Modifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateModifier"
            }
          }
        }
      },
      "CreateOrderDetails": {
        "type": "object",
        "properties": {
          "Location": {
            "$ref": "#/components/schemas/CreateLocation"
          }
        }
      },
      "CreateProduct": {
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "description": "`YYYY-MM-DDThh:mm:ssZ (UTC)`"
          },
          "ProductId": {
            "type": "string"
          },
          "Quantity": {
            "type": "number",
            "format": "integer"
          },
          "ModifierGroups": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/CreateModifierGroup"
            }
          },
          "RemovedIngredients": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/CreateRemovedIngredient"
            }
          }
        }
      },
      "CreateRemovedIngredient": {
        "type": "object",
        "properties": {
          "Details": {
            "type": "string"
          }
        }
      },
      "CreateRequest": {
        "type": "object",
        "description": "The request object for creating a basket.",
        "properties": {
          "RestaurantSeoName": {
            "type": "string",
            "nullable": true,
            "description": "A unique per tenant identifier for a restaurant used for external operations."
          },
          "MenuGroupId": {
            "type": "string"
          },
          "Products": {
            "type": "array",
            "nullable": true,
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CreateProduct"
                }
              ],
              "description": "Individual product to added to new basket."
            },
            "description": "All products to added to new basket."
          },
          "Deals": {
            "type": "array",
            "nullable": true,
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CreateDeal"
                }
              ],
              "description": "Individual deal to added to new basket."
            },
            "description": "All deals to added to new basket."
          },
          "OrderDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateOrderDetails"
              }
            ],
            "description": "Information needed to allow an order to be placed on a basket."
          }
        }
      },
      "Deal": {
        "type": "object",
        "properties": {
          "BasketProductIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ProductId": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Variation": {
            "type": "string",
            "nullable": true
          },
          "Quantity": {
            "type": "number",
            "format": "integer"
          },
          "TotalPrice": {
            "type": "number",
            "format": "decimal"
          },
          "CategoryId": {
            "type": "string"
          },
          "DealGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DealGroup"
            }
          }
        }
      },
      "DealGroup": {
        "type": "object",
        "properties": {
          "DealGroupId": {
            "type": "string"
          },
          "Products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DealProduct"
            }
          }
        }
      },
      "DealProduct": {
        "type": "object",
        "properties": {
          "ProductId": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Variation": {
            "type": "string",
            "nullable": true
          },
          "Quantity": {
            "type": "number",
            "format": "integer"
          },
          "TotalPrice": {
            "type": "number",
            "format": "decimal"
          },
          "ModifierGroups": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ModifierGroup"
            }
          },
          "RemovedIngredients": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/RemovedIngredient"
            }
          }
        }
      },
      "InvalidProduct": {
        "type": "object",
        "properties": {
          "ProductId": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "ItemDiscount": {
        "title": "ItemDiscount",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "description": "The unique identifier of the discounted product item."
          },
          "discountPercentage": {
            "type": "number",
            "description": "The discount percentage applied.",
            "format": "integer"
          },
          "modifierGroups": {
            "type": "array",
            "nullable": true,
            "description": "The collection of preselected modifier groups for the item.",
            "items": {
              "$ref": "#/components/schemas/ModifierGroup"
            }
          }
        },
        "example": {
          "productId": "Lemonade1234",
          "discountPercentage": 100,
          "modifierGroups": [
            {
              "ModifierGroupId": "modifier111",
              "MinimumChoices": 1,
              "Modifiers": [
                {
                  "ModifierId": "NoSugar11",
                  "Quantity": 1,
                  "TotalPrice": 0,
                  "MaximumAdditionalModifiers": 0
                }
              ]
            }
          ]
        }
      },
      "ItemDiscountPrompt": {
        "title": "ItemDiscountPrompt",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "itemDiscounts": {
            "type": "array",
            "description": "The array of items with discounts",
            "items": {
              "$ref": "#/components/schemas/ItemDiscount"
            }
          },
          "title": {
            "type": "string",
            "description": "The title to show in prompt for customer"
          },
          "header": {
            "type": "string",
            "description": "The header to show in prompt for customer"
          },
          "description": {
            "type": "string",
            "description": "The description of offer to show in prompt for customer"
          }
        },
        "example": {
          "itemDiscounts": [
            {
              "productId": "Lemonade1234",
              "discountPercentage": 100,
              "modifierGroups": [
                {
                  "ModifierGroupId": "modifier111",
                  "MinimumChoices": 1,
                  "Modifiers": [
                    {
                      "ModifierId": "NoSugar11",
                      "Quantity": 1,
                      "TotalPrice": 0,
                      "MaximumAdditionalModifiers": 0
                    }
                  ]
                }
              ]
            }
          ],
          "title": "Get free lemonade",
          "description": "Get free lemonade with Super Burger",
          "header": "Free item!"
        }
      },
      "Modifier": {
        "type": "object",
        "properties": {
          "ModifierId": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Quantity": {
            "type": "number",
            "format": "integer"
          },
          "TotalPrice": {
            "type": "number",
            "format": "decimal"
          },
          "MaximumAdditionalModifiers": {
            "type": "number",
            "format": "integer"
          }
        },
        "required": [
          "MaximumAdditionalModifiers"
        ]
      },
      "ModifierGroup": {
        "type": "object",
        "properties": {
          "ModifierGroupId": {
            "type": "string"
          },
          "MinimumChoices": {
            "type": "number",
            "format": "integer"
          },
          "Modifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Modifier"
            }
          }
        },
        "required": [
          "MinimumChoices"
        ]
      },
      "OfflineProduct": {
        "type": "object",
        "properties": {
          "ProductId": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "PaymentDirectives": {
        "type": "object",
        "description": "The directives for payment component",
        "properties": {
          "DisableCashPayment": {
            "description": "Indicates if cash payment option should be disabled",
            "type": "boolean"
          }
        }
      },
      "Product": {
        "type": "object",
        "properties": {
          "BasketProductIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ProductId": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Variation": {
            "type": "string",
            "nullable": true
          },
          "Quantity": {
            "type": "number",
            "format": "integer"
          },
          "TotalPrice": {
            "type": "number",
            "format": "decimal"
          },
          "CategoryId": {
            "type": "string"
          },
          "ModifierGroups": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ModifierGroup"
            }
          },
          "RemovedIngredients": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/RemovedIngredient"
            }
          }
        }
      },
      "Prompts": {
        "type": "object",
        "properties": {
          "SpendMore": {
            "type": "object",
            "nullable": true,
            "properties": {
              "ToSpend": {
                "type": "number",
                "format": "decimal"
              },
              "MinimumOrderAmount": {
                "type": "number",
                "format": "decimal"
              }
            }
          },
          "DiscountApplied": {
            "type": "object",
            "nullable": true,
            "properties": {
              "Amount": {
                "type": "number",
                "format": "decimal"
              }
            }
          },
          "Offers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "OfferType": {
                  "type": "string"
                },
                "DiscountValue": {
                  "type": "number",
                  "format": "decimal"
                },
                "QualifyingValue": {
                  "type": "number",
                  "format": "decimal"
                },
                "ToSpendValue": {
                  "type": "number",
                  "format": "decimal"
                }
              }
            }
          },
          "InvalidProducts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvalidProduct"
            }
          },
          "OfflineProducts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfflineProduct"
            }
          },
          "ItemDiscounts": {
            "type": "array",
            "description": "Collection of item discount prompts to be shown customer",
            "items": {
              "$ref": "#/components/schemas/ItemDiscountPrompt"
            }
          },
          "RequiresOther": {
            "type": "boolean"
          }
        }
      },
      "RemovedIngredient": {
        "type": "object",
        "properties": {
          "Details": {
            "type": "string"
          }
        }
      },
      "RestaurantOffer": {
        "type": "object",
        "required": [
          "OfferId",
          "OfferType",
          "ConsumerSegment",
          "DiscountApplied"
        ],
        "properties": {
          "OfferId": {
            "description": "The unique identifier of the offer",
            "type": "string",
            "nullable": false
          },
          "OfferType": {
            "description": "The type of the offer",
            "type": "string",
            "nullable": false
          },
          "ConsumerSegment": {
            "description": "Consumer Segment to which offer applies",
            "type": "string",
            "example": "NewToRestaurant",
            "nullable": false
          },
          "DiscountValue": {
            "description": "The percentage value discount. Returned 0 when offer is not of Percent type",
            "type": "number",
            "format": "decimal",
            "nullable": false
          },
          "DiscountApplied": {
            "description": "The money value discount",
            "type": "number",
            "format": "decimal",
            "nullable": false
          },
          "DiscountCode": {
            "description": "The unique code of the discount, acts as a lock object at payment stage",
            "type": "string",
            "nullable": true
          }
        }
      },
      "UpdateAddedDeal": {
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "description": "`YYYY-MM-DDThh:mm:ssZ (UTC)`"
          },
          "ProductId": {
            "type": "string"
          },
          "DealGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateDealGroup"
            }
          },
          "Quantity": {
            "type": "number",
            "format": "integer"
          }
        }
      },
      "UpdateAddedProduct": {
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "description": "`YYYY-MM-DDThh:mm:ssZ (UTC)`"
          },
          "ProductId": {
            "type": "string"
          },
          "Quantity": {
            "type": "number",
            "format": "integer"
          },
          "ModifierGroups": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/UpdateModifierGroup"
            }
          },
          "RemovedIngredients": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/UpdateRemovedIngredient"
            }
          }
        }
      },
      "UpdateDeal": {
        "type": "object",
        "properties": {
          "Added": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/UpdateAddedDeal"
            }
          },
          "Removed": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/UpdateRemoved"
            }
          },
          "Updated": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/UpdateUpdatedDeal"
            }
          }
        }
      },
      "UpdateDealGroup": {
        "type": "object",
        "properties": {
          "DealGroupId": {
            "type": "string"
          },
          "Products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateAddedProduct"
            }
          }
        }
      },
      "UpdateLocation": {
        "type": "object",
        "properties": {
          "ZipCode": {
            "type": "object",
            "nullable": true,
            "properties": {
              "Date": {
                "type": "string"
              },
              "Value": {
                "type": "string"
              }
            }
          },
          "GeoLocation": {
            "type": "object",
            "nullable": true,
            "properties": {
              "Date": {
                "type": "string"
              },
              "Value": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "Latitude": {
                        "type": "number",
                        "format": "decimal"
                      },
                      "Longitude": {
                        "type": "number",
                        "format": "decimal"
                      }
                    }
                  }
                ],
                "description": "Not available across platform yet, but applied for future proofing."
              }
            }
          }
        }
      },
      "UpdateModifier": {
        "type": "object",
        "properties": {
          "ModifierId": {
            "type": "string"
          },
          "Quantity": {
            "type": "number",
            "format": "integer"
          }
        }
      },
      "UpdateModifierGroup": {
        "type": "object",
        "properties": {
          "ModifierGroupId": {
            "type": "string"
          },
          "Modifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateModifier"
            }
          }
        }
      },
      "UpdateOrderDetails": {
        "type": "object",
        "properties": {
          "Location": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdateLocation"
              }
            ],
            "nullable": true
          }
        }
      },
      "UpdateProduct": {
        "type": "object",
        "properties": {
          "Added": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/UpdateAddedProduct"
            }
          },
          "Removed": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/UpdateRemoved"
            }
          },
          "Updated": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/UpdateUpdatedProduct"
            }
          }
        }
      },
      "UpdateQuantity": {
        "type": "object",
        "properties": {
          "Change": {
            "type": "number",
            "format": "integer",
            "description": "Value to apply to existing quantity."
          },
          "Total": {
            "type": "number",
            "format": "integer",
            "description": "Value that replaces the current quantity."
          }
        }
      },
      "UpdateRemoved": {
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "description": "`YYYY-MM-DDThh:mm:ssZ (UTC)`"
          },
          "BasketProductId": {
            "type": "string",
            "description": "A unique identifier for a product in the basket. This is needed to support complex products to make sure remove/update is applied to the correct product."
          }
        }
      },
      "UpdateRemovedIngredient": {
        "type": "object",
        "properties": {
          "Details": {
            "type": "string"
          }
        }
      },
      "UpdateRequest": {
        "type": "object",
        "description": "The request object for updating a basket.",
        "properties": {
          "BasketId": {
            "type": "string"
          },
          "SelectedServiceType": {
            "type": "object",
            "nullable": true,
            "properties": {
              "Date": {
                "type": "string"
              },
              "Value": {
                "type": "string"
              }
            }
          },
          "Product": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdateProduct"
              }
            ],
            "nullable": true
          },
          "Deal": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdateDeal"
              }
            ],
            "nullable": true
          },
          "OrderDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdateOrderDetails"
              }
            ],
            "nullable": true,
            "description": "Information needed to allow an order to be placed on a basket."
          }
        }
      },
      "UpdateUpdatedDeal": {
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "description": "`YYYY-MM-DDThh:mm:ssZ (UTC)`"
          },
          "BasketProductId": {
            "type": "string"
          },
          "Quantity": {
            "type": "object",
            "items": {
              "$ref": "#/components/schemas/UpdateQuantity"
            }
          },
          "DealGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateDealGroup"
            }
          }
        }
      },
      "UpdateUpdatedProduct": {
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "description": "`YYYY-MM-DDThh:mm:ssZ (UTC)`"
          },
          "BasketProductId": {
            "type": "string"
          },
          "Quantity": {
            "type": "object",
            "items": {
              "$ref": "#/components/schemas/UpdateQuantity"
            }
          },
          "ModifierGroups": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/UpdateModifierGroup"
            }
          },
          "RemovedIngredients": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/UpdateRemovedIngredient"
            }
          }
        }
      },
      "BenderErrorResponse": {
        "type": "object",
        "description": "The error object returned when an operation fails",
        "properties": {
          "error": {
            "description": "Error Title",
            "type": "string"
          },
          "message": {
            "description": "Error Message Text",
            "type": "string"
          }
        }
      },
      "BenderSettings": {
        "type": "object",
        "description": "The bender settings object for all endpoints.",
        "properties": {
          "deliveryZoneId": {
            "type": "string",
            "description": "Bender Settings Delivery Zone Id"
          },
          "benderStatus": {
            "type": "boolean",
            "description": "Bender On/Off Status"
          },
          "targetUsage": {
            "nullable": true,
            "type": "number",
            "format": "double",
            "description": "Minimum target Usage Percentage"
          },
          "protectionThreshold": {
            "type": "number",
            "format": "integer",
            "description": "Number of hours of Threshold protection"
          },
          "settingsFlexStates": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SettingsFlexStates"
              }
            ],
            "description": "Flex states information for given Delivery Zone Id"
          }
        }
      },
      "BenderSettingsList": {
        "type": "object",
        "description": "Bender Settings List",
        "properties": {
          "benderSettingsList": {
            "type": "array",
            "description": "List of Bender Settings",
            "items": {
              "$ref": "#/components/schemas/BenderSettings"
            }
          }
        }
      },
      "FlexStateType": {
        "type": "string",
        "enum": [
          "CODE_RED",
          "OPEN",
          "SEEKING"
        ]
      },
      "SettingsFlexStates": {
        "type": "object",
        "properties": {
          "triggerUsage": {
            "description": "Usage percentage for given state type",
            "type": "number",
            "format": "double"
          },
          "averageAssignableJobLoad": {
            "description": "Average assignable Job load for given state type",
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "flexStateType": {
            "description": "Flex State Type Options",
            "$ref": "#/components/schemas/FlexStateType"
          }
        }
      },
      "binary-object": {
        "type": "string",
        "format": "binary"
      },
      "MarketingContentResponse": {
        "type": "object",
        "properties": {
          "selected": {
            "description": "The set of 'select' properties from the request that meet the following criteria: \n  1) The user has data for the property\n  2) The data for the given user is present in the 'accepted values' specified in the request.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": true,
        "example": {
          "selected": [
            "subjectLine",
            "anotherField"
          ],
          "subjectLine": "humor",
          "anotherField": "another value"
        }
      },
      "CheckoutAction": {
        "required": [
          "type",
          "data"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Identifier for the type of action data for the payment method dependant on paymentOptionType."
          },
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Action data dictionary. Key value pairs required to make payment.",
            "example": {
              "nonce": "acbd2334",
              "braintreeDeviceData": "someescapedjson",
              "deviceId": "somedeviceid",
              "payerEmail": "someemail@paypal.com",
              "payerId": "somepaypalpayerid12345"
            }
          }
        },
        "description": "Action data needed to make payment for payment method in use. This data is dependant on the Payment Service Provider and payment method. When used for checkout where fraud-check is required, device-id, payer email and payer identifier should be provided."
      },
      "CheckoutGetResponse": {
        "type": "object",
        "description": "Properties apply to all supported country codes, except where specified.",
        "properties": {
          "restaurant": {
            "description": "The restaurant selling the items to be purchased.",
            "type": "object",
            "nullable": false,
            "required": [
              "id",
              "availabilityId"
            ],
            "properties": {
              "id": {
                "description": "Unique identifier for the restaurant.",
                "type": "string",
                "nullable": false
              },
              "availabilityId": {
                "description": "Unique identifier to identify when item(s) are available for ordering.\n",
                "type": "string",
                "nullable": false,
                "deprecated": true
              }
            }
          },
          "serviceType": {
            "description": "How the order will be dispatched.",
            "type": "string",
            "enum": [
              "delivery",
              "collection"
            ],
            "nullable": false
          },
          "customer": {
            "description": "Details of the customer making the purchase.\n\nDetails of the customer will need to be submitted to the service. No default values will be set.\n",
            "type": "object",
            "nullable": false,
            "properties": {
              "firstName": {
                "description": "Customer's first name. \n\nAlso known as Given Name(s).\n",
                "type": "string",
                "nullable": true,
                "minLength": 1,
                "maxLength": 100
              },
              "lastName": {
                "description": "Customer's last name (Optional).\n\nAlso known as Family Name.\n",
                "type": "string",
                "nullable": true,
                "minLength": 0,
                "maxLength": 100
              },
              "phoneNumber": {
                "description": "Customer's phone number.\n\nA phone number can be represented in:\n  - E.164 format e.g. +447777111111 or;\n  - Local format of submitted tenant e.g. 07777111111.\n\nE.164 formatted phone numbers are preferred.\n",
                "type": "string",
                "nullable": true,
                "minLength": 3,
                "maxLength": 16
              }
            }
          },
          "fulfilment": {
            "description": "How and when the items will be received by the customer.",
            "type": "object",
            "nullable": false,
            "properties": {
              "time": {
                "description": "Time the customer wants to receive the order i.e. when order is fulfilled.",
                "type": "object",
                "nullable": true,
                "required": [
                  "asap"
                ],
                "properties": {
                  "asap": {
                    "description": "If the order should be fulfilled as soon as possible (ASAP).\n\nASAP may not be fulfillable.\n\nDefault is false.\n",
                    "type": "boolean",
                    "nullable": false
                  },
                  "scheduled": {
                    "description": "Scheduled time the customer wants the order to be fulfilled.\n\nIf ASAP is selected and fulfillable, this will be set to the next available fulfilment time.\n",
                    "type": "object",
                    "nullable": true,
                    "required": [
                      "from",
                      "to"
                    ],
                    "properties": {
                      "from": {
                        "description": "Earliest time the customer wants the order to be fulfilled represented in ISO 8601 UTC (Zulu Time).",
                        "type": "string",
                        "nullable": false
                      },
                      "to": {
                        "description": "Latest time the customer wants the order to be fulfilled represented in ISO 8601 UTC (Zulu Time). \n\nThis time must be greater than or equal to the from time.\n",
                        "type": "string",
                        "nullable": false
                      }
                    }
                  }
                }
              },
              "location": {
                "description": "The destination the customer wants to receive the order.\n\nThis only applies to purchases with a delivery service type.\n",
                "type": "object",
                "nullable": true,
                "properties": {
                  "address": {
                    "description": "The postal address where the customer wants to receive the order.",
                    "type": "object",
                    "nullable": true,
                    "properties": {
                      "lines": {
                        "description": "One or more lines representing the street address.",
                        "type": "array",
                        "nullable": false,
                        "minItems": 0,
                        "maxItems": 4,
                        "items": {
                          "description": "Represents part of a street address.",
                          "type": "string",
                          "nullable": false,
                          "minLength": 1,
                          "maxLength": 100
                        }
                      },
                      "locality": {
                        "description": "The locality of this address.\n\nAlso known as Town or City.\n",
                        "type": "string",
                        "nullable": true,
                        "minLength": 1,
                        "maxLength": 50
                      },
                      "administrativeArea": {
                        "description": "Geographical region of this address. \n\nAlso known as County or State.\n\nRequired in Australia (AU) only for an order to be fulfilled.\n",
                        "type": "string",
                        "nullable": true,
                        "minLength": 1,
                        "maxLength": 50
                      },
                      "postalCode": {
                        "description": "Postal code of this address.",
                        "type": "string",
                        "nullable": true,
                        "minLength": 1,
                        "maxLength": 50
                      }
                    }
                  },
                  "geolocation": {
                    "description": "The coordinates of a geographical location where the customer wants to receive the order.\n\nRequired in Australia (AU) and New Zealand (NZ) only for an order to be fulfilled.\n",
                    "type": "object",
                    "nullable": true,
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "properties": {
                      "latitude": {
                        "description": "The latitude of the geographical location.",
                        "type": "number",
                        "format": "decimal",
                        "nullable": false
                      },
                      "longitude": {
                        "description": "The longitude of the geographical location.",
                        "type": "number",
                        "format": "decimal",
                        "nullable": false
                      }
                    }
                  }
                }
              }
            }
          },
          "isFulfillable": {
            "description": "Whether the proposed order can be placed.",
            "type": "boolean",
            "nullable": false
          },
          "issues": {
            "description": "One or more issues associated the proposed order, that may impact whether it can be placed.",
            "type": "array",
            "nullable": false,
            "minItems": 0,
            "maxItems": 18,
            "items": {
              "description": "Represents a single issue associated with the proposed order.",
              "$ref": "#/components/schemas/CheckoutIssue",
              "nullable": false
            }
          }
        },
        "required": [
          "restaurant",
          "serviceType",
          "customer",
          "fulfilment",
          "isFulfillable",
          "issues"
        ]
      },
      "CheckoutIssue": {
        "type": "object",
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "description": "The issue code",
            "type": "string",
            "enum": [
              "RESTAURANT_NOT_TAKING_ORDERS",
              "SERVICE_TYPE_UNAVAILABLE",
              "ITEMS_UNORDERABLE",
              "ADDITIONAL_ITEMS_REQUIRED",
              "MINIMUM_ORDER_VALUE_NOT_MET",
              "FULFILMENT_TIME_UNAVAILABLE",
              "LOCATION_UNDELIVERABLE",
              "AGE_VERIFICATION_FAILED",
              "FIRST_NAME_REQUIRED",
              "PHONE_NUMBER_REQUIRED",
              "DATE_OF_BIRTH_REQUIRED",
              "FULFILMENT_TIME_REQUIRED",
              "ADDRESS_LINES_REQUIRED",
              "LOCALITY_REQUIRED",
              "ADMINISTRATIVE_AREA_REQUIRED",
              "POSTAL_CODE_REQUIRED",
              "GEOLOCATION_REQUIRED"
            ],
            "nullable": false
          }
        },
        "discriminator": {
          "propertyName": "code",
          "mapping": {
            "RESTAURANT_NOT_TAKING_ORDERS": "#/components/schemas/CheckoutIssue_RestaurantNotTakingOrders",
            "SERVICE_TYPE_UNAVAILABLE": "#/components/schemas/CheckoutIssue_ServiceTypeUnavailable",
            "ITEMS_UNORDERABLE": "#/components/schemas/CheckoutIssue_ItemsUnorderable",
            "ADDITIONAL_ITEMS_REQUIRED": "#/components/schemas/CheckoutIssue_AdditionalItemsRequired",
            "MINIMUM_ORDER_VALUE_NOT_MET": "#/components/schemas/CheckoutIssue_MinimumOrderValueNotMet",
            "FULFILMENT_TIME_UNAVAILABLE": "#/components/schemas/CheckoutIssue_FulfilmentTimeUnavailable",
            "LOCATION_UNDELIVERABLE": "#/components/schemas/CheckoutIssue_LocationUndeliverable",
            "AGE_VERIFICATION_FAILED": "#/components/schemas/CheckoutIssue_AgeVerificationFailed",
            "FIRST_NAME_REQUIRED": "#/components/schemas/CheckoutIssue_FirstNameRequired",
            "PHONE_NUMBER_REQUIRED": "#/components/schemas/CheckoutIssue_PhoneNumberRequired",
            "DATE_OF_BIRTH_REQUIRED": "#/components/schemas/CheckoutIssue_DateOfBirthRequired",
            "FULFILMENT_TIME_REQUIRED": "#/components/schemas/CheckoutIssue_FulfilmentTimeRequired",
            "ADDRESS_LINES_REQUIRED": "#/components/schemas/CheckoutIssue_AddressLinesRequired",
            "LOCALITY_REQUIRED": "#/components/schemas/CheckoutIssue_LocalityRequired",
            "ADMINISTRATIVE_AREA_REQUIRED": "#/components/schemas/CheckoutIssue_AdministrativeAreaRequired",
            "POSTAL_CODE_REQUIRED": "#/components/schemas/CheckoutIssue_PostalCodeRequired",
            "GEOLOCATION_REQUIRED": "#/components/schemas/CheckoutIssue_GeolocationRequired"
          }
        }
      },
      "CheckoutRequest": {
        "required": [
          "paymentOptionType"
        ],
        "type": "object",
        "properties": {
          "paymentOptionType": {
            "type": "string",
            "description": "Identifier used to determine method of payment.",
            "enum": [
              "AccountCredit",
              "AndroidPay",
              "ApplePay",
              "Card",
              "Cash",
              "GooglePay",
              "PayPal",
              "SavedCard",
              "VCO"
            ]
          },
          "paymentOptionId": {
            "type": "string",
            "description": "Token to use for saved card payment. Tokens retrieved from order payment options or basket payment options calls on Public API."
          },
          "voucherCode": {
            "type": "string",
            "description": "Voucher code to apply to order."
          },
          "action": {
            "type": "object",
            "description": "Action data needed to make payment for payment method in use. This data is dependant on the Payment Service Provider and payment method. When used for checkout where fraud-check is required, device-id, payer email and payer identifier should be provided.",
            "$ref": "#/components/schemas/CheckoutAction"
          }
        },
        "description": "Details needed to make a payment."
      },
      "CheckoutResponse": {
        "type": "object",
        "properties": {
          "tenant": {
            "type": "string",
            "description": "The tenant associated with the consumer."
          },
          "orderId": {
            "type": "string",
            "description": "The Id of the order."
          },
          "result": {
            "type": "string",
            "description": "The result of payment attempt. 2xxxx = successful payment. 4xxxxx = validation error, 5xxxx = server error",
            "enum": [
              "20000",
              "40000",
              "50000"
            ]
          },
          "timestamp": {
            "type": "string",
            "description": "The UTC timestamp of the date and time that the response was generated at.",
            "format": "date-time",
            "x-api-version-from": "2019-04"
          }
        },
        "description": "The result of a payment attempt."
      },
      "CheckoutUpdateRequest": {
        "type": "object",
        "description": "Properties apply to all supported country codes, except where specified.\n\nWe do not support a PATCH request on the root path and a 400 status code will be returned.\n",
        "properties": {
          "customer": {
            "description": "Details of the customer making the purchase.",
            "type": "object",
            "nullable": true,
            "properties": {
              "firstName": {
                "description": "Customer's first name. \n\nAlso known as Given Name(s).\n",
                "type": "string",
                "nullable": true,
                "minLength": 1,
                "maxLength": 100
              },
              "lastName": {
                "description": "Customer's last name (Optional). \n\nAlso known as Family Name.\n",
                "type": "string",
                "nullable": true,
                "minLength": 0,
                "maxLength": 100
              },
              "phoneNumber": {
                "description": "Customer's phone number.\n\nA phone number can be represented in:\n  - E.164 format e.g. +447777111111 or;\n  - Local format of submitted tenant e.g. 07777111111.\n\nE.164 formatted phone numbers are preferred.\n",
                "type": "string",
                "nullable": true,
                "minLength": 3,
                "maxLength": 16
              },
              "dateOfBirth": {
                "description": "Customer's date of birth represented in ISO 8601 format. If a time is submitted, it will be ignored.\n\nRequired in Australia (AU) and New Zealand (NZ) only for fulfilling an order that contain items being purchased that require age verification.\n",
                "type": "string",
                "nullable": true
              }
            }
          },
          "fulfilment": {
            "description": "How and when the items will be received by the customer.",
            "type": "object",
            "nullable": true,
            "properties": {
              "time": {
                "description": "Time the customer wants to receive the order i.e. when order is fulfilled.",
                "type": "object",
                "nullable": true,
                "properties": {
                  "asap": {
                    "description": "If the order should be fulfilled as soon as possible (ASAP).\n\nASAP may not be fulfillable.\n\nDefault is false.\n",
                    "type": "boolean",
                    "nullable": false
                  },
                  "scheduled": {
                    "description": "Scheduled time the customer wants the order to be fulfilled.\n\nThe scheduled time will be ignored if ASAP is selected.\n",
                    "type": "object",
                    "nullable": true,
                    "required": [
                      "from",
                      "to"
                    ],
                    "properties": {
                      "from": {
                        "description": "Earliest time the customer wants the order to be fulfilled represented in ISO 8601 UTC (Zulu Time).",
                        "type": "string",
                        "nullable": false
                      },
                      "to": {
                        "description": "Latest time the customer wants the order to be fulfilled represented in ISO 8601 UTC (Zulu Time). \n\nThis time must be greater than or equal to the from time.\n",
                        "type": "string",
                        "nullable": false
                      }
                    }
                  }
                }
              },
              "location": {
                "description": "The destination the customer wants to receive the order.\n\nThis only applies to purchases with a delivery service type.\n",
                "type": "object",
                "nullable": true,
                "properties": {
                  "address": {
                    "description": "The postal address where the customer wants to receive the order.",
                    "type": "object",
                    "nullable": true,
                    "properties": {
                      "lines": {
                        "description": "One or more lines representing the street address.",
                        "type": "array",
                        "nullable": true,
                        "minItems": 1,
                        "maxItems": 4,
                        "items": {
                          "description": "Represents part of a street address.",
                          "type": "string",
                          "nullable": false,
                          "minLength": 1,
                          "maxLength": 100
                        }
                      },
                      "locality": {
                        "description": "The locality of this address.\n\nAlso known as Town or City.\n",
                        "type": "string",
                        "nullable": true,
                        "minLength": 1,
                        "maxLength": 50
                      },
                      "administrativeArea": {
                        "description": "Geographical region of this address. \n\nAlso known as County or State.\n\nRequired in Australia (AU) only for an order to be fulfilled.\n",
                        "type": "string",
                        "nullable": true,
                        "minLength": 1,
                        "maxLength": 50
                      },
                      "postalCode": {
                        "description": "Postal code of this address.",
                        "type": "string",
                        "nullable": true,
                        "minLength": 1,
                        "maxLength": 50
                      }
                    }
                  },
                  "geolocation": {
                    "description": "The coordinates of a geographical location where the customer wants to receive the order.\n\nRequired in Australia (AU) and New Zealand (NZ) only for an order to be fulfilled.\n",
                    "type": "object",
                    "nullable": true,
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "properties": {
                      "latitude": {
                        "description": "The latitude of the geographical location.",
                        "type": "number",
                        "format": "decimal",
                        "nullable": false
                      },
                      "longitude": {
                        "description": "The longitude of the geographical location.",
                        "type": "number",
                        "format": "decimal",
                        "nullable": false
                      }
                    }
                  }
                }
              }
            }
          },
          "notes": {
            "description": "Instructions about the order that the customer wants to submit.",
            "type": "array",
            "nullable": true,
            "minItems": 0,
            "maxItems": 1,
            "items": {
              "description": "Instructions about the order that the customer wants to submit.",
              "type": "object",
              "nullable": false,
              "required": [
                "type",
                "note"
              ],
              "properties": {
                "type": {
                  "description": "The type of note.",
                  "type": "string",
                  "enum": [
                    "delivery"
                  ],
                  "nullable": false
                },
                "note": {
                  "description": "The contents of the note.",
                  "type": "string",
                  "minLength": 0,
                  "maxLength": 250,
                  "nullable": false
                }
              }
            }
          }
        }
      },
      "CheckoutUpdateResponse": {
        "type": "object",
        "properties": {
          "isFulfillable": {
            "description": "Whether the proposed order can be placed.",
            "type": "boolean",
            "nullable": false
          },
          "issues": {
            "description": "One or more issues associated the proposed order, that may impact whether it can be placed.",
            "type": "array",
            "nullable": false,
            "minItems": 0,
            "maxItems": 18,
            "items": {
              "description": "Represents a single issue associated with the proposed order.",
              "$ref": "#/components/schemas/CheckoutIssue",
              "nullable": false
            }
          }
        },
        "required": [
          "isFulfillable",
          "issues"
        ]
      },
      "AvailableFulfilmentTimes409Error": {
        "type": "object",
        "description": "An HTTP 409 error response",
        "properties": {
          "fault": {
            "type": "object",
            "description": "A list of values that helps identify this response back to logs, so we can easily find faults.",
            "required": [
              "faultId",
              "traceId",
              "errors"
            ],
            "nullable": true,
            "additionalProperties": false,
            "properties": {
              "faultId": {
                "type": "string",
                "description": "A value that helps identify this response back to logs, so we can easily find this specific fault.",
                "nullable": false
              },
              "traceId": {
                "type": "string",
                "description": "A value that helps identify the trace back to logs, so that we can easily find what was happening on our system when the fault was generated.",
                "nullable": false
              },
              "errors": {
                "type": "array",
                "description": "List of errors that may assist you in resolving the issues.",
                "nullable": false,
                "items": {
                  "type": "object",
                  "description": "Details about the error that may assist you in resolving the issue.",
                  "required": [
                    "description",
                    "errorCode"
                  ],
                  "nullable": false,
                  "additionalProperties": false,
                  "properties": {
                    "description": {
                      "type": "string",
                      "description": "Specific details about the error that may assist you in resolving the issue.",
                      "nullable": false
                    },
                    "errorCode": {
                      "type": "string",
                      "enum": [
                        "FULFILMENT_TIME_BANDS_INVALID",
                        "FULFILMENT_TIME_BANDS_NOT_FOUND"
                      ],
                      "description": "A code that identifies the problem type. It will be supported by human-readable documentation that identifies how to resolve the error.",
                      "nullable": false
                    }
                  }
                }
              }
            }
          }
        }
      },
      "Checkout404Error": {
        "type": "object",
        "description": "An HTTP 404 error response",
        "properties": {
          "fault": {
            "type": "object",
            "description": "A list of values that helps identify this response back to logs, so we can easily find faults.",
            "required": [
              "faultId",
              "traceId",
              "errors"
            ],
            "nullable": true,
            "additionalProperties": false,
            "properties": {
              "faultId": {
                "type": "string",
                "description": "A value that helps identify this response back to logs, so we can easily find this specific fault.",
                "nullable": false
              },
              "traceId": {
                "type": "string",
                "description": "A value that helps identify the trace back to logs, so that we can easily find what was happening on our system when the fault was generated.",
                "nullable": false
              },
              "errors": {
                "type": "array",
                "description": "List of errors that may assist you in resolving the issues.",
                "nullable": false,
                "items": {
                  "type": "object",
                  "description": "Details about the error that may assist you in resolving the issue.",
                  "required": [
                    "description",
                    "errorCode"
                  ],
                  "nullable": false,
                  "additionalProperties": false,
                  "properties": {
                    "description": {
                      "type": "string",
                      "description": "Specific details about the error that may assist you in resolving the issue.",
                      "nullable": false
                    },
                    "errorCode": {
                      "type": "string",
                      "enum": [
                        "TENANT_NOT_SUPPORTED",
                        "CHECKOUT_NOT_FOUND"
                      ],
                      "description": "A code that identifies the problem type. It will be supported by human-readable documentation that identifies how to resolve the error.",
                      "nullable": false
                    }
                  }
                }
              }
            }
          }
        }
      },
      "Checkout409Error": {
        "type": "object",
        "description": "An HTTP 409 error response",
        "properties": {
          "fault": {
            "type": "object",
            "description": "A list of values that helps identify this response back to logs, so we can easily find faults .",
            "required": [
              "faultId",
              "traceId",
              "errors"
            ],
            "nullable": true,
            "additionalProperties": false,
            "properties": {
              "faultId": {
                "type": "string",
                "description": "A value that helps identify this response back to logs, so we can easily find this specific fault.",
                "nullable": false
              },
              "traceId": {
                "type": "string",
                "description": "A value that helps identify the trace back to logs, so that we can easily find what was happening on our system when the fault was generated.",
                "nullable": false
              },
              "errors": {
                "type": "array",
                "description": "List of errors that may assist you in resolving the issues.",
                "nullable": false,
                "items": {
                  "type": "object",
                  "description": "Details about the error that may assist you in resolving the issue.",
                  "required": [
                    "description",
                    "errorCode"
                  ],
                  "nullable": false,
                  "additionalProperties": false,
                  "properties": {
                    "description": {
                      "type": "string",
                      "description": "Specific details about the error that may assist you in resolving the issue.",
                      "nullable": false
                    },
                    "errorCode": {
                      "type": "string",
                      "enum": [
                        "CHECKOUT_INVALID"
                      ],
                      "description": "A code that identifies the problem type. It will be supported by human-readable documentation that identifies how to resolve the error.",
                      "nullable": false
                    }
                  }
                }
              }
            }
          }
        }
      },
      "CheckoutDefaultError": {
        "type": "object",
        "description": "A default HTTP error response",
        "properties": {
          "fault": {
            "type": "object",
            "description": "A list of values that helps identify this response back to logs, so we can easily find faults.",
            "required": [
              "faultId",
              "traceId",
              "errors"
            ],
            "nullable": true,
            "additionalProperties": false,
            "properties": {
              "faultId": {
                "type": "string",
                "description": "A value that helps identify this response back to logs, so we can easily find this specific fault.",
                "nullable": false
              },
              "traceId": {
                "type": "string",
                "description": "A value that helps identify the trace back to logs, so that we can easily find what was happening on our system when the fault was generated.",
                "nullable": false
              },
              "errors": {
                "type": "array",
                "description": "List of errors that may assist you in resolving the issues.",
                "nullable": false,
                "items": {
                  "type": "object",
                  "required": [
                    "description"
                  ],
                  "nullable": false,
                  "additionalProperties": false,
                  "properties": {
                    "description": {
                      "type": "string",
                      "description": "Specific details about the error that may assist you in resolving the issue.",
                      "nullable": false
                    }
                  }
                }
              }
            }
          }
        }
      },
      "CheckoutGet400Error": {
        "type": "object",
        "description": "An HTTP 400 error response",
        "properties": {
          "fault": {
            "type": "object",
            "description": "A list of values that helps identify this response back to logs, so we can easily find faults.",
            "required": [
              "faultId",
              "traceId",
              "errors"
            ],
            "nullable": true,
            "additionalProperties": false,
            "properties": {
              "faultId": {
                "type": "string",
                "description": "A value that helps identify this response back to logs, so we can easily find this specific fault.",
                "nullable": false
              },
              "traceId": {
                "type": "string",
                "description": "A value that helps identify the trace back to logs, so that we can easily find what was happening on our system when the fault was generated.",
                "nullable": false
              },
              "errors": {
                "type": "array",
                "description": "List of errors that may assist you in resolving the issues.",
                "nullable": false,
                "items": {
                  "type": "object",
                  "description": "Details about the error that may assist you in resolving the issue.",
                  "required": [
                    "description",
                    "errorCode"
                  ],
                  "nullable": false,
                  "additionalProperties": false,
                  "properties": {
                    "description": {
                      "type": "string",
                      "description": "Specific details about the error that may assist you in resolving the issue.",
                      "nullable": false
                    },
                    "errorCode": {
                      "type": "string",
                      "enum": [
                        "TENANT_INVALID",
                        "CHECKOUT_ID_INVALID"
                      ],
                      "description": "A code that identifies the problem type. It will be supported by human-readable documentation that identifies how to resolve the error.",
                      "nullable": false
                    }
                  }
                }
              }
            }
          }
        }
      },
      "CheckoutUpdate400Error": {
        "type": "object",
        "description": "An HTTP 400 error response",
        "properties": {
          "fault": {
            "type": "object",
            "description": "A list of values that helps identify this response back to logs, so we can easily find faults.",
            "required": [
              "faultId",
              "traceId",
              "errors"
            ],
            "nullable": true,
            "additionalProperties": false,
            "properties": {
              "faultId": {
                "type": "string",
                "description": "A value that helps identify this response back to logs, so we can easily find this specific fault.",
                "nullable": false
              },
              "traceId": {
                "type": "string",
                "description": "A value that helps identify the trace back to logs, so that we can easily find what was happening on our system when the fault was generated.",
                "nullable": false
              },
              "errors": {
                "type": "array",
                "description": "List of errors that may assist you in resolving the issues.",
                "nullable": false,
                "items": {
                  "type": "object",
                  "description": "Details about the error that may assist you in resolving the issue.",
                  "required": [
                    "description",
                    "errorCode"
                  ],
                  "nullable": false,
                  "additionalProperties": false,
                  "properties": {
                    "description": {
                      "type": "string",
                      "description": "Specific details about the error that may assist you in resolving the issue.",
                      "nullable": false
                    },
                    "errorCode": {
                      "type": "string",
                      "enum": [
                        "TENANT_INVALID",
                        "CHECKOUT_ID_INVALID",
                        "INVALID_REQUEST",
                        "FIRST_NAME_INVALID",
                        "LAST_NAME_INVALID",
                        "PHONE_NUMBER_INVALID",
                        "DATE_OF_BIRTH_INVALID",
                        "FULFILMENT_TIME_INVALID",
                        "ADDRESS_LINES_INVALID",
                        "LOCALITY_INVALID",
                        "ADMINISTRATIVE_AREA_INVALID",
                        "POSTAL_CODE_INVALID",
                        "GEOLOCATION_INVALID",
                        "DELIVERY_NOTE_INVALID"
                      ],
                      "description": "A code that identifies the problem type. It will be supported by human-readable documentation that identifies how to resolve the error.",
                      "nullable": false
                    }
                  }
                }
              }
            }
          }
        }
      },
      "GetAvailableFulfilmentTimesResponse": {
        "type": "object",
        "properties": {
          "times": {
            "description": "Collection of time bands for when an order can be fulfilled.",
            "type": "array",
            "nullable": false,
            "minItems": 0,
            "maxItems": 576,
            "items": {
              "type": "object",
              "description": "A time band for when an order can be fulfilled.",
              "nullable": false,
              "required": [
                "from",
                "to"
              ],
              "properties": {
                "from": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Start time represented in ISO 8601 UTC (Zulu Time).",
                  "nullable": false
                },
                "to": {
                  "type": "string",
                  "format": "date-time",
                  "description": "End time represented in ISO 8601 UTC (Zulu Time).\n\nThis time can be equal to the from time.\n",
                  "nullable": false
                }
              }
            }
          },
          "asapAvailable": {
            "type": "boolean",
            "description": "If the option to fulfil an order as soon as possible is available.",
            "nullable": false
          }
        },
        "required": [
          "times",
          "asapAvailable"
        ]
      },
      "CheckoutIssue_AdditionalItemsRequired": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CheckoutIssue"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ],
        "properties": {
          "code": {
            "description": "The collection of items are not orderable in their current state. Items need to be added."
          }
        }
      },
      "CheckoutIssue_AddressLinesRequired": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CheckoutIssue"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ],
        "properties": {
          "code": {
            "description": "Indicates that the fulfilment address lines is required to fulfil an order."
          }
        }
      },
      "CheckoutIssue_AdministrativeAreaRequired": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CheckoutIssue"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ],
        "properties": {
          "code": {
            "description": "Indicates that the fulfilment address administrative area is required to fulfil an order.\n\nOccurs in Australia (AU) only.\n"
          }
        }
      },
      "CheckoutIssue_AgeVerificationFailed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CheckoutIssue"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ],
        "properties": {
          "code": {
            "description": "The order cannot proceed because the customer has failed the required age verification check.\n\nOccurs in Australia (AU) and New Zealand (NZ) only.\n"
          }
        }
      },
      "CheckoutIssue_DateOfBirthRequired": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CheckoutIssue"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ],
        "properties": {
          "code": {
            "description": "Indicates that the customer's date of birth is required to fulfil an order.\n\nOccurs in Australia (AU) and New Zealand (NZ) only.\n"
          }
        }
      },
      "CheckoutIssue_FirstNameRequired": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CheckoutIssue"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ],
        "properties": {
          "code": {
            "description": "Indicates that the customer's first name is required to fulfil an order."
          }
        }
      },
      "CheckoutIssue_FulfilmentTimeRequired": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CheckoutIssue"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ],
        "properties": {
          "code": {
            "description": "Indicates that a fulfilment time is required to fulfil an order."
          }
        }
      },
      "CheckoutIssue_FulfilmentTimeUnavailable": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CheckoutIssue"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ],
        "properties": {
          "code": {
            "description": "The selected fulfilment time is no longer available. A new fulfilment time may be available for selection."
          }
        }
      },
      "CheckoutIssue_GeolocationRequired": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CheckoutIssue"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ],
        "properties": {
          "code": {
            "description": "Indicates that the fulfilment geolocation is required to fulfil an order.\n\nOccurs in Australia (AU) and New Zealand (NZ) only.\n"
          }
        }
      },
      "CheckoutIssue_ItemsUnorderable": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CheckoutIssue"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ],
        "properties": {
          "code": {
            "description": "The collection of items are not orderable."
          }
        }
      },
      "CheckoutIssue_LocalityRequired": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CheckoutIssue"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ],
        "properties": {
          "code": {
            "description": "Indicates that the fulfilment address locality is required to fulfil an order."
          }
        }
      },
      "CheckoutIssue_LocationUndeliverable": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CheckoutIssue"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ],
        "properties": {
          "code": {
            "description": "The restaurant is unable to deliver to this location."
          }
        }
      },
      "CheckoutIssue_MinimumOrderValueNotMet": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CheckoutIssue"
          },
          {
            "type": "object",
            "required": [
              "currency",
              "minimumOrderValue",
              "additionalSpendRequired"
            ],
            "additionalProperties": false,
            "properties": {
              "currency": {
                "description": "The currency in which the value amounts are returned represented in ISO 4217 format.",
                "type": "string",
                "nullable": false
              },
              "minimumOrderValue": {
                "description": "The minimum order value required to complete an order. This is in the smallest unit of local currency e.g. pence.",
                "type": "number",
                "format": "integer",
                "nullable": false
              },
              "additionalSpendRequired": {
                "description": "The amount the customer needs to spend to meet minimum order value. This is in the smallest unit of local currency e.g. pence.",
                "type": "number",
                "format": "integer",
                "nullable": false
              }
            }
          }
        ],
        "properties": {
          "code": {
            "description": "The checkout does not meet the minimum order value."
          }
        }
      },
      "CheckoutIssue_PhoneNumberRequired": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CheckoutIssue"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ],
        "properties": {
          "code": {
            "description": "Indicates that the customer's phone number is required to fulfil an order."
          }
        }
      },
      "CheckoutIssue_PostalCodeRequired": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CheckoutIssue"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ],
        "properties": {
          "code": {
            "description": "Indicates that the fulfilment postal code is required to fulfil an order."
          }
        }
      },
      "CheckoutIssue_RestaurantNotTakingOrders": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CheckoutIssue"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ],
        "properties": {
          "code": {
            "description": "The restaurant being ordered from is no longer taking orders. Either the restaurant is not offline or is no longer available on the platform."
          }
        }
      },
      "CheckoutIssue_ServiceTypeUnavailable": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CheckoutIssue"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ],
        "properties": {
          "code": {
            "description": "The selected service type is not available. The restaurant may still be available to order from with a different service type."
          }
        }
      },
      "ChannelSubscriptions": {
        "type": "object",
        "properties": {
          "subscribedChannels": {
            "type": "array",
            "description": "The list of channels that the consumer should only be subscribed to.",
            "items": {
              "$ref": "#/components/schemas/CommunicationChannels"
            }
          }
        }
      },
      "ChannelSubscriptionsWithDerivedField": {
        "type": "object",
        "properties": {
          "isDefault": {
            "type": "boolean",
            "description": "Are these channel subscriptions the default or have they been set elsewhere. This is a read-only derived field."
          },
          "subscribedChannels": {
            "type": "array",
            "description": "The list of channels that are subscribed",
            "items": {
              "$ref": "#/components/schemas/CommunicationChannels"
            }
          }
        }
      },
      "CommunicationChannels": {
        "type": "string",
        "enum": [
          "email",
          "sms",
          "push"
        ]
      },
      "CommunicationPreferences": {
        "type": "object",
        "properties": {
          "marketing": {
            "type": "object",
            "description": "The marketing communication preferences.",
            "$ref": "#/components/schemas/ChannelSubscriptionsWithDerivedField"
          }
        }
      },
      "CommunicationTypes": {
        "type": "string",
        "enum": [
          "marketing"
        ]
      },
      "BadItemIssueSelectionStep": {
        "description": "Flow step used for selecting the issue (e.g. missing / cold) when complaining about order items",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FlowStepBase"
          },
          {
            "type": "object",
            "properties": {
              "header": {
                "type": "string",
                "description": "Display header"
              },
              "body": {
                "type": "array",
                "description": "Array of paragraphs for body text",
                "items": {
                  "type": "string"
                }
              },
              "actions": {
                "type": "array",
                "description": "Array of actions (i.e. buttons)",
                "items": {
                  "$ref": "#/components/schemas/HelpAction"
                }
              },
              "issueOptionActions": {
                "type": "array",
                "description": "Array of actions that select the issue",
                "items": {
                  "description": "Array of items to choose",
                  "$ref": "#/components/schemas/HelpAction"
                }
              },
              "foodSafetyAction": {
                "description": "Action that opens Food Safety info",
                "$ref": "#/components/schemas/HelpAction"
              },
              "leaveReviewAction": {
                "description": "Action to leave a review",
                "$ref": "#/components/schemas/HelpAction"
              }
            }
          }
        ]
      },
      "CustomisationResponse": {
        "description": "Information about initial options to show to user",
        "type": "object",
        "properties": {
          "helpSessionId": {
            "type": "string",
            "description": "Unique id for this help session"
          },
          "config": {
            "type": "object",
            "properties": {
              "personalisedHelpEnabled": {
                "type": "boolean",
                "description": "Should we show Personalised Help"
              },
              "liveChatEnabled": {
                "type": "boolean",
                "description": "Should we enable Live Chat"
              }
            }
          },
          "personalisation": {
            "type": "object",
            "properties": {
              "callRestaurantAction": {
                "$ref": "#/components/schemas/HelpAction"
              },
              "orderActions": {
                "description": "Actions pertaining to the order",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HelpAction"
                }
              },
              "topLevelActions": {
                "description": "Top-level actions not necessarily pertaining to the order",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HelpAction"
                }
              },
              "dataLayer": {
                "description": "Key/values to be passed to analytics",
                "type": "object",
                "additionalProperties": true
              }
            }
          },
          "experimentEvents": {
            "type": "array",
            "description": "list of experiments running for this client",
            "items": {
              "$ref": "#/components/schemas/ExperimentEvent"
            }
          }
        },
        "example": {
          "helpSessionId": "helpsessionid",
          "config": {
            "personalisedHelpEnabled": true,
            "liveChatEnabled": true
          },
          "personalisation": {
            "callRestaurantAction": {
              "title": "Call the restaurant",
              "postText": [],
              "preText": [],
              "buttonType": "Primary",
              "department": "LiveChat",
              "notes": "note",
              "id": "CallRestaurant",
              "type": "Call",
              "action": "01234567890",
              "buttonEvent": {
                "category": "engagement",
                "action": "click_call_restaurant",
                "label": "call restaurant",
                "value": 0
              },
              "data": {}
            },
            "orderActions": [
              {
                "title": "I want to cancel my order",
                "postText": [],
                "preText": [],
                "buttonType": "Secondary",
                "department": "LiveChat",
                "notes": "note",
                "id": "Cancel",
                "type": "ChapiGet",
                "action": "/applications/consumerhelp/flows/cancellation/uk/orderid/start",
                "buttonEvent": {
                  "category": "engagement",
                  "action": "click_cancel_order",
                  "label": "helpflow",
                  "value": 0
                },
                "data": {}
              },
              {
                "title": "I'm unhappy with my order",
                "postText": [],
                "preText": [],
                "buttonType": "Secondary",
                "department": "LiveChat",
                "notes": "note",
                "id": "BadItem",
                "type": "ChapiGet",
                "action": "/applications/consumerhelp/flows/baditems/uk/orderid/start",
                "buttonEvent": {
                  "category": "engagement",
                  "action": "click_bad_item",
                  "label": "helpflow",
                  "value": 0
                },
                "data": {}
              }
            ]
          },
          "dataLayer": {
            "helpData_helpSessionId": "helpsessionid",
            "helpData_isPilot": 32,
            "helpData_features": "o:cancel_order|o:bad_item|o:call_restaurant|t:open_chatbot|t:email_justeat|t:call_justeat",
            "transactionData_orderStatus": "Accepted",
            "transactionData_newTransactionId": "orderid",
            "transactionData_nTotalItems": 0,
            "transactionData_dateDiff": -1800,
            "transactionData_orderDelay": null,
            "trData_trId": null,
            "trData_menuType": "collection"
          },
          "topLevelActions": [
            {
              "title": "Chat to us",
              "postText": [],
              "preText": [],
              "buttonType": "Primary",
              "department": "LiveChat",
              "notes": "note",
              "id": "StartChatBot",
              "type": "Chatbot",
              "action": null,
              "buttonEvent": {
                "category": "engagement",
                "action": "click_open_chatbot",
                "label": "open chatbot",
                "value": 0
              },
              "data": {}
            },
            {
              "title": "Email our happy helpers",
              "postText": [],
              "preText": [],
              "buttonType": "Secondary",
              "department": "LiveChat",
              "notes": "note",
              "id": "EmailJustEat",
              "type": "Email",
              "action": "info@just-eat.co.uk",
              "buttonEvent": {
                "category": "engagement",
                "action": "click_email_justeat",
                "label": "email justeat",
                "value": 0
              },
              "data": {}
            },
            {
              "title": "Phone a human",
              "postText": [],
              "preText": [],
              "buttonType": "Secondary",
              "department": "LiveChat",
              "notes": "note",
              "id": "PhoneJustEat",
              "type": "Call",
              "action": "0344 243 7777",
              "buttonEvent": {
                "category": "engagement",
                "action": "click_call_justeat",
                "label": "call justeat",
                "value": 0
              },
              "data": {}
            }
          ],
          "experimentEvents": [
            {
              "id": "EX-1742",
              "name": "bandit_exp_new_carousels_2",
              "parentId": "1234567890",
              "platform": "optimizely_fullstack",
              "version": "1",
              "variantName": "variant_d"
            }
          ]
        }
      },
      "CustomisationResponseWeb": {
        "description": "Information about initial options to show to user",
        "type": "object",
        "properties": {
          "helpSessionId": {
            "type": "string",
            "description": "Unique id for this help session"
          },
          "config": {
            "type": "object",
            "description": "General config / feature toggles",
            "properties": {
              "personalisedHelpEnabled": {
                "type": "boolean",
                "description": "Should we show Personalised Help"
              },
              "liveChatEnabled": {
                "type": "boolean",
                "description": "Should we enable Live Chat"
              }
            }
          },
          "personalisation": {
            "type": "object",
            "description": "The actions that are relevant to this customer / order",
            "properties": {
              "callRestaurantAction": {
                "description": "Action to call the restaurant, if possible at this time",
                "$ref": "#/components/schemas/HelpAction"
              },
              "orderActions": {
                "description": "Actions pertaining to the order",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HelpAction"
                }
              },
              "topLevelActions": {
                "description": "Top-level actions not necessarily pertaining to the order",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HelpAction"
                }
              },
              "dataLayer": {
                "description": "Key/values to be passed to analytics",
                "type": "object",
                "additionalProperties": true
              }
            }
          },
          "order": {
            "type": "object",
            "description": "The customer's most recent or specified order",
            "properties": {
              "id": {
                "type": "string",
                "description": "Alphanumeric order id"
              },
              "friendlyReference": {
                "type": "string",
                "description": "Friendly order id.  Usually numeric"
              },
              "status": {
                "type": "object",
                "description": "Information related to the status of the order",
                "properties": {
                  "value": {
                    "type": "string",
                    "description": "The consumer status of the order"
                  },
                  "statusText": {
                    "type": "string",
                    "description": "Friendly text to display to the customer"
                  },
                  "preamble": {
                    "type": "string",
                    "description": "Friendly 'preamble' text to display to the customer"
                  },
                  "dateText": {
                    "type": "string",
                    "description": "The date / time to display to the customer"
                  },
                  "isActive": {
                    "type": "boolean",
                    "description": "Is this an active order?"
                  },
                  "isFinishedWithPositiveOutcome": {
                    "type": "boolean",
                    "description": "Is this order in a final, happy, state?"
                  },
                  "isFinishedWithNegativeOutcome": {
                    "type": "boolean",
                    "description": "Is this order in a final, unhappy (e.g. Cancelled) state?"
                  },
                  "preAcceptance": {
                    "type": "boolean",
                    "description": "Is this order still awaiting acceptance from a restaurant?"
                  },
                  "isForDelivery": {
                    "type": "boolean",
                    "description": "Is this a delivery order (as opposed to collection)?"
                  }
                }
              }
            }
          },
          "restaurant": {
            "type": "object",
            "description": "The restaurant of the most recent or specified order",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the restaurant"
              },
              "thumbnail": {
                "type": "string",
                "description": "URI for the restaurant's thumbnail image"
              },
              "telephone": {
                "type": "string",
                "description": "Restaurant's telephone number"
              }
            }
          },
          "user": {
            "type": "object",
            "description": "The current user",
            "properties": {
              "name": {
                "type": "string",
                "description": "The user's name"
              },
              "isLoggedIn": {
                "type": "boolean",
                "description": "Is the user currently logged in?"
              }
            }
          }
        },
        "example": {
          "helpSessionId": "helpsessionid",
          "config": {
            "personalisedHelpEnabled": true,
            "liveChatEnabled": true
          },
          "personalisation": {
            "callRestaurantAction": {
              "title": "Call the restaurant",
              "postText": [],
              "preText": [],
              "buttonType": "Primary",
              "department": "LiveChat",
              "notes": "note",
              "id": "CallRestaurant",
              "type": "Call",
              "action": "01234567890",
              "buttonEvent": {
                "category": "engagement",
                "action": "click_call_restaurant",
                "label": "call restaurant",
                "value": 0
              },
              "data": {}
            },
            "orderActions": [
              {
                "title": "I want to cancel my order",
                "postText": [],
                "preText": [],
                "buttonType": "Secondary",
                "department": "LiveChat",
                "notes": "note",
                "id": "Cancel",
                "type": "ChapiGet",
                "action": "/applications/consumerhelp/flows/cancellation/uk/orderid/start",
                "buttonEvent": {
                  "category": "engagement",
                  "action": "click_cancel_order",
                  "label": "helpflow",
                  "value": 0
                },
                "data": {}
              },
              {
                "title": "I'm unhappy with my order",
                "postText": [],
                "preText": [],
                "buttonType": "Secondary",
                "department": "LiveChat",
                "notes": "note",
                "id": "BadItem",
                "type": "ChapiGet",
                "action": "/applications/consumerhelp/flows/baditems/uk/orderid/start",
                "buttonEvent": {
                  "category": "engagement",
                  "action": "click_bad_item",
                  "label": "helpflow",
                  "value": 0
                },
                "data": {}
              }
            ]
          },
          "dataLayer": {
            "helpData_helpSessionId": "helpsessionid",
            "helpData_isPilot": 32,
            "helpData_features": "o:cancel_order|o:bad_item|o:call_restaurant|t:open_chatbot|t:email_justeat|t:call_justeat",
            "transactionData_orderStatus": "Accepted",
            "transactionData_newTransactionId": "orderid",
            "transactionData_nTotalItems": 0,
            "transactionData_dateDiff": -1800,
            "transactionData_orderDelay": null,
            "trData_trId": null,
            "trData_menuType": "collection"
          },
          "topLevelActions": [
            {
              "title": "Chat to us",
              "postText": [],
              "preText": [],
              "buttonType": "Primary",
              "department": "LiveChat",
              "notes": "note",
              "id": "StartChatBot",
              "type": "Chatbot",
              "action": null,
              "buttonEvent": {
                "category": "engagement",
                "action": "click_open_chatbot",
                "label": null,
                "value": null
              },
              "data": null
            },
            {
              "title": "Email our happy helpers",
              "postText": [],
              "preText": [],
              "buttonType": "Secondary",
              "department": "LiveChat",
              "notes": "note",
              "id": "EmailJustEat",
              "type": "Email",
              "action": "info@just-eat.co.uk",
              "buttonEvent": {
                "category": "engagement",
                "action": "click_email_justeat",
                "label": null,
                "value": null
              },
              "data": null
            },
            {
              "title": "Phone a human",
              "postText": [],
              "preText": [],
              "buttonType": "Secondary",
              "department": "LiveChat",
              "notes": "note",
              "id": "PhoneJustEat",
              "type": "Call",
              "action": "0344 243 7777",
              "buttonEvent": {
                "category": "engagement",
                "action": "click_call_justeat",
                "label": null,
                "value": null
              },
              "data": null
            }
          ],
          "order": {
            "id": "alphanumericid",
            "friendlyReference": "1234567890",
            "status": {
              "value": "Accepted",
              "statusText": "The restaurant has confirmed the delivery time. The countdown to your first bite has begun...",
              "preamble": "Delivering around",
              "dateText": "11:48",
              "isActive": true,
              "isFinishedWithPositiveOutcome": false,
              "isFinishedWithNegativeOutcome": false,
              "preAcceptance": false,
              "isForDelivery": true
            }
          },
          "restaurant": {
            "name": "Bob's kebabs",
            "thumbnail": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTRnTQ8sfP8yxicqMBoAymdKzrpjhtwSeCIXdpqhZ7Hrj8FLBfB",
            "telephone": "+44 1234 123123"
          },
          "user": {
            "name": "John",
            "isLoggedIn": true
          }
        }
      },
      "ExperimentEvent": {
        "description": "Represents a possible experiment event on personalised help attached to customisation or to a Help Action. This will be sent from the client as an ExperimentV2 Google Analytics event",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique but meaningful id for the experiment"
          },
          "name": {
            "type": "string",
            "description": "A name that describes the experiment"
          },
          "parentId": {
            "type": "string",
            "description": "The parent experiment id of the current experiment"
          },
          "platform": {
            "type": "string",
            "description": "The platform where the experiment comes from"
          },
          "version": {
            "description": "The version of the running experiment",
            "type": "string"
          },
          "variantName": {
            "description": "The name of the variant the user is bucketed into",
            "type": "string"
          }
        }
      },
      "FlowResponse": {
        "type": "object",
        "properties": {
          "stepResponse": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "TextAndActions",
                  "ItemSelection",
                  "BadItemIssueSelection",
                  "RequestCsat",
                  "LateOrderUpdateReceived"
                ]
              },
              "data": {
                "$ref": "#/components/schemas/FlowStep"
              }
            }
          },
          "modals": {
            "type": "object",
            "description": "Dictionary of strings to `FlowStepResponses`",
            "additionalProperties": {
              "$ref": "#/components/schemas/FlowStep"
            }
          }
        },
        "example": {
          "stepResponse": {
            "type": "TextAndActions",
            "data": {
              "header": "Are you sure you want to cancel this order?",
              "body": [
                "You will need to pay for 50% of your order. This charge will come to £5.50.",
                "We are unable to offer a full refund because the restaurant has already started preparing your food."
              ],
              "actions": [
                {
                  "title": "Cancel order - pay £5.50",
                  "postText": [],
                  "preText": [],
                  "buttonType": "Primary",
                  "department": "LiveChat",
                  "notes": null,
                  "id": "ConfirmCancel",
                  "type": "ChapiPost",
                  "action": "/uk/flows/cancellation/1234/confirm?reasonCode=cust_cancelled_changed_mind&flowId=XXX",
                  "buttonEvent": {
                    "category": "engagement",
                    "action": "form_cancel_order",
                    "label": "confirm_charged",
                    "value": 550
                  },
                  "data": null
                },
                {
                  "title": "Keep my order",
                  "postText": [],
                  "preText": [],
                  "buttonType": "Secondary",
                  "department": "LiveChat",
                  "notes": null,
                  "id": "EndFlow",
                  "type": "EndFlow",
                  "action": null,
                  "buttonEvent": {
                    "category": "engagement",
                    "action": "form_cancel_order",
                    "label": "close",
                    "value": 0
                  },
                  "data": {}
                }
              ],
              "iconType": null,
              "title": "Cancel order"
            },
            "closeButton": {
              "title": "Close",
              "postText": [],
              "preText": [],
              "buttonType": "CloseButton",
              "department": "LiveChat",
              "notes": "note",
              "id": "EndFlow",
              "type": "EndFlow",
              "action": "/uk/flows/close",
              "buttonEvent": {
                "category": "engagement",
                "action": "form_cancel_order",
                "label": "close",
                "value": 0
              },
              "data": {},
              "event": {
                "dataLayer": {
                  "screenName": "/cancel-order/self-cancel-charged",
                  "transactionData_dateDiff": -3600,
                  "transactionData_delay": -1800
                }
              }
            }
          },
          "modals": {}
        }
      },
      "FlowStep": {
        "description": "The possible steps that can be returned as part of flows",
        "oneOf": [
          {
            "$ref": "#/components/schemas/TextAndActionsStep"
          },
          {
            "$ref": "#/components/schemas/ItemSelectionStep"
          },
          {
            "$ref": "#/components/schemas/BadItemIssueSelectionStep"
          },
          {
            "$ref": "#/components/schemas/RequestCsatStep"
          },
          {
            "$ref": "#/components/schemas/LateOrderUpdateReceivedStep"
          }
        ]
      },
      "FlowStepBase": {
        "description": "Abstract base schema for flow steps.",
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "closeButton": {
            "$ref": "#/components/schemas/HelpAction"
          },
          "screenEvent": {
            "type": "object",
            "properties": {
              "dataLayer": {
                "type": "object",
                "properties": {
                  "screenName": {
                    "type": "string"
                  }
                },
                "additionalProperties": true
              }
            }
          },
          "experimentEvents": {
            "type": "array",
            "description": "list of experiments running for this client",
            "items": {
              "$ref": "#/components/schemas/ExperimentEvent"
            }
          }
        }
      },
      "HelpAction": {
        "description": "Represents a possible action (i.e. button) on personalised help home page or as part of a flow",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique but meaningful id for the action"
          },
          "type": {
            "type": "string",
            "description": "The type of action a button tap invokes",
            "enum": [
              "LogIn",
              "Call",
              "Chatbot",
              "LiveChat",
              "ChapiGet",
              "ChapiPost",
              "Link",
              "HelpArticleLink",
              "EndFlow",
              "Email",
              "Deferred",
              "OpenModal",
              "CloseModal",
              "NoAction"
            ]
          },
          "action": {
            "type": "string",
            "description": "The specific action a button tap invokes.  Content depends on type."
          },
          "title": {
            "type": "string",
            "description": "Caption for the button"
          },
          "preText": {
            "description": "Paragraphs to display before button",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "postText": {
            "description": "Paragraphs to display after button",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "buttonType": {
            "description": "Display type of button",
            "type": "string",
            "enum": [
              "Primary",
              "Secondary",
              "TextOnly",
              "CloseButton",
              "Option",
              "OptionExtra",
              "FoodSafety"
            ]
          },
          "buttonEvent": {
            "description": "The analytics event to send on tap",
            "type": "object",
            "properties": {
              "category": {
                "type": "string",
                "description": "Google Analytics category"
              },
              "action": {
                "type": "string",
                "description": "Google Analytics action"
              },
              "label": {
                "type": "string",
                "description": "Google Analytics label (if any)"
              },
              "value": {
                "type": "number",
                "description": "Google Analytics value (if any)"
              }
            }
          },
          "data": {
            "description": "Data to post back (for use with type: ChapiPost).",
            "type": "object",
            "additionalProperties": true
          },
          "department": {
            "description": "LiveChat department (for use with type: LiveChat)",
            "type": "string"
          },
          "notes": {
            "description": "Notes to pass to LiveChat (for use with type: LiveChat)",
            "type": "string"
          }
        }
      },
      "ItemSelectionStep": {
        "description": "Flow step used for selecting problematic items",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FlowStepBase"
          },
          {
            "type": "object",
            "properties": {
              "header": {
                "type": "string",
                "description": "Display header"
              },
              "body": {
                "type": "array",
                "description": "Array of paragraphs for body text",
                "items": {
                  "type": "string"
                }
              },
              "actions": {
                "type": "array",
                "description": "Array of actions (i.e. buttons)",
                "items": {
                  "$ref": "#/components/schemas/HelpAction"
                }
              },
              "items": {
                "type": "array",
                "description": "Array of items in order to choose from",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "Unique id of item",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of item",
                      "type": "string"
                    },
                    "price": {
                      "description": "Formatted price of item",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "LateOrderUpdateReceivedStep": {
        "description": "Flow step used to display the restaurant's response to a customer's Late Order update request",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FlowStepBase"
          },
          {
            "type": "object",
            "properties": {
              "header": {
                "type": "string",
                "description": "Display header"
              },
              "newDueDate": {
                "type": "string",
                "format": "date-time",
                "description": "New expected due date"
              },
              "messageHeader": {
                "type": "string",
                "description": "Header for the message from restaurant"
              },
              "message": {
                "type": "string",
                "description": "Message from restaurant"
              },
              "actions": {
                "type": "array",
                "description": "Array of actions (i.e. buttons)",
                "items": {
                  "$ref": "#/components/schemas/HelpAction"
                }
              }
            }
          }
        ]
      },
      "RequestCsatStep": {
        "description": "Flow step used for asking if customer was satisfied with flow",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FlowStepBase"
          },
          {
            "type": "object",
            "properties": {
              "quitFlowAction": {
                "description": "Action to close flow without giving CSAT",
                "$ref": "#/components/schemas/HelpAction"
              }
            }
          }
        ]
      },
      "supportRequest": {
        "type": "object",
        "properties": {
          "orderid": {
            "type": "string",
            "description": "The id of the order this request relates to"
          },
          "subject": {
            "type": "string",
            "description": "What is this request about?"
          },
          "body": {
            "type": "string",
            "description": "Detail of the request"
          }
        }
      },
      "TextAndActionsStep": {
        "description": "'Default' flow step, consisting of text and next-step actions",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FlowStepBase"
          },
          {
            "type": "object",
            "properties": {
              "header": {
                "type": "string",
                "description": "Display header"
              },
              "body": {
                "type": "array",
                "description": "Array of paragraphs for body text",
                "items": {
                  "type": "string"
                }
              },
              "actions": {
                "type": "array",
                "description": "Array of actions (i.e. buttons)",
                "items": {
                  "$ref": "#/components/schemas/HelpAction"
                }
              }
            }
          }
        ]
      },
      "ActiveConsumerOffer": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "Type",
          "offerId"
        ],
        "properties": {
          "offerId": {
            "type": "string",
            "description": "Unique Identifier for Offer",
            "nullable": false
          },
          "Type": {
            "type": "string",
            "description": "Contains the offer data type name"
          }
        }
      },
      "ActiveConsumerOffersByRestaurant": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "restaurantId": {
            "type": "string",
            "description": "The `RestaurantId` applicable to the Offer",
            "nullable": true,
            "example": "1234567ds"
          },
          "offers": {
            "type": "array",
            "description": "A Collection of Active Offers for `RestaurantId`",
            "nullable": true,
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ActiveConsumerOffer"
                },
                {
                  "$ref": "#/components/schemas/Percent"
                }
              ],
              "discriminator": {
                "propertyName": "Type",
                "mapping": {
                  "Percent": "#/components/schemas/Percent"
                }
              }
            }
          }
        },
        "example": {
          "restaurantId": "1234sd",
          "offers": [
            {
              "Type": "Percent",
              "offerId": "12345sd",
              "amount": 20,
              "qualifyingValue": 15000,
              "maxQualifyingValue": 45000
            },
            {
              "Type": "Percent",
              "offerId": "45sd345",
              "amount": 15,
              "qualifyingValue": 35000,
              "maxQualifyingValue": 70000
            }
          ]
        }
      },
      "ActiveConsumerOffersRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "restaurantIds"
        ],
        "properties": {
          "restaurantIds": {
            "type": "array",
            "description": "The identifiers of the restaurants. Allows offers to be returned for many restaurants.",
            "minItems": 1,
            "items": {
              "type": "string"
            }
          },
          "consumerId": {
            "type": "string",
            "description": "Global Consumer Id",
            "nullable": true
          },
          "applicableDateTimeUtc": {
            "type": "string",
            "description": "This is to support the basket use case, where\nan Offer may be active and displayed in Search or Menu\nbut could become inactive by the time the consumer\ncompletes the order.",
            "format": "date-time",
            "nullable": true
          }
        },
        "example": {
          "restaurantIds": [
            "12879",
            "450174"
          ],
          "consumerId": "1050450174",
          "applicableDateTimeUtc": "2021-01-20T19:35:13.643Z"
        }
      },
      "ActiveConsumerOffersResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "activeConsumerOffersByRestaurants": {
            "type": "array",
            "description": "A Collection of Active Offers by Restaurant",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ActiveConsumerOffersByRestaurant"
            }
          }
        }
      },
      "ConsumerOffer_Bogof": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ConsumerOffer"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "products",
              "prompt"
            ],
            "properties": {
              "products": {
                "nullable": false,
                "type": "array",
                "minItems": 1,
                "description": "One of those products needed to be included in the basket to make offer applicable.\nThe second occurrence of such product gets 100% discount",
                "items": {
                  "$ref": "#/components/schemas/ConsumerOffersProduct"
                }
              },
              "productCategories": {
                "nullable": true,
                "type": "array",
                "minItems": 1,
                "description": "One of the products from category needed to be included in the basket to make offer applicable.\nThe second occurrence of such product gets 100% discount",
                "items": {
                  "$ref": "#/components/schemas/ConsumerOffersProductCategory"
                }
              },
              "prompt": {
                "nullable": false,
                "$ref": "#/components/schemas/ConsumerOfferPrompt",
                "description": "A prompt displayed to consumer"
              }
            }
          }
        ],
        "example": {
          "offerId": "12345sd",
          "restaurantId": "1234sd",
          "offerType": "Bogof",
          "prompt": {
            "title": "Nice! You get this free with your order",
            "description": "Ice Cream for free when you order Ice Cream"
          },
          "products": [
            {
              "id": "iceCreamA"
            },
            {
              "id": "iceCreamB"
            },
            {
              "id": "iceCreamC"
            }
          ],
          "campaignId": "freeIceCream",
          "consumerSegment": "All"
        }
      },
      "ConsumerOffer_FreeItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ConsumerOffer"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "qualifyingProducts",
              "freeProduct",
              "prompt"
            ],
            "properties": {
              "qualifyingProducts": {
                "nullable": false,
                "deprecated": true,
                "type": "array",
                "minItems": 1,
                "description": "One of those products needed to be included in the collection of products to make offer applicable [Deprecated - use `qualifyingConditions` instead]",
                "items": {
                  "$ref": "#/components/schemas/ConsumerOffersProduct"
                }
              },
              "freeProduct": {
                "nullable": false,
                "deprecated": true,
                "$ref": "#/components/schemas/ConsumerOffersProduct",
                "description": "The product that gets 100% discount applied [Deprecated - use freeProducts instead]"
              },
              "freeProducts": {
                "nullable": false,
                "type": "array",
                "minItems": 1,
                "description": "One or more of those products gets 100% discount applied",
                "items": {
                  "$ref": "#/components/schemas/ConsumerOffersProduct"
                }
              },
              "maximumRedemptions": {
                "type": "number",
                "minimum": 1,
                "description": "The maximum number of discounted items for this offer",
                "format": "integer",
                "nullable": false
              },
              "prompt": {
                "nullable": false,
                "$ref": "#/components/schemas/ConsumerOfferPrompt",
                "description": "A prompt displayed to consumer"
              }
            }
          }
        ],
        "example": {
          "offerId": "12345sd",
          "restaurantId": "1234sd",
          "offerType": "FreeItem",
          "prompt": {
            "title": "Nice! You get this free with your order",
            "description": "Potato for free when you order Ice Cream"
          },
          "freeProducts": [
            {
              "id": "PotatoId",
              "preferableModifierIds": [
                "ketchupModifierId"
              ]
            }
          ],
          "campaignId": "freePotato",
          "consumerSegment": "All",
          "maximumRedemptions": 1,
          "qualifyingConditions": {
            "qualifyingProducts": [
              {
                "id": "BigMacId"
              },
              {
                "id": "DoubleBigMacId"
              },
              {
                "id": "BigMacMenuId"
              }
            ]
          }
        }
      },
      "ConsumerOffer_Percent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ConsumerOffer"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "amount"
            ],
            "properties": {
              "amount": {
                "type": "number",
                "description": "The percentage value discount",
                "format": "decimal",
                "nullable": false
              },
              "qualifyingValue": {
                "type": "number",
                "deprecated": true,
                "description": "The minimum order value required to be eligible for the Offer in smallest unit of relevant currency. [Deprecated - use `qualifyingConditions` instead]",
                "format": "integer",
                "nullable": true
              }
            }
          }
        ],
        "example": {
          "amount": 10,
          "qualifyingConditions": {
            "minimumOrderValue": 1500
          }
        }
      },
      "ConsumerOffer_StampCard": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ConsumerOffer"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "discounts"
            ],
            "properties": {
              "discounts": {
                "description": "The list of completed stamp card discounts",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ConsumerOfferStampCardDiscount"
                }
              }
            }
          }
        ]
      },
      "ConsumerOffer": {
        "title": "ConsumerOffer",
        "additionalProperties": false,
        "type": "object",
        "required": [
          "offerId",
          "restaurantId",
          "offerType",
          "consumerSegment",
          "priority"
        ],
        "properties": {
          "offerId": {
            "type": "string",
            "description": "The unique identifier of the offer.",
            "nullable": false
          },
          "restaurantId": {
            "type": "string",
            "description": "The unique identifier of the restaurant providing the offers.",
            "nullable": false
          },
          "offerType": {
            "$ref": "#/components/schemas/ConsumerOfferType",
            "description": "The type of the offer.",
            "nullable": false
          },
          "campaignId": {
            "type": "string",
            "description": "The unique identifier of the offer campaign.",
            "nullable": true
          },
          "consumerSegment": {
            "$ref": "#/components/schemas/ConsumerSegment",
            "description": "Consumer Segment to which offer applies",
            "nullable": false
          },
          "priority": {
            "$ref": "#/components/schemas/ConsumerOffersPriority",
            "description": "The offers priority dictates the order and combination approach when multiple offers are executed together.",
            "nullable": false
          },
          "qualifyingConditions": {
            "$ref": "#/components/schemas/ConsumerOfferQualifyingConditions",
            "description": "Conditions that must be met in order to get the offer.",
            "nullable": true
          }
        }
      },
      "ConsumerOfferNotification": {
        "title": "ConsumerOfferNotification",
        "type": "object",
        "required": [
          "offerId",
          "restaurantId",
          "offerType",
          "consumerSegment"
        ],
        "properties": {
          "offerId": {
            "type": "string",
            "description": "The unique identifier of the offer.",
            "nullable": false
          },
          "campaignId": {
            "type": "string",
            "description": "The unique identifier of the offer campaign.",
            "nullable": true
          },
          "consumerSegment": {
            "$ref": "#/components/schemas/ConsumerSegment",
            "description": "Consumer Segment to which offer applies",
            "nullable": false
          },
          "restaurantId": {
            "type": "string",
            "description": "The unique identifier of the restaurant providing the offers.",
            "nullable": false
          },
          "description": {
            "type": "string",
            "description": "The description of the offer.",
            "nullable": true
          },
          "offerType": {
            "$ref": "#/components/schemas/ConsumerOfferType",
            "description": "The type of the offer.",
            "nullable": false
          }
        },
        "example": {
          "offerId": "12345c",
          "restaurantId": "1234567ds",
          "description": "Get one free",
          "offerType": "Percent",
          "campaignId": "CheekyTuesday",
          "consumerSegment": "All"
        }
      },
      "ConsumerOfferPrompt": {
        "allOf": [
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "title": {
                "type": "string",
                "description": "The title to show in prompt for customer"
              },
              "header": {
                "type": "string",
                "description": "The header to show in prompt for customer",
                "nullable": true
              },
              "description": {
                "type": "string",
                "description": "The description of offer to show in prompt for customer"
              }
            }
          }
        ],
        "example": {
          "title": "Nice! You get this free with your order",
          "header": "Free item",
          "description": "We�ll apply the discount at checkout"
        }
      },
      "ConsumerOfferQualifyingConditions": {
        "title": "ConsumerOfferQualifyingConditions",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "minimumOrderValue": {
            "type": "number",
            "description": "The minimum order value required to be eligible for the Offer in smallest unit of relevant currency.",
            "format": "integer",
            "nullable": true
          },
          "qualifyingProducts": {
            "type": "array",
            "minItems": 1,
            "description": "One of those products needed to be included in the basket to make offer applicable",
            "items": {
              "$ref": "#/components/schemas/ConsumerOffersProduct"
            },
            "nullable": true
          },
          "qualifyingProductCategories": {
            "type": "array",
            "minItems": 1,
            "description": "One of the products from category needed to be included in the basket to make offer applicable",
            "items": {
              "$ref": "#/components/schemas/ConsumerOffersProductCategory"
            },
            "nullable": true
          }
        },
        "example": {
          "minimumOrderValue": 1000,
          "qualifyingProducts": [
            {
              "id": "FrenchFriesBig1"
            }
          ],
          "qualifyingProductCategories": [
            {
              "categoryId": "Sides111"
            }
          ]
        }
      },
      "ConsumerOffersBasket": {
        "title": "ConsumerOffersBasket",
        "properties": {
          "basketItems": {
            "type": "array",
            "description": "The collection of the basket items.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ConsumerOffersBasketItem"
            }
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "ConsumerOffersBasketItem": {
        "title": "ConsumerOffersBasketItem",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "description": "The `ProductId` of basket item.",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity of basket item.",
            "format": "int32",
            "nullable": true
          }
        },
        "example": {
          "productId": "BRGR123",
          "quantity": 1
        }
      },
      "ConsumerOffersNotificationsRequest": {
        "title": "ConsumerOffersNotificationsRequest",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "restaurantIds": {
            "type": "array",
            "description": "The identifiers of the restaurants. Allows offers to be returned for many restaurants.",
            "maxItems": 150,
            "minItems": 11,
            "items": {
              "type": "string"
            }
          },
          "applicableDateTimeUtc": {
            "type": "string",
            "description": "Overrides the current time for determining whether offers are active.\nEnables offers to be returned that have become\ninactive after the order was added to a consumer's basket.",
            "format": "date-time",
            "nullable": true,
            "example": "2021-01-20T19:35:13.643Z"
          }
        },
        "required": [
          "restaurantIds"
        ],
        "example": {
          "restaurantIds": [
            "123456cc",
            "123456aa",
            "12335bb",
            "12335dd",
            "12335ee",
            "12335ff",
            "12335gg",
            "12335hh",
            "12335ii",
            "12335jj",
            "12335kk"
          ],
          "applicableDateTimeUtc": "2020-04-20T16:20:00.000Z"
        }
      },
      "ConsumerOffersNotificationsResponse": {
        "title": "ConsumerOffersNotificationsResponse",
        "description": "Holder of Consumer Offer Notifications",
        "type": "object",
        "properties": {
          "offerNotifications": {
            "type": "array",
            "description": "Provide consumer offer notifications for given restaurants, containing offer description but not exact details like discount etc.",
            "items": {
              "$ref": "#/components/schemas/ConsumerOfferNotification"
            }
          }
        }
      },
      "ConsumerOffersPriority": {
        "title": "ConsumerOffersPriority",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "format": "integer",
            "description": "The offers are evaluated based on priority in descending order. The first triggered will return effects"
          },
          "type": {
            "type": "string",
            "description": "All offers are evaluated based on type and priority value in descending order.\nUniversal offers are always executed. Exclusive offers are evaluated after Universal offers, the first Exclusive offer triggered will return effects\nIf an Exclusive offer is triggered, the Stackable offers will be skipped.",
            "enum": [
              "Exclusive",
              "Stackable",
              "Universal"
            ]
          }
        },
        "required": [
          "value",
          "type"
        ],
        "example": {
          "value": 1,
          "type": "Stackable"
        }
      },
      "ConsumerOffersProduct": {
        "title": "ConsumerOffersProduct",
        "additionalProperties": false,
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the product."
          },
          "showModifiersSelectionDialog": {
            "type": "boolean",
            "description": "Determinate if modifiers selection dialogue will be shown to customer."
          },
          "preferableModifierIds": {
            "nullable": true,
            "type": "array",
            "description": "The collection of preselected modifiers for the item.",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "id": "6 Chicken Nuggets",
          "preferableModifierIds": [
            "ketchupModifierId"
          ]
        }
      },
      "ConsumerOffersProductCategory": {
        "title": "ConsumerOffersProductCategory",
        "additionalProperties": false,
        "type": "object",
        "required": [
          "categoryId"
        ],
        "properties": {
          "categoryId": {
            "type": "string",
            "description": "The unique identifier of the product category."
          },
          "categoryName": {
            "type": "string",
            "description": "The name of the product category."
          },
          "preferableModifierIds": {
            "nullable": true,
            "type": "array",
            "description": "The collection of preselected modifiers for the items in category.",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "categoryId": "Pizza1234",
          "categoryName": "Pizza"
        }
      },
      "ConsumerOffersRequest": {
        "title": "ConsumerOffersRequest",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "restaurantId": {
            "type": "string",
            "description": "The identifier of the restaurant.",
            "minLength": 1
          },
          "applicableDateTimeUtc": {
            "type": "string",
            "description": "Overrides the current time for determining whether offers are active.\nEnables offers to be returned that for the time in future (e.g. Pre-order)",
            "format": "date-time",
            "example": "2021-01-20T19:35:13.643Z"
          },
          "consumerId": {
            "type": "string",
            "description": "Global Consumer Id",
            "nullable": true
          },
          "consumerOffersBasket": {
            "description": "The consumer basket content",
            "$ref": "#/components/schemas/ConsumerOffersBasket"
          }
        },
        "required": [
          "restaurantId",
          "consumerOffersBasket"
        ],
        "example": {
          "restaurantId": "asd12345",
          "applicableDateTimeUtc": "2020-04-20T16:20:00.000Z",
          "consumerOffersBasket": {
            "basketItems": [
              {
                "productId": "BRGR123",
                "quantity": 1
              }
            ]
          }
        }
      },
      "ConsumerOffersResponse": {
        "title": "ConsumerOffersResponse",
        "description": "Holder of consumer offers",
        "type": "object",
        "properties": {
          "offers": {
            "description": "Provide applicable consumer offers based on provided `restaurantId` and basket content.",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ConsumerOffer_FreeItem"
                },
                {
                  "$ref": "#/components/schemas/ConsumerOffer_Percent"
                },
                {
                  "$ref": "#/components/schemas/ConsumerOffer_StampCard"
                },
                {
                  "$ref": "#/components/schemas/ConsumerOffer_Bogof"
                }
              ],
              "discriminator": {
                "propertyName": "offerType",
                "mapping": {
                  "Percent": "#/components/schemas/ConsumerOffer_Percent",
                  "FreeItem": "#/components/schemas/ConsumerOffer_FreeItem",
                  "Bogof": "#/components/schemas/ConsumerOffer_Bogof",
                  "StampCard": "#/components/schemas/ConsumerOffer_StampCard"
                }
              }
            }
          }
        },
        "example": {
          "offers": [
            {
              "offerId": "12345sd",
              "restaurantId": "1234sd",
              "offerType": "Percent",
              "campaignId": "CheekyTuesday",
              "consumerSegment": "All",
              "priority": {
                "value": 1,
                "type": "Stackable"
              },
              "qualifyingConditions": {
                "minimumOrderValue": 15000
              }
            },
            {
              "offerId": "345sd",
              "restaurantId": "1234sd",
              "offerType": "FreeItem",
              "consumerSegment": "All",
              "priority": {
                "value": 1,
                "type": "Stackable"
              },
              "qualifyingConditions": {
                "qualifyingProducts": [
                  {
                    "id": "BigMacId"
                  },
                  {
                    "id": "DoubleBigMacId"
                  },
                  {
                    "id": "BigMacMenuId"
                  }
                ]
              },
              "freeProducts": [
                {
                  "id": "6 Chicken Nuggets",
                  "preferableModifierIds": [
                    "ketchupModifierId"
                  ]
                }
              ],
              "prompt": {
                "title": "Nice! You get this free with your order",
                "description": "6 Nuggets for free when you order Big Mac"
              }
            },
            {
              "offerId": "345345sd",
              "restaurantId": "1234sd",
              "offerType": "Bogof",
              "campaignId": "freeIceCream",
              "consumerSegment": "All",
              "priority": {
                "value": 1,
                "type": "Stackable"
              },
              "products": [
                {
                  "id": "CookieDoughId"
                },
                {
                  "id": "FishFoodId"
                },
                {
                  "id": "ChocFudgeBrownieId"
                }
              ],
              "prompt": {
                "title": "Nice! You get this free with your order",
                "description": "Get 2 for 1 on Any Ice Cream Company's 465ml"
              }
            }
          ]
        }
      },
      "ConsumerOfferStampCardDiscount": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "discountValue",
          "discountCode"
        ],
        "properties": {
          "discountValue": {
            "type": "number",
            "description": "The discount value in smallest unit of relevant currency.",
            "format": "integer",
            "nullable": false
          },
          "discountCode": {
            "description": "The unique code of the discount, acts as a lock object at payment stage",
            "type": "string",
            "nullable": false
          }
        }
      },
      "ConsumerOfferType": {
        "type": "string",
        "enum": [
          "Percent",
          "FreeItem",
          "Bogof",
          "StampCard"
        ]
      },
      "ConsumerSegment": {
        "type": "string",
        "enum": [
          "All",
          "NewToRestaurant"
        ]
      },
      "Percent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ActiveConsumerOffer"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "amount": {
                "type": "number",
                "description": "The percentage value discount",
                "format": "decimal"
              },
              "qualifyingValue": {
                "type": "number",
                "description": "The minimum order value required to be eligible for the Offer",
                "format": "decimal"
              },
              "maxQualifyingValue": {
                "type": "number",
                "description": "The maximum order value required to be eligible for the offer",
                "format": "decimal"
              }
            }
          }
        ]
      },
      "ConsumerOrderAddress": {
        "type": "object",
        "properties": {
          "addressLines": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The lines of the address."
          },
          "locality": {
            "type": "string",
            "description": "The locality, such as a district or suburb, if any."
          },
          "city": {
            "type": "string",
            "description": "The city or town."
          },
          "region": {
            "type": "string",
            "description": "The region, such as a county, province or state."
          },
          "postalCode": {
            "type": "string",
            "description": "The postal code."
          },
          "countryCode": {
            "type": "string",
            "description": "The ISO 3166-1 alpha-2 country code."
          },
          "location": {
            "$ref": "#/components/schemas/ConsumerOrderGeoposition"
          }
        },
        "description": "A postal address.",
        "x-api-version-from": "2017-10"
      },
      "ConsumerOrderApplicationInfo": {
        "type": "object",
        "properties": {
          "clientIdentifier": {
            "type": "string",
            "description": "The client identifier associated with the order, if any, such as a device Id or IP address."
          },
          "feature": {
            "type": "string",
            "description": "The name of the Just Eat feature that placed the order."
          },
          "name": {
            "type": "string",
            "description": "The name of the application that placed the order."
          },
          "version": {
            "type": "string",
            "description": "The version of the application that placed the order."
          },
          "userAgent": {
            "type": "string",
            "description": "The User Agent of the client that placed the order."
          }
        },
        "description": "Information about an application used to place an order.",
        "x-api-version-from": "2017-10"
      },
      "ConsumerOrderBasketInfo": {
        "type": "object",
        "properties": {
          "currencyCode": {
            "type": "string",
            "description": "The ISO-4217 currency code associated with the basket."
          },
          "subtotal": {
            "type": "number",
            "description": "The subtotal for the basket before any discounts or fees.",
            "format": "double"
          },
          "discounts": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            },
            "description": "The discounts applied to the basket, if any."
          },
          "fees": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            },
            "description": "The fees applied to the basket, if any."
          },
          "total": {
            "type": "number",
            "description": "The total value of the basket.",
            "format": "double"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConsumerOrderBasketItem"
            },
            "description": "The items in the basket."
          },
          "offers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConsumerOrderOffer"
            },
            "description": "The offer discounts applied to the basket."
          },
          "tips": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ConsumerOrderTipItem"
            },
            "description": "The tips associated with the basket."
          },
          "summary": {
            "$ref": "#/components/schemas/ConsumerOrderBasketSummary"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Arbitrary metadata about the basket."
          }
        },
        "description": "Information about the items in the basket for an order.",
        "x-api-version-from": "2017-10"
      },
      "ConsumerOrderBasketItem": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "description": "The product Id."
          },
          "name": {
            "type": "string",
            "description": "The name of the item."
          },
          "description": {
            "type": "string",
            "description": "The description for the item."
          },
          "synonym": {
            "type": "string",
            "description": "The synonym of the item."
          },
          "unitPrice": {
            "type": "number",
            "description": "The unit price for the item.",
            "format": "double"
          },
          "combinedPrice": {
            "type": "number",
            "description": "The combined price for the item, including any accessories and/or discounts.",
            "format": "double"
          },
          "parts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConsumerOrderMealPart"
            },
            "description": "The parts of the meal, if any."
          },
          "requiredAccessories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConsumerOrderMealAccessory"
            },
            "description": "The required meal part accessories, if any."
          },
          "optionalAccessories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConsumerOrderMealAccessory"
            },
            "description": "The optional meal part accessories, if any."
          },
          "discounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConsumerOrderDiscount"
            },
            "description": "The discounts, if any."
          },
          "bulkDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConsumerOrderBulkDiscount"
            },
            "description": "The bulk discounts, if any."
          }
        },
        "description": "An item in a basket.",
        "x-api-version-from": "2017-10"
      },
      "ConsumerOrderBasketSummary": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConsumerOrderBasketSummaryItem"
            },
            "description": "The items in the basket summary."
          }
        },
        "description": "A summary of the items in the basket for an order.",
        "x-api-version-from": "2017-10"
      },
      "ConsumerOrderBasketSummaryItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The Id of the item, such as a product Id or meal part Id."
          },
          "name": {
            "type": "string",
            "description": "The name of the item."
          },
          "synonym": {
            "type": "string",
            "description": "The synonym of the item."
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity of the item.",
            "format": "int32"
          },
          "price": {
            "type": "number",
            "description": "The price of the item for the associated quantity.",
            "format": "double"
          },
          "unitPrice": {
            "type": "number",
            "description": "The unit price of the item.",
            "format": "double"
          },
          "accessories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConsumerOrderMealAccessory"
            },
            "description": "The accessories in the basket summary item."
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConsumerOrderBasketSummaryItem"
            },
            "description": "The items in the basket summary item."
          }
        },
        "description": "A summarised item in a basket.",
        "x-api-version-from": "2017-10"
      },
      "ConsumerOrderBulkDiscount": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the bulk discount."
          },
          "amount": {
            "type": "number",
            "description": "The amount of the bulk discount.",
            "format": "double"
          },
          "productTypeId": {
            "type": "string",
            "description": "The Id of the product type the discount applies to."
          }
        },
        "description": "A bulk discount.",
        "x-api-version-from": "2017-10"
      },
      "ConsumerOrderConsumerInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The consumer Id."
          },
          "name": {
            "type": "string",
            "description": "The consumer's name."
          },
          "email": {
            "type": "string",
            "description": "The consumer's email address."
          },
          "contactNumber": {
            "type": "string",
            "description": "The consumer's contact number."
          },
          "timeZone": {
            "type": "string",
            "description": "The IANA time zone Id the consumer is located in."
          },
          "deliveryAddress": {
            "$ref": "#/components/schemas/ConsumerOrderAddress"
          }
        },
        "description": "Information about a consumer.",
        "x-api-version-from": "2017-10"
      },
      "ConsumerOrderConsumerReview": {
        "type": "object",
        "properties": {
          "scores": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            },
            "description": "The scores given for the scored attributes of the review by the consumer."
          },
          "comments": {
            "type": "string",
            "description": "Any comments left by the consumer in the review."
          }
        },
        "description": "A consumer's review of an order.",
        "x-api-version-from": "2017-10"
      },
      "ConsumerOrderCuisineInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The Id of the cuisine."
          },
          "name": {
            "type": "string",
            "description": "The name of the cuisine."
          },
          "rank": {
            "type": "integer",
            "description": "The ranking for the cuisine.",
            "format": "int32"
          }
        },
        "description": "Information about a restaurant cuisine.",
        "x-api-version-from": "2017-10"
      },
      "ConsumerOrderDateTimeRange": {
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "description": "The start of the range.",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "description": "The end of the range.",
            "format": "date-time"
          }
        },
        "description": "A range of date and time values.",
        "x-api-version-from": "2017-10"
      },
      "ConsumerOrderDiscount": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the discount."
          },
          "amount": {
            "type": "number",
            "description": "The amount of the discount.",
            "format": "double"
          }
        },
        "description": "A discount.",
        "x-api-version-from": "2017-10"
      },
      "ConsumerOrderErrorResponse": {
        "type": "object",
        "properties": {
          "errorId": {
            "type": "string",
            "description": "The error Id."
          },
          "requestId": {
            "type": "string",
            "description": "The request Id, if available."
          },
          "statusCode": {
            "type": "integer",
            "description": "The HTTP status code.",
            "format": "int32"
          },
          "errorCode": {
            "type": "string",
            "description": "The API error code, if any."
          },
          "message": {
            "type": "string",
            "description": "The error message."
          },
          "timestamp": {
            "type": "string",
            "description": "The timestamp of the error.",
            "format": "date-time"
          },
          "version": {
            "type": "string",
            "description": "The version of the API that generated the error."
          },
          "fingerprint": {
            "type": "string",
            "description": "The error fingerprint, if available."
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ConsumerOrderLink"
            },
            "description": "The links information, if any."
          },
          "detail": {
            "type": "object",
            "description": "The optional error detail."
          }
        },
        "description": "An error response.",
        "x-api-version-from": "2017-10"
      },
      "ConsumerOrderGeoposition": {
        "type": "object",
        "properties": {
          "latitude": {
            "type": "number",
            "description": "The latitude.",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "description": "The longitude.",
            "format": "double"
          }
        },
        "description": "A geoposition.",
        "x-api-version-from": "2017-10"
      },
      "ConsumerOrderImage": {
        "type": "object",
        "properties": {
          "imageType": {
            "type": "string",
            "description": "The type of the image, such as a logo."
          },
          "uri": {
            "type": "string",
            "description": "The URI of the image."
          },
          "height": {
            "type": "integer",
            "description": "The optional height of the image, in pixels.",
            "format": "int32",
            "nullable": true
          },
          "width": {
            "type": "integer",
            "description": "The optional width of the image, in pixels.",
            "format": "int32",
            "nullable": true
          }
        },
        "description": "An image.",
        "x-api-version-from": "2017-10"
      },
      "ConsumerOrderLink": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The URL of the link."
          },
          "templated": {
            "type": "boolean",
            "description": "A value indicating whether the URL is templated."
          }
        },
        "description": "A link to an API resource.",
        "x-api-version-from": "2017-10"
      },
      "ConsumerOrderMealAccessory": {
        "type": "object",
        "properties": {
          "accessoryId": {
            "type": "string",
            "description": "The accessory Id."
          },
          "name": {
            "type": "string",
            "description": "The name of the accessory."
          },
          "unitPrice": {
            "type": "number",
            "description": "The unit price of the accessory.",
            "format": "double"
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity of the accessory.",
            "format": "int32"
          }
        },
        "description": "An accessory for a meal.",
        "x-api-version-from": "2017-10"
      },
      "ConsumerOrderMealPart": {
        "type": "object",
        "properties": {
          "mealPartId": {
            "type": "string",
            "description": "The meal part Id."
          },
          "groupId": {
            "type": "string",
            "description": "The group Id."
          },
          "name": {
            "type": "string",
            "description": "The name of the meal part."
          },
          "synonym": {
            "type": "string",
            "description": "The synonym of the meal part."
          },
          "requiredAccessories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConsumerOrderMealAccessory"
            },
            "description": "The required meal part accessories, if any."
          },
          "optionalAccessories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConsumerOrderMealAccessory"
            },
            "description": "The optional meal part accessories, if any."
          }
        },
        "description": "A part of a meal.",
        "x-api-version-from": "2017-10"
      },
      "ConsumerOrderOffer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The offer Id."
          },
          "offerType": {
            "type": "string",
            "description": "The type of the offer."
          },
          "offerAmount": {
            "type": "number",
            "description": "The value of the offer.",
            "format": "double"
          },
          "qualifyingValue": {
            "type": "number",
            "description": "The qualifying value for the offer.",
            "format": "double"
          }
        },
        "description": "An offer applied to a basket.",
        "x-api-version-from": "2017-10"
      },
      "ConsumerOrderOrder": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The Id of the order."
          },
          "friendlyId": {
            "type": "string",
            "description": "The friendly order Id."
          },
          "tenant": {
            "type": "string",
            "description": "The tenant associated with the order."
          },
          "information": {
            "$ref": "#/components/schemas/ConsumerOrderOrderInfo"
          },
          "application": {
            "$ref": "#/components/schemas/ConsumerOrderApplicationInfo"
          },
          "basket": {
            "$ref": "#/components/schemas/ConsumerOrderBasketInfo"
          },
          "consumer": {
            "$ref": "#/components/schemas/ConsumerOrderConsumerInfo"
          },
          "payment": {
            "$ref": "#/components/schemas/ConsumerOrderPaymentInfo"
          },
          "restaurant": {
            "$ref": "#/components/schemas/ConsumerOrderRestaurantInfo"
          },
          "review": {
            "$ref": "#/components/schemas/ConsumerOrderReviewInfo"
          },
          "status": {
            "$ref": "#/components/schemas/ConsumerOrderStatusInfo"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Arbitrary metadata about the order."
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ConsumerOrderLink"
            },
            "description": "The links information, if any."
          },
          "timestamp": {
            "type": "string",
            "description": "The UTC timestamp of the date and time that the response was generated at.",
            "format": "date-time",
            "x-api-version-from": "2019-04"
          }
        },
        "description": "An order.",
        "x-api-version-from": "2017-10"
      },
      "ConsumerOrderOrderHistory": {
        "type": "object",
        "properties": {
          "consumerId": {
            "type": "string",
            "description": "The Id of the consumer."
          },
          "tenant": {
            "type": "string",
            "description": "The tenant associated with the consumer."
          },
          "orders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConsumerOrderOrder"
            },
            "description": "The consumer's orders."
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ConsumerOrderLink"
            },
            "description": "The links information, if any."
          },
          "_pagination": {
            "$ref": "#/components/schemas/ConsumerOrderPaginationInfo"
          },
          "timestamp": {
            "type": "string",
            "description": "The UTC timestamp of the date and time that the response was generated at.",
            "format": "date-time",
            "x-api-version-from": "2019-04"
          }
        },
        "description": "The order history of a consumer.",
        "x-api-version-from": "2017-10"
      },
      "ConsumerOrderOrderInfo": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "description": "The date and time the order was created.",
            "format": "date-time"
          },
          "canReorder": {
            "type": "boolean",
            "description": "A value indicating whether the order can be re-ordered."
          },
          "isAsap": {
            "type": "boolean",
            "description": "A value indicating whether the order should be fulfilled as soon as possible."
          },
          "isForDelivery": {
            "type": "boolean",
            "description": "A value indicating whether the order is for delivery."
          },
          "notes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Any notes associated with the order given by the consumer."
          }
        },
        "description": "Additional information about an order.",
        "x-api-version-from": "2017-10"
      },
      "ConsumerOrderOrderStatus": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The Id of the order."
          },
          "tenant": {
            "type": "string",
            "description": "The tenant associated with the order."
          },
          "consumerId": {
            "type": "string",
            "description": "The Id of consumer associated with the order."
          },
          "isForDelivery": {
            "type": "boolean",
            "description": "A value indicating whether the order is for delivery."
          },
          "restaurantName": {
            "type": "string",
            "description": "The name of the restaurant associated with the order."
          },
          "status": {
            "$ref": "#/components/schemas/ConsumerOrderStatusInfo"
          },
          "timestamp": {
            "type": "string",
            "description": "The UTC timestamp of the date and time that the response was generated at.",
            "format": "date-time",
            "x-api-version-from": "2019-04"
          }
        },
        "description": "The status of an order.",
        "x-api-version-from": "2017-10"
      },
      "ConsumerOrderPaginationInfo": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results, if known.",
            "format": "int64",
            "nullable": true
          },
          "count": {
            "type": "integer",
            "description": "The current number of results.",
            "format": "int64"
          },
          "token": {
            "type": "string",
            "description": "The pagination token for the next page of results, if any."
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ConsumerOrderLink"
            },
            "description": "The pagination links."
          }
        },
        "description": "Pagination information for a request.",
        "x-api-version-from": "2017-10"
      },
      "ConsumerOrderPaymentInfo": {
        "type": "object",
        "properties": {
          "paidAt": {
            "type": "string",
            "description": "The date and time the order was paid for, if known.",
            "format": "date-time",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "The ISO-4217 currency code associated with the payment."
          },
          "totals": {
            "$ref": "#/components/schemas/ConsumerOrderTotals"
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConsumerOrderPaymentItem"
            },
            "description": "The individual payment(s)."
          },
          "fees": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            },
            "description": "The amount of fees applied to the order."
          },
          "taxes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ConsumerOrderTaxItem"
            },
            "description": "The taxes applied to the order."
          }
        },
        "description": "Information about a payment.",
        "x-api-version-from": "2017-10"
      },
      "ConsumerOrderPaymentItem": {
        "type": "object",
        "properties": {
          "paymentMethod": {
            "enum": [
              "None",
              "Cash",
              "Card",
              "AccountCredit",
              "Voucher",
              "PayPal",
              "Interac",
              "ApplePay"
            ],
            "type": "string",
            "description": "The payment method, such as cash or card.",
            "x-api-version-from": "2017-10"
          },
          "value": {
            "type": "number",
            "description": "The payment value.",
            "format": "double"
          },
          "fee": {
            "type": "number",
            "description": "The payment fee, if any.",
            "format": "double"
          },
          "cardType": {
            "type": "string",
            "description": "The card type, such as VISA, if used."
          },
          "lastCardDigits": {
            "type": "string",
            "description": "The last digits of a payment card, if used."
          },
          "pspName": {
            "type": "string",
            "description": "The name of the Payment Service Provider, if any."
          },
          "transactionReference": {
            "type": "string",
            "description": "The transaction reference, if any."
          },
          "deferredFee": {
            "type": "number",
            "description": "The deferred fee value, if any.",
            "format": "double",
            "x-api-version-from": "2019-05"
          },
          "voucherCode": {
            "type": "string",
            "description": "The voucher code used, if any.",
            "x-api-version-from": "2019-05"
          }
        },
        "description": "An individual payment.",
        "x-api-version-from": "2017-10"
      },
      "ConsumerOrderReorderResponse": {
        "type": "object",
        "properties": {
          "basketId": {
            "type": "string",
            "description": "The basket Id."
          },
          "menuId": {
            "type": "string",
            "description": "The menu Id."
          },
          "restaurantId": {
            "type": "string",
            "description": "The restaurant Id."
          },
          "restaurantSeoName": {
            "type": "string",
            "description": "The restaurant SEO name."
          },
          "serviceType": {
            "type": "string",
            "description": "The service type, such as collection or delivery."
          },
          "tenant": {
            "type": "string",
            "description": "The tenant."
          },
          "unavailableProductIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The unavailable product Ids."
          }
        },
        "additionalProperties": false,
        "description": "A reorder response.",
        "x-api-version-from": "2020-06"
      },
      "ConsumerOrderRestaurantCapability": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the capability."
          },
          "isCapable": {
            "type": "boolean",
            "description": "A value indicating whether the restaurant is capable of fulfilling the capability."
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Arbitrary metadata about the capability."
          }
        },
        "description": "A capability of a restaurant.",
        "x-api-version-from": "2018-09"
      },
      "ConsumerOrderRestaurantInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The Id of the restaurant."
          },
          "seoName": {
            "type": "string",
            "description": "The SEO name of the restaurant."
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the restaurant."
          },
          "images": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ConsumerOrderImage"
            },
            "description": "The images associated with the restaurant."
          },
          "contactNumber": {
            "type": "string",
            "description": "The contact telephone number for the restaurant."
          },
          "timeZone": {
            "type": "string",
            "description": "IANA time zone Id the restaurant is located in."
          },
          "nextOpensAt": {
            "type": "string",
            "description": "The date and time the restaurant next opens, if closed.",
            "format": "date-time",
            "nullable": true
          },
          "isClosed": {
            "type": "boolean",
            "description": "A value indicating whether the restaurant is currently closed."
          },
          "nextClosesAt": {
            "type": "string",
            "description": "The date and time the restaurant next closes, if open.",
            "format": "date-time",
            "nullable": true
          },
          "isOffline": {
            "type": "boolean",
            "description": "A value indicating whether the restaurant is currently offline."
          },
          "postalAddress": {
            "$ref": "#/components/schemas/ConsumerOrderAddress"
          },
          "cuisines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConsumerOrderCuisineInfo"
            },
            "description": "The cuisines associated with the restaurant."
          },
          "capabilities": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ConsumerOrderRestaurantCapability"
            },
            "description": "The capabilities of the restaurant.",
            "x-api-version-from": "2018-09"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Arbitrary metadata about the restaurant."
          }
        },
        "description": "Information about a restaurant.",
        "x-api-version-from": "2017-10"
      },
      "ConsumerOrderReviewInfo": {
        "type": "object",
        "properties": {
          "canReview": {
            "type": "boolean",
            "description": "A value indicating whether the order can be reviewed."
          },
          "isReviewed": {
            "type": "boolean",
            "description": "A value indicating whether the order has been reviewed."
          },
          "maximumScore": {
            "type": "number",
            "description": "The maximum score that can be given to an attribute of the review.",
            "format": "double"
          },
          "averageScore": {
            "type": "number",
            "description": "The average score for the attributes of the review.",
            "format": "double",
            "nullable": true
          },
          "scores": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            },
            "description": "The scores given for the scored attributes of the review."
          },
          "comments": {
            "type": "string",
            "description": "Any comments left by the consumer in the review."
          },
          "ratingCode": {
            "type": "string",
            "description": "The rating code for the review."
          }
        },
        "description": "Information about the review for an order.",
        "x-api-version-from": "2017-10"
      },
      "ConsumerOrdersPlacementErrorResponse": {
        "type": "object",
        "properties": {
          "detail": {
            "type": "object",
            "additionalProperties": true,
            "nullable": true,
            "description": "The optional error detail."
          },
          "errorCode": {
            "type": "string",
            "nullable": false,
            "description": "The API error code."
          },
          "errorId": {
            "type": "string",
            "nullable": false,
            "description": "The API error Id."
          },
          "message": {
            "type": "string",
            "nullable": true,
            "description": "The error message."
          },
          "fingerprint": {
            "type": "string",
            "nullable": true,
            "description": "The error fingerprint, if available."
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ConsumerOrdersPlacementLink"
            },
            "nullable": false,
            "description": "The links information, if any."
          },
          "requestId": {
            "type": "string",
            "nullable": true,
            "description": "The request Id, if available."
          },
          "statusCode": {
            "type": "integer",
            "description": "The HTTP status code.",
            "format": "int32"
          },
          "timestamp": {
            "type": "string",
            "description": "The timestamp of the error.",
            "format": "date-time"
          },
          "version": {
            "type": "string",
            "nullable": true,
            "description": "The version of the API that generated the error."
          }
        },
        "description": "An error response.",
        "additionalProperties": false,
        "example": {
          "errorCode": "ErrorCode",
          "errorId": "c9e62582-4dbe-4eac-a982-b3fa2cb04fa0",
          "message": "An error occurred.",
          "_links": {},
          "requestId": "8000024c-0002-fe00-b63f-84710c7967bb",
          "statusCode": 500,
          "timestamp": "2019-04-16T17:52:50.000Z",
          "version": "1.0.1012 (377c04c)"
        },
        "x-api-version-from": 1
      },
      "ConsumerOrdersPlacementLink": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "nullable": false,
            "description": "The URL of the link."
          },
          "templated": {
            "type": "boolean",
            "description": "A value indicating whether the URL is templated."
          }
        },
        "description": "A link to an API resource.",
        "additionalProperties": false,
        "x-api-version-from": 1
      },
      "ConsumerOrdersPlacementReferralState": {
        "enum": [
          "None",
          "ReferredByWeb"
        ],
        "type": "string",
        "description": "Order referral source",
        "x-api-version-from": 1
      },
      "ConsumerOrdersPlacementRequestV1": {
        "type": "object",
        "required": [
          "basketId",
          "applicationId",
          "applicationVersion",
          "deviceId",
          "deviceName"
        ],
        "properties": {
          "basketId": {
            "type": "string",
            "description": "The basket Id."
          },
          "customerNotes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true,
            "description": "Dictionary of the customer notes to add to the order. The keys of the dictionary are the notes capabilities that the restaurant has."
          },
          "applicationId": {
            "type": "integer",
            "format": "int32",
            "description": "The Id of application that is placing the order."
          },
          "applicationName": {
            "type": "string",
            "nullable": true,
            "description": "The name of application that is placing the order."
          },
          "applicationVersion": {
            "type": "string",
            "nullable": false,
            "description": "The version of application that is placing the order."
          },
          "referralState": {
            "description": "Order referral source",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConsumerOrdersPlacementReferralState"
              }
            ]
          },
          "removedIngredientsEnabled": {
            "type": "boolean",
            "description": "A value indicating whether the basket contains removed ingredients."
          },
          "deviceId": {
            "type": "string",
            "description": "The identifier/ip of the device that is placing the order."
          },
          "deviceName": {
            "type": "string",
            "description": "The name of the device that is placing the order."
          }
        },
        "description": "An object representing the request to place an order for a given basket Id.",
        "additionalProperties": false,
        "x-api-version-from": 1,
        "x-api-version-to": 1,
        "example": {
          "applicationId": 4,
          "applicationVersion": "android-test-version",
          "basketId": "basket_gh23i_PS4_",
          "customerNotes": {
            "NoteForRestaurant": "No mayonnaise",
            "NoteForDriver": "Call me when you get here"
          },
          "deviceId": "Swagger-DeviceId",
          "deviceName": "Swagger-DeviceName",
          "referralState": "ReferredByWeb",
          "removedIngredientsEnabled": false
        }
      },
      "ConsumerOrdersPlacementRequestV2": {
        "type": "object",
        "required": [
          "basketId"
        ],
        "properties": {
          "basketId": {
            "type": "string",
            "description": "The basket Id."
          },
          "customerNotes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true,
            "description": "Dictionary of the customer notes to add to the order. The keys of the dictionary are the notes capabilities that the restaurant has."
          },
          "referralState": {
            "description": "Order referral source",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConsumerOrdersPlacementReferralState"
              }
            ]
          }
        },
        "description": "An object representing the request to place an order for a given basket Id.",
        "additionalProperties": false,
        "x-api-version-from": 2,
        "example": {
          "basketId": "basket_gh23i_PS4_",
          "customerNotes": {
            "NoteForRestaurant": "No mayonnaise",
            "NoteForDriver": "Call me when you get here"
          },
          "referralState": "ReferredByWeb"
        }
      },
      "ConsumerOrdersPlacementResponse": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string",
            "nullable": false,
            "description": "The id of the order."
          },
          "friendlyOrderId": {
            "type": "string",
            "nullable": false,
            "description": "The friendly order Id."
          }
        },
        "description": "An order placement response.",
        "additionalProperties": false,
        "x-api-version-from": 1
      },
      "ConsumerOrderStatusHistoryItem": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "The timestamp associated with this order status.",
            "format": "date-time"
          },
          "dueDate": {
            "type": "string",
            "description": "The due date at the date and time associated with the timestamp, if any.",
            "format": "date-time",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "The order status at the date and time associated with the timestamp."
          },
          "confidence": {
            "type": "string",
            "description": "The confidence level of the status."
          },
          "reason": {
            "type": "string",
            "description": "The reason for the order's status, if known.\nIf your client does not understand this reason, assume that it has no value.",
            "x-api-version-from": "2019-05"
          }
        },
        "description": "Information about the status of an order at a specific point in time.",
        "x-api-version-from": "2017-10"
      },
      "ConsumerOrderStatusInfo": {
        "type": "object",
        "properties": {
          "isActive": {
            "type": "boolean",
            "description": "A value indicating whether the status of the order may change further."
          },
          "isRecent": {
            "type": "boolean",
            "description": "A value indicating whether the order is a recent order."
          },
          "value": {
            "type": "string",
            "description": "The current status of the order."
          },
          "timeZone": {
            "type": "string",
            "description": "IANA time zone Id associated with the order."
          },
          "expectPreorderNotificationAt": {
            "type": "string",
            "description": "The date and time the restaurant is expected to accept a preorder, if any.",
            "format": "date-time",
            "nullable": true
          },
          "initialDueDate": {
            "type": "string",
            "description": "The initial due date of the order, if any.",
            "format": "date-time",
            "nullable": true
          },
          "currentDueDate": {
            "type": "string",
            "description": "The current due date of the order, if any.",
            "format": "date-time",
            "nullable": true
          },
          "finishedAt": {
            "type": "string",
            "description": "The date and time the order was finished, if completed successfully.",
            "format": "date-time",
            "nullable": true
          },
          "isDelayed": {
            "type": "boolean",
            "description": "A value indicating whether the order is delayed."
          },
          "delay": {
            "type": "string",
            "description": "How delayed the order is."
          },
          "estimatedCompletion": {
            "$ref": "#/components/schemas/ConsumerOrderDateTimeRange"
          },
          "confidence": {
            "type": "string",
            "description": "The confidence level of the order's status."
          },
          "tracking": {
            "$ref": "#/components/schemas/ConsumerOrderTrackingInfo"
          },
          "history": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConsumerOrderStatusHistoryItem"
            },
            "description": "The history of the order's statuses, if available."
          },
          "upcoming": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConsumerOrderUpcomingStatusItem"
            },
            "description": "The expected upcoming order statuses for the order, if known."
          },
          "notifications": {
            "$ref": "#/components/schemas/ConsumerOrderStatusNotificationsInfo"
          },
          "isDueDateDynamic": {
            "type": "boolean",
            "description": "A value indicating whether the current due date was determined\ndynamically, for example from the current location of a delivery driver.",
            "x-api-version-from": "2019-04"
          },
          "statusReason": {
            "type": "string",
            "description": "The reason for the status of the order, if known.\nIf your client does not understand this status reason, assume that it has no value.",
            "x-api-version-from": "2019-05"
          }
        },
        "description": "Information about the status of an order.",
        "x-api-version-from": "2017-10"
      },
      "ConsumerOrderStatusNotificationsInfo": {
        "type": "object",
        "properties": {
          "providerName": {
            "type": "string",
            "description": "The name of the status updates notification provider, such as PubNub."
          },
          "channelName": {
            "type": "string",
            "description": "The name of the status updates notification channel."
          },
          "channelKey": {
            "type": "string",
            "description": "The key for the status updates notification channel, if any."
          }
        },
        "description": "Status updates notification information for an order.",
        "x-api-version-from": "2018-09"
      },
      "ConsumerOrderTaxItem": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the tax."
          },
          "rate": {
            "type": "number",
            "description": "The tax rate.",
            "format": "double"
          },
          "value": {
            "type": "number",
            "description": "The value of the tax due.",
            "format": "double"
          }
        },
        "description": "A tax item.",
        "x-api-version-from": "2017-10"
      },
      "ConsumerOrderTipItem": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the type of the tip."
          },
          "value": {
            "type": "number",
            "description": "The value of the tip relative to its type, such as the percentage.",
            "format": "double"
          },
          "amount": {
            "type": "number",
            "description": "The cash value of the tip.",
            "format": "double"
          }
        },
        "description": "A tip.",
        "x-api-version-from": "2017-10"
      },
      "ConsumerOrderTotals": {
        "type": "object",
        "properties": {
          "subtotal": {
            "type": "number",
            "description": "The subtotal for the order.",
            "format": "double"
          },
          "accountCredits": {
            "type": "number",
            "description": "The total amount of account credit(s) applied to the order.",
            "format": "double"
          },
          "fees": {
            "type": "number",
            "description": "The total amount of fees applied to the order.",
            "format": "double"
          },
          "discounts": {
            "type": "number",
            "description": "The total amount of discount(s) applied to the order.",
            "format": "double"
          },
          "complimentary": {
            "type": "number",
            "description": "The total amount of promotional credit(s) applied to the order.",
            "format": "double"
          },
          "taxes": {
            "type": "number",
            "description": "The total amount of taxes applied to the order.",
            "format": "double"
          },
          "tips": {
            "type": "number",
            "description": "The total amount of tips applied to the order.",
            "format": "double"
          },
          "vouchers": {
            "type": "number",
            "description": "The total amount of any voucher(s) applied to the order.",
            "format": "double"
          },
          "totalToPay": {
            "type": "number",
            "description": "The total to pay for the order.",
            "format": "double"
          },
          "totalPaid": {
            "type": "number",
            "description": "The total paid for the order, after taking into account credit, vouchers etc.",
            "format": "double"
          }
        },
        "description": "A class containing payment totals.",
        "x-api-version-from": "2017-10"
      },
      "ConsumerOrderTrackingInfo": {
        "type": "object",
        "properties": {
          "providerName": {
            "type": "string",
            "description": "The name of the tracking provider, such as PubNub."
          },
          "channelName": {
            "type": "string",
            "description": "The name of the tracking channel."
          },
          "channelKey": {
            "type": "string",
            "description": "The key for the tracking channel, if any."
          }
        },
        "description": "Tracking information for an order.",
        "x-api-version-from": "2017-10"
      },
      "ConsumerOrderUpcomingStatusItem": {
        "type": "object",
        "properties": {
          "sortOrder": {
            "type": "integer",
            "description": "The sort order of the upcoming status.",
            "format": "int32"
          },
          "value": {
            "type": "string",
            "description": "The upcoming status for the order."
          }
        },
        "description": "Information about an upcoming status an order is expected to reach.",
        "x-api-version-from": "2017-10"
      },
      "LateOrderCompensationRestaurantResolution": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string",
            "description": "The ID of the late order compensation request that this response relates to."
          },
          "isAccepted": {
            "type": "boolean",
            "description": "Flag to indicate whether a compensation request has been accepted or rejected."
          },
          "acceptedAmount": {
            "type": "integer",
            "description": "The monetary amount of compensation granted, in cents/pence. Required when `isAccepted = true`."
          },
          "rejectedReasonCode": {
            "type": "string",
            "enum": [
              "BadTraffic",
              "BadWeather",
              "BusierThanExpected",
              "CompensatedWithItem",
              "NoReason"
            ],
            "description": "\n- `BadTraffic` : The driver was stuck in heavy traffic, sorry.\n- `BadWeather` : The bad weather was delaying our deliveries, sorry.\n- `BusierThanExpected` : Our restaurant was busier than we expected.\n- `CompensatedWithItem` : We gave you something from the menu free of charge to make up for it.\n- `NoReason` : We're really sorry your order was late. We hope you enjoyed your food."
          }
        },
        "example": {
          "orderId": "69rqfxyfze2gjzf5nusdcw",
          "isAccepted": true,
          "acceptedAmount": 500
        }
      },
      "LateOrderRestaurantResponse": {
        "type": "object",
        "properties": {
          "lateOrderStatus": {
            "type": "string",
            "enum": [
              "Preparing",
              "OnItsWay",
              "Delivered"
            ],
            "description": "The updated later order query status"
          },
          "additionalDeliveryTimeToAddMinutes": {
            "type": "integer",
            "description": "The amount of time to add to the current delivery estimate in minutes"
          }
        }
      },
      "late-order-compensation-options": {
        "type": "array",
        "items": {
          "type": "object",
          "$ref": "#/components/schemas/LateOrderCompensationOption"
        }
      },
      "late-order-compensation-query": {
        "type": "object",
        "properties": {
          "restaurantId": {
            "type": "string",
            "description": "Just Eat restaurant identifier"
          },
          "orderId": {
            "type": "string",
            "description": "Just Eat order identifier"
          },
          "tenant": {
            "type": "string",
            "description": "Tenant (Country) of order restaurant."
          },
          "compensationOptions": {
            "description": "List of possible options for compensation",
            "$ref": "#/components/schemas/late-order-compensation-options"
          }
        },
        "example": {
          "RestaurantId": "110230",
          "OrderId": "wiej234idf09i29jijgf4",
          "Tenant": "uk",
          "CompensationOptions": [
            {
              "Amount": 200,
              "IsRecommended": false
            },
            {
              "Amount": 300,
              "IsRecommended": true
            },
            {
              "Amount": 400,
              "IsRecommended": false
            }
          ]
        }
      },
      "late-order-query": {
        "type": "object",
        "properties": {
          "restaurantId": {
            "type": "string",
            "description": "Just Eat restaurant identifier"
          },
          "orderId": {
            "type": "string",
            "description": "Just Eat order identifier"
          },
          "tenant": {
            "type": "string",
            "description": "Tenant (Country) of order restaurant."
          }
        },
        "example": {
          "RestaurantId": "110230",
          "OrderId": "wiej234idf09i29jijgf4",
          "Tenant": "uk"
        }
      },
      "AccountBalanceResponse": {
        "type": "object",
        "properties": {
          "value": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ConsumerCreate": {
        "type": "object",
        "required": [
          "emailAddress",
          "firstName",
          "lastName"
        ],
        "properties": {
          "emailAddress": {
            "description": "The consumer's email address",
            "type": "string",
            "format": "email",
            "maxLength": 160
          },
          "password": {
            "description": "The consumer's password",
            "type": "string",
            "minLength": 4,
            "maxLength": 160
          },
          "firstName": {
            "description": "The consumer's first name",
            "type": "string",
            "maxLength": 160
          },
          "lastName": {
            "description": "The consumer's last name",
            "type": "string",
            "maxLength": 160
          },
          "registrationSource": {
            "enum": [
              "Native",
              "Guest"
            ],
            "type": "string",
            "description": "The registration source of the consumer. Australia and New Zealand only support Guest",
            "default": "Native"
          },
          "marketingPreferences": {
            "$ref": "#/components/schemas/consumerMarketingPreference",
            "description": "The selected marketing preferences for the consumer"
          }
        },
        "example": {
          "emailAddress": "consumer@just-eat.com",
          "password": "Pa55word",
          "firstName": "Bob",
          "lastName": "Smith",
          "registrationSource": "Native"
        }
      },
      "ConsumerCreateResponse": {
        "type": "object",
        "required": [
          "type",
          "token"
        ],
        "properties": {
          "type": {
            "enum": [
              "otac"
            ],
            "type": "string",
            "description": "The type of token. At the moment, this will only ever be a One Time Access Code (OTAC)\n"
          },
          "token": {
            "type": "string",
            "description": "The One Time Access Code (OTAC)"
          }
        },
        "example": {
          "type": "otac",
          "token": "SKgaDl0wZxnwjNgLxBnU646PDTquWLHOyPuyzidIZIg="
        }
      },
      "ConsumerErrorResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "codeText": {
            "type": "string"
          }
        }
      },
      "consumerMarketingPreference": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "channelName": {
              "enum": [
                "Email",
                "Push",
                "Sms"
              ],
              "type": "string",
              "description": "The channel name."
            },
            "isSubscribed": {
              "type": "boolean",
              "description": "Should the channel be subscribed to?"
            },
            "dateUpdated": {
              "type": "string",
              "format": "date-time",
              "description": "The date of the marketing preference change"
            }
          }
        }
      },
      "consumerMarketingPreferencev2": {
        "type": "object",
        "properties": {
          "emailAddress": {
            "type": "string",
            "description": "The email address of the consumer"
          },
          "updates": {
            "description": "Collection of marketing channel subscription updates",
            "$ref": "#/components/schemas/consumerMarketingPreference"
          }
        },
        "example": {
          "emailAddress": "consumer@just-eat.com",
          "updates": [
            {
              "channelName": "Email",
              "isSubscribed": true,
              "dateUpdated": "2020-07-20T15:07:23.000Z"
            }
          ]
        }
      },
      "CurrentUserResponse": {
        "type": "object",
        "properties": {
          "firstName": {
            "description": "The consumer's first name.",
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "description": "The consumer's last name.",
            "type": "string",
            "nullable": true
          },
          "email": {
            "description": "The consumer's email address.",
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "globalUserId": {
            "description": "Global identifier for consumer and tenant.",
            "type": "string",
            "nullable": true
          },
          "accountType": {
            "enum": [
              "Registered",
              "Guest"
            ],
            "type": "string",
            "description": "The account type of the consumer."
          }
        },
        "example": {
          "firstName": "Bob",
          "lastName": "Smith",
          "email": "example@just-eat.com",
          "globalUserId": "8It2lEaJjG82nJtxO00Iab0CoF0=",
          "accountType": "Registered"
        }
      },
      "PasswordResetFlowResponse": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The consumer's email address."
          },
          "globalUserId": {
            "type": "string",
            "description": "Global identifier for consumer and tenant."
          }
        },
        "example": {
          "email": "example@just-eat.com",
          "globalUserId": "8It2lEaJjG82nJtxO00Iab0CoF0="
        }
      },
      "RedeemCommand": {
        "type": "object",
        "properties": {
          "pin": {
            "type": "string"
          }
        }
      },
      "RedeemCommandResponse": {
        "type": "object",
        "properties": {
          "value": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "RedeemPaycodeCommand": {
        "type": "object",
        "properties": {
          "paycode": {
            "type": "string"
          }
        }
      },
      "RedeemPaycodeResponse": {
        "type": "object",
        "properties": {
          "value": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "SearchByConsumerResponse": {
        "type": "object",
        "properties": {
          "cards": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "pan": {
                  "type": "string"
                },
                "amount": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      },
      "UpdatePasswordResetFlowResponse": {
        "type": "object",
        "properties": {
          "accessCode": {
            "type": "string",
            "description": "The One Time Access Code (OTAC)."
          },
          "expiry": {
            "type": "string",
            "description": "The expiry of the OTAC.",
            "format": "date-time",
            "example": "2021-01-20T19:35:13.643Z"
          }
        },
        "example": {
          "accessCode": "8It2lEaJjG82nJtxO00Iab0CoF0=",
          "expiry": "2021-01-20T19:35:13.643Z"
        }
      },
      "CourierFeedbackRequest": {
        "type": "object",
        "required": [
          "isPositiveFeedback"
        ],
        "properties": {
          "isPositiveFeedback": {
            "type": "boolean",
            "description": "A flag to determine if the feedback is overall positive"
          },
          "reasons": {
            "type": "array",
            "description": "A list of reasons describing the feedback",
            "nullable": false,
            "items": {
              "type": "string"
            }
          },
          "additionalComment": {
            "type": "string",
            "description": "An additional free form comment accompanying the feedback",
            "nullable": true,
            "maxLength": 210
          }
        },
        "example": {
          "isPositiveFeedback": true,
          "reasons": [
            "had thermal bag",
            "friendly"
          ],
          "additionalComment": "Went above and beyond"
        }
      },
      "400CourierSyncErrorResponse": {
        "type": "object",
        "description": "The error object returned when an operation fails",
        "properties": {
          "error": {
            "description": "Error Title",
            "type": "string",
            "example": "Invalid Request"
          },
          "message": {
            "description": "Error Message Text",
            "type": "string",
            "example": "Invalid Request"
          }
        }
      },
      "401CourierSyncErrorResponse": {
        "type": "object",
        "description": "The error object returned when an operation fails",
        "properties": {
          "error": {
            "description": "Error Title",
            "type": "string",
            "example": "Unauthorized Request"
          },
          "message": {
            "description": "Error Message Text",
            "type": "string",
            "example": "Unauthorized Request"
          }
        }
      },
      "404CourierSyncErrorResponse": {
        "type": "object",
        "description": "The error object returned when an operation fails",
        "properties": {
          "error": {
            "description": "Error Title",
            "type": "string",
            "example": "Courier Sync not found"
          },
          "message": {
            "description": "Error Message Text",
            "type": "string",
            "example": "Courier Sync not found"
          }
        }
      },
      "500CourierSyncErrorResponse": {
        "type": "object",
        "description": "The error object returned when an operation fails",
        "properties": {
          "error": {
            "description": "Error Title",
            "type": "string",
            "example": "Internal Server Error"
          },
          "message": {
            "description": "Error Message Text",
            "type": "string",
            "example": "Internal Server Error"
          }
        }
      },
      "Address": {
        "type": "object",
        "description": "Address information.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Site's institution name or commercial name.",
            "example": "Clinic Hospital"
          },
          "address1": {
            "type": "string",
            "description": "Site's complete street address",
            "example": "121 17 Ave SW #405"
          },
          "city": {
            "type": "string",
            "description": "City's name",
            "example": "Calgary"
          },
          "province": {
            "type": "string",
            "description": "Province's name",
            "example": "Alberta"
          },
          "latitude": {
            "type": "number",
            "format": "double",
            "description": "The address latitude coordinate.",
            "example": 51.048615
          },
          "longitude": {
            "type": "number",
            "format": "double",
            "description": "The address longitude coordinate.",
            "example": -114.070847
          },
          "specialInstructions": {
            "type": "string",
            "description": "Special instructions for delivery",
            "example": "Contactless Delivery Please"
          },
          "phone": {
            "type": "string",
            "description": "Customer's phone number",
            "example": "+1 (222) 2222-2222"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal code.",
            "example": "T0R 0X1"
          },
          "useLatLongAddress": {
            "type": "boolean",
            "description": "When enabled use latitude and longitude address."
          }
        }
      },
      "BonusSummary": {
        "type": "object",
        "description": "The zone profile object for a given delivery zone.",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/BonusType",
            "description": "Types of bonuses that may be granted to the courier."
          },
          "value": {
            "type": "number",
            "format": "integer",
            "description": "Bonus value"
          }
        }
      },
      "BonusType": {
        "type": "string",
        "description": "Types of bonuses that may be granted to the courier. <p>TOP_UP_PROMOTION - In order to calculate top up promotion skip has a database table containing required acceptance rate and top up value for each existing delivery zone, when the courier's order acceptance rate is greater than the required acceptance rate and the total value is lower than top up value for that given delivery zone, the courier will be granted the difference between the top up value and total order value, know as top up promotion.</p>",
        "enum": [
          "TOP_UP_PROMOTION"
        ]
      },
      "CheckedInState": {
        "type": "string",
        "description": "The state of a courier on a shift. A courier might be checked in or not.",
        "enum": [
          "CHECKED_IN",
          "NOT_CHECKED_IN"
        ]
      },
      "CourierStatus": {
        "type": "string",
        "description": "The courier application status. A courier could have one of these status associated with their application, here is a brief example of each status. <p>`ON-BOARDING` - Courier is actively trying to be on-boarded and will progress through the courier on-boarding program</p><p>`STALLED` - Courier has not proceeded with a step inside the courier on-boarding program for 14 days and will not to proceed further</p><p>`SURPLUS` - Zone has been closed for On-boarding; courier cannot proceed until zone on-boarding re-opens</p><p>`ACTIVE` - Courier has interacted with the app within the last two weeks and will be automatically scheduled based on their availability, receive notifications and may complete orders</p><p>`INACTIVE` - Courier has not interacted with the app for at least two weeks, and will not be scheduled for shifts. May interact with the app to convert their status to active, and be eligible for shifts and deliveries</p><p>`RELIABILITY_ISSUES` - No longer in use, historically account was suspended due to frequent flakes or rejected orders</p><p>`VEHICLE_ISSUES` - Account suspended due to reported vehicle problems, but may reactivate by contacting courier support</p><p>`INCIDENT_ISSUES` - Account suspended indefinitely due to significant concern (used exclusively by Incidents team)</p><p>`OTHER_ACCOUNT_ISSUES` - General account suspension, usually in connection with problems not categorised under regular courier status</p><p>`EXPIRED_DOCUMENTS` - General account suspension, typically for expired right to work documentation</p><p>`REJECTED` - Applicant did not meet minimum requirements for access to the network</p><p>`WITHDRAWN` - Applicant decided not to proceed with onboarding</p><p>`BANNED` - Courier’s access to the network was revoked following escalation</p><p>`LEFT_NETWORK` - Courier voluntarily left the network</p>",
        "enum": [
          "ONBOARDING",
          "STALLED",
          "SURPLUS",
          "ACTIVE",
          "INACTIVE",
          "RELIABILITY_ISSUES",
          "VEHICLE_ISSUES",
          "INCIDENT_ISSUES",
          "OTHER_ACCOUNT_ISSUES",
          "EXPIRED_DOCUMENTS",
          "REJECTED",
          "WITHDRAWN",
          "BANNED",
          "LEFT_NETWORK"
        ]
      },
      "CourierSync": {
        "type": "object",
        "description": "The courier sync payload holds the updated values for deliveries, personal information, location and shifts associated with a particular courier.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the courier in which the updated sync payload was requested for.",
            "example": "John Doe"
          },
          "firstName": {
            "type": "string",
            "description": "First name of the courier in which the updated sync payload was requested for.",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the courier in which the updated sync payload was requested for.",
            "example": "Doe"
          },
          "timezone": {
            "type": "string",
            "description": "Time zone in which the courier shift was started.",
            "example": "GMT-6"
          },
          "jobs": {
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "description": "The list of jobs assigned to the courier.",
            "items": {
              "$ref": "#/components/schemas/JobDetails"
            }
          },
          "remainingJobs": {
            "type": "number",
            "format": "integer",
            "description": "Amount of remaining jobs assignable to the courier.",
            "example": 2
          },
          "timestamp": {
            "type": "number",
            "format": "long",
            "description": "Current timestamp for the courier sync updated payload.",
            "example": 1593444834
          },
          "orderAcceptanceTimes": {
            "$ref": "#/components/schemas/OrderAcceptanceTimes",
            "description": "The acceptance times used to present the offer to the courier."
          },
          "shift": {
            "$ref": "#/components/schemas/Shift",
            "description": "The shift details in which the courier is signed up for."
          },
          "localSaveSeconds": {
            "type": "number",
            "format": "integer",
            "description": "Static value with the amount of seconds the application is supposed to save a fresh courier location. The logic implemented expects the application to save a new location when the elapsed seconds is greater equal than local send seconds.",
            "example": 5
          },
          "serverSendSeconds": {
            "type": "number",
            "format": "integer",
            "description": "Static value with the amount of seconds the application is supposed to send a fresh location to the server. The logic implemented expects the application to send a new location to the server when the elapsed seconds is greater equal than server send seconds.",
            "example": 60
          },
          "serverGateMeters": {
            "type": "number",
            "format": "integer",
            "description": "Static value with the distance in meters the application is supposed to send a fresh location to the server. The logic implemented expects the application to send a new location to the server when the distance to the previous location is greater equal than server gate meters.",
            "example": 0
          },
          "checkedInState": {
            "$ref": "#/components/schemas/CheckedInState",
            "description": "The state of a courier on a shift. A courier might be checked in or not."
          },
          "status": {
            "$ref": "#/components/schemas/CourierStatus",
            "description": "The courier application status."
          },
          "earlyCheckoutAvailable": {
            "type": "boolean",
            "description": "The possibility of an early checkout of the shift is available when true."
          },
          "isLiveFlexStatesAvailable": {
            "type": "boolean",
            "description": "The live flex states are enabled when true."
          },
          "doNotUseStatus": {
            "$ref": "#/components/schemas/DoNotUseStatus",
            "description": "The courier usability status."
          },
          "flexStateForAssignedZones": {
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "description": "List of flex state types for each delivery zone the courier is currently on a delivery process or have already delivered orders.",
            "items": {
              "$ref": "#/components/schemas/CourierZoneFlexState"
            }
          },
          "topUpPromotion": {
            "$ref": "#/components/schemas/TopUpPromotion",
            "description": "Calculated top up promotion settings for the courier."
          },
          "cancelledOrderSummaries": {
            "type": "array",
            "minItems": 1,
            "maxItems": 1,
            "description": "List with a summary of all the cancelled orders associated with the courier.",
            "items": {
              "$ref": "#/components/schemas/OrderCancelled"
            }
          },
          "totalDeliveries": {
            "type": "number",
            "format": "integer",
            "description": "Number of deliveries completed by the courier.",
            "example": 11
          }
        }
      },
      "CourierZoneFlexState": {
        "type": "object",
        "description": "The courier zone flex state object, contains the flex state type and the flex availability status for a given delivery zone.",
        "properties": {
          "deliveryZoneId": {
            "type": "string",
            "description": "Delivery zone identifier for flex state.",
            "example": "53c3afb5-fcs5-4941-be6d-2179f812sc8d"
          },
          "deliveryZoneName": {
            "type": "string",
            "description": "Delivery zone name for flex state.",
            "example": "Winnipeg SW"
          },
          "flexStateType": {
            "$ref": "#/components/schemas/SyncFlexStateType",
            "description": "<p>The flex state type changes according to the exponential moving average and is used as a reference to bring more couriers to suffice the demand in a given delivery zone.</p> <p>If the flex state type is \"Off\", it means no shifts will be offered for the delivery zone.</p> <p>If the state is \"CLOSED\", only scheduled shifts will be allowed for the delivery zone.</p> <p>If the state is \"SEEKING\", the shift offers are going to be made across the courier network in order to suffice the current demand.</p> <p>If the state is \"OPEN\", it means demand is high and couriers from all over the courier network are allowed to create shifts for themselves to suffice the current demand.</p> <p>If the state is \"CODE_RED\", it means not only can everyone create shifts for themselves for the delivery zone but also couriers from other delivery zones might reallocate to help suffice the demand of that particular delivery zone.</p>"
          },
          "flexAvailable": {
            "type": "boolean",
            "description": "Flex states are enabled when true"
          }
        }
      },
      "DoNotUseStatus": {
        "type": "string",
        "description": "The usability status of a courier",
        "enum": [
          "IN_USE",
          "NOT_IN_USE",
          "UNRESPONSIVE",
          "PAUSE_ORDERS",
          "CANCELLATION"
        ]
      },
      "Fees": {
        "type": "object",
        "description": "The calculated courier payment components.",
        "properties": {
          "tip": {
            "type": "number",
            "format": "integer",
            "description": "Tip the courier might get from customers when an order is placed",
            "example": 180
          },
          "deliveryFee": {
            "type": "number",
            "format": "integer",
            "description": "Delivery fee paid by the customer",
            "example": 500
          },
          "subsidy": {
            "type": "number",
            "format": "integer",
            "description": "Skip subsidy paid to courier",
            "example": 90
          },
          "driveScoreSubsidy": {
            "type": "number",
            "format": "integer",
            "description": "Drive score subsidy paid to courier",
            "example": 200
          },
          "reimbursements": {
            "type": "number",
            "format": "integer",
            "description": "Reimbursements paid to courier. This might occur in the event of an order cancellation, order other refundable reasons.",
            "example": 100
          },
          "jobPay": {
            "type": "number",
            "format": "integer",
            "description": "Job pay is the sum of the pay components subsidy, drive score subsidy and delivery fee.",
            "example": 100
          },
          "bonuses": {
            "description": "List of bonuses that may be granted to the courier under specific situations.",
            "minItems": 1,
            "maxItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BonusSummary"
            }
          }
        }
      },
      "JobDetails": {
        "type": "object",
        "description": "The details of a job which may be assigned to a courier for delivery.",
        "properties": {
          "courierId": {
            "type": "string",
            "description": "Courier identifier for the job details",
            "example": "61376a78-12e1-4f11-bba2-2097a65s2d75"
          },
          "jobType": {
            "$ref": "#/components/schemas/JobType",
            "description": "The job type classifies the type of job assigned to the courier. When an order is placed by the customer, two jobs are created for the courier, a collect job and a deliver job, basically the courier have to complete both jobs, first the collect job, which is the one where the order is collected from the restaurant, finally the deliver job as the job of delivering the order to the customer."
          },
          "deliveryId": {
            "type": "string",
            "description": "Delivery identifier for the job.",
            "example": "61376a78-12e1-4f11-bba2-2097a65s2d75"
          },
          "orderNumber": {
            "type": "string",
            "description": "Incrementing number generated for each particular order.",
            "example": "10113045"
          },
          "time": {
            "type": "number",
            "format": "long",
            "description": "Job creation time stamp.",
            "example": 1593444834
          },
          "amount": {
            "type": "number",
            "format": "integer",
            "description": "The courier's balance regarding the job. When cash orders happen usually the courier pays out of his pocket, that would add credit to him until he's paid in full.",
            "example": 0
          },
          "paymentType": {
            "$ref": "#/components/schemas/SyncPaymentType",
            "description": "The order payment status associated with the job."
          },
          "destination": {
            "$ref": "#/components/schemas/Address",
            "description": "The job address complete information."
          },
          "restaurantName": {
            "type": "string",
            "description": "Restaurant's name.",
            "example": "MacDonalds"
          },
          "fees": {
            "$ref": "#/components/schemas/Fees",
            "description": "The calculated components of the courier payment for the job."
          },
          "status": {
            "$ref": "#/components/schemas/JobStatus",
            "description": "All the possible job status that might occur during a delivery process."
          },
          "alcoholDelivery": {
            "type": "boolean",
            "description": "The order contains alcoholic products when true."
          },
          "distance": {
            "type": "number",
            "format": "integer",
            "description": "The distance between the courier location and the job destination."
          },
          "groceryDelivery": {
            "type": "boolean",
            "description": "The order contains grocery delivery when true."
          }
        }
      },
      "JobStatus": {
        "type": "string",
        "description": "All possible job status during a delivery process.",
        "enum": [
          "UNASSIGNED",
          "ASSIGNED_PENDING_ACCEPTED",
          "ASSIGNED",
          "ACCEPTED",
          "PARKING",
          "ARRIVED",
          "ENTERED",
          "COMPLETED"
        ]
      },
      "JobType": {
        "type": "string",
        "description": "The job type classifies the type of job assigned to the courier. When an order is placed by the customer, two jobs are created for the courier, a collect job and a deliver job, basically the courier have to complete both jobs, first the collect job, which is the one where the order is collected from the restaurant and the deliver job as the job of delivering the order to the customer.",
        "enum": [
          "COLLECT",
          "DELIVER"
        ]
      },
      "OrderAcceptanceTimes": {
        "type": "object",
        "description": "The acceptance times used to present the offer to the courier.",
        "properties": {
          "currentSystemTimestamp": {
            "type": "number",
            "format": "integer",
            "description": "The time the delivery offer was made to the courier.",
            "example": 1593444834
          },
          "viewedTimestamp": {
            "type": "number",
            "format": "integer",
            "description": "The time the delivery offer was viewed by the courier",
            "example": 1593444834
          },
          "expirationTimestamp": {
            "type": "number",
            "format": "integer",
            "description": "The time when the offer to the courier will expire. Usually the courier has 60 seconds to accept a new offer.",
            "example": 1593444834
          }
        }
      },
      "OrderCancelled": {
        "type": "object",
        "description": "The order cancelled object holds the details of a cancelled order.",
        "properties": {
          "courierId": {
            "type": "string",
            "description": "Courier identifier for the cancelled order.",
            "example": "53c3afb5-fcs5-4941-be6d-2179f812sc8d"
          },
          "deliveryId": {
            "type": "string",
            "description": "Deliver identifier for the cancelled order.",
            "example": "53c3afb5-fcs5-4941-be6d-2179f812sc8d"
          },
          "orderNumber": {
            "type": "string",
            "description": "Order number for the cancelled order.",
            "example": "10113445"
          },
          "cancellationTime": {
            "type": "number",
            "format": "integer",
            "description": "Current timestamp for the cancelled order.",
            "example": 1593444834
          },
          "isAlcoholDelivery": {
            "type": "boolean",
            "description": "The cancelled order contains alcoholic products when true."
          },
          "isCashPayment": {
            "type": "boolean",
            "description": "The cancelled order was cash payment when true."
          },
          "restaurantName": {
            "type": "string",
            "description": "Restaurant name for the cancelled order.",
            "example": "MacDonalds"
          },
          "collectJobStatus": {
            "$ref": "#/components/schemas/JobStatus",
            "description": "The collect job status for the cancelled order."
          }
        }
      },
      "Shift": {
        "type": "object",
        "description": "The shift object associated with a courier on a courier sync payload update.",
        "properties": {
          "startDate": {
            "type": "number",
            "format": "integer",
            "description": "Timestamp for when the shift was started."
          },
          "endDate": {
            "type": "number",
            "format": "integer",
            "description": "Timestamp for when the shift was ended."
          },
          "shiftType": {
            "$ref": "#/components/schemas/ShiftType",
            "description": "Type of shift the courier is on"
          },
          "deliveryZoneId": {
            "type": "string",
            "description": "Delivery zone id the shift was created for.",
            "example": "53c3afb5-fcs5-4941-be6d-2179f812sc8d"
          },
          "vehicle": {
            "$ref": "#/components/schemas/Vehicle",
            "description": "Type of vehicle on shift"
          },
          "id": {
            "type": "string",
            "description": "Shift identifier.",
            "example": "53c3afb5-fcs5-4941-be6d-2179f812sc8d"
          }
        }
      },
      "ShiftType": {
        "type": "string",
        "description": "The types of shifts available for the couriers.",
        "enum": [
          "REGULAR",
          "ON_CALL",
          "OVERFLOW",
          "ALCOHOL_ELIGIBLE",
          "UNKNOWN"
        ]
      },
      "SyncFlexStateType": {
        "type": "string",
        "description": "<p>The flex state type changes according to the exponential moving average and is used as a reference to bring more couriers to suffice the demand in a given delivery zone.</p> <p>If the flex state type is \"Off\", it means no shifts will be offered for the delivery zone.</p> <p>If the state is \"CLOSED\", only scheduled shifts will be allowed for the delivery zone.</p> <p>If the state is \"SEEKING\", the shift offers are going to be made across the courier network in order to suffice the current demand.</p> <p>If the state is \"OPEN\", it means demand is high and couriers from all over the courier network are allowed to create shifts for themselves to suffice the current demand.</p> <p>If the state is \"CODE_RED\", it means not only can everyone create shifts for themselves for the delivery zone but also couriers from other delivery zones might reallocate to help suffice the demand of that particular delivery zone.</p>",
        "enum": [
          "CODE_RED",
          "OPEN",
          "SEEKING",
          "CLOSED"
        ]
      },
      "SyncPaymentType": {
        "type": "string",
        "description": "The order payment status.",
        "enum": [
          "PAID",
          "UNPAID"
        ]
      },
      "TopUpPromotion": {
        "type": "object",
        "description": "The zone profile object for a given delivery zone.",
        "properties": {
          "showAcceptanceRate": {
            "type": "boolean",
            "description": "Enables showing the courier acceptance rate when true"
          },
          "currentAcceptanceRate": {
            "type": "number",
            "format": "integer",
            "description": "The current order acceptance rate calculated for the courier.",
            "example": 9500
          },
          "requiredAcceptanceRate": {
            "type": "number",
            "format": "integer",
            "description": "The required acceptance rate the courier should have to be eligible for top up bonus subsidy.",
            "example": 8000
          }
        }
      },
      "Vehicle": {
        "type": "string",
        "description": "All The types of vehicle available.",
        "enum": [
          "CAR",
          "BICYCLE",
          "TRICYCLE",
          "VAN",
          "TRUCK"
        ]
      },
      "CustomerOrderDetailsErrorResponse": {
        "type": "object",
        "description": "The error object returned when an operation fails",
        "properties": {
          "ErrorType": {
            "description": "Value of the error thrown",
            "$ref": "#/components/schemas/CustomerOrderDetailsErrorType"
          },
          "Message": {
            "description": "Detailed message on the error thrown",
            "type": "string"
          },
          "Exceptions": {
            "description": "List of exceptions thrown during the request",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "ErrorType": "OrderTimeNotFound",
          "Message": "Order Time not found for Basket example-basket-id",
          "Exceptions": []
        }
      },
      "CustomerOrderDetailsErrorType": {
        "type": "string",
        "enum": [
          "None",
          "Unknown",
          "OrderTimeNotFound",
          "OrderAddressNotFound",
          "BasketNotFound",
          "AvailabilityNotFound",
          "Unauthorized",
          "UpdateOrderAddressError",
          "UpdateOrderTimeError",
          "DependencyError",
          "InvalidZipcode",
          "InvalidMenuId"
        ]
      },
      "OrderAddressSuccessResponse": {
        "type": "object",
        "description": "The response object after successfully updating an order address.",
        "properties": {
          "address": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": false,
            "description": "An array of strings containing lines of the customer's order address."
          },
          "city": {
            "type": "string",
            "nullable": false,
            "description": "String value containing the city name of the customer's order address."
          },
          "postCode": {
            "type": "string",
            "nullable": false,
            "description": "String value containing the postcode of the customer's order address."
          },
          "geoPosition": {
            "description": "Geoposition object containing latitude and longitude values for the customer's order address",
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderGeoPosition"
              }
            ],
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": false,
            "description": "The customer's name."
          },
          "email": {
            "type": "string",
            "nullable": false,
            "description": "The customer's email address."
          },
          "phoneNumber": {
            "type": "string",
            "nullable": false,
            "description": "The customer's phone number."
          },
          "polygonName": {
            "type": "string",
            "nullable": false,
            "description": "String value containing the polygon name of customer's order address (in tenants with no polygon name, will be the same as postcode)."
          },
          "serviceType": {
            "description": "Service Type associated with the order details.",
            "type": "string",
            "enum": [
              "delivery",
              "collection"
            ],
            "nullable": false
          }
        },
        "example": {
          "address": [
            "123 Wye Avenue, Eaton"
          ],
          "city": "Bristol",
          "postCode": "BS1 1AA",
          "geoPosition": {
            "latitude": 456.123,
            "longitude": 123.456
          },
          "orderable": true,
          "name": "J.E.Hungerton",
          "email": "user@email.com",
          "phoneNumber": "0123456789",
          "polygonName": "BS1 1AA",
          "serviceType": "delivery"
        }
      },
      "OrderGeoPosition": {
        "type": "object",
        "description": "Geoposition object containing latitude and longitude values.",
        "properties": {
          "latitude": {
            "type": "number",
            "format": "decimal",
            "description": "The latitude value of the customer's Geoposition."
          },
          "longitude": {
            "type": "number",
            "format": "decimal",
            "description": "The longitude value of the customer's Geoposition."
          }
        }
      },
      "OrderTimeSuccessResponse": {
        "type": "object",
        "description": "The response object for successful updates to order time.",
        "properties": {
          "dateTime": {
            "type": "string",
            "nullable": false,
            "description": "The time the customer has requested their order for."
          },
          "utcOrderTime": {
            "type": "string",
            "nullable": false,
            "description": "The time (in UTC) the customer has requested their order for"
          },
          "orderable": {
            "type": "boolean",
            "nullable": false,
            "description": "Boolean value indicating whether the current basket is orderable."
          },
          "asap": {
            "type": "boolean",
            "nullable": false,
            "description": "True if the user has selected as soon as possible on the order, else false"
          }
        },
        "example": {
          "dateTime": "2020-02-05T16:26:30+0000",
          "utcOrderTime": "2020-02-05T16:26:30+0000",
          "orderable": true,
          "asap": true
        }
      },
      "UpdateOrderAddressRequest": {
        "type": "object",
        "description": "The request object for setting the order address of a basket.",
        "properties": {
          "address": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": false,
            "description": "An array of strings containing lines of the customer's order address."
          },
          "postCode": {
            "type": "string",
            "nullable": false,
            "description": "String value containing the postcode of the customer's order address."
          },
          "city": {
            "type": "string",
            "nullable": false,
            "description": "String value containing the city name of the customer's order address."
          },
          "geoPosition": {
            "description": "Geoposition object containing latitude and longitude values for the customer's order address",
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderGeoPosition"
              }
            ],
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": false,
            "description": "The customer's email address."
          },
          "name": {
            "type": "string",
            "nullable": false,
            "description": "The customer's name."
          },
          "phoneNumber": {
            "type": "string",
            "nullable": false,
            "description": "The customer's phone number."
          },
          "polygonName": {
            "type": "string",
            "nullable": false,
            "description": "String value containing the polygon name of customer's order address (in tenants with no polygon name, will be the same as postcode)."
          },
          "serviceType": {
            "description": "Service Type associated with the order details.",
            "type": "string",
            "enum": [
              "delivery",
              "collection"
            ],
            "nullable": false
          }
        },
        "required": [
          "address",
          "city",
          "postCode",
          "orderable",
          "email",
          "phoneNumber",
          "geoPosition",
          "polygonName"
        ],
        "example": {
          "address": [
            "123 Wye Avenue, Eaton"
          ],
          "city": "Bristol",
          "postCode": "BS1 1AA",
          "geoPosition": {
            "latitude": 456.123,
            "longitude": 123.456
          },
          "orderable": true,
          "name": "J.E.Hungerton",
          "email": "user@email.com",
          "phoneNumber": "0123456789",
          "polygonName": "BS1 1AA",
          "serviceType": "delivery"
        }
      },
      "UpdateOrderTimeRequest": {
        "type": "object",
        "description": "The request object for setting the order time for a basket.",
        "properties": {
          "dateTime": {
            "type": "string",
            "nullable": false,
            "description": "The order time to set for the basket."
          },
          "asap": {
            "type": "boolean",
            "nullable": false,
            "description": "True if the user has selected as soon as possible on the order, else false"
          },
          "menuId": {
            "type": "string",
            "nullable": false,
            "description": "The menu id that orderability of a basket is calculated against"
          }
        },
        "required": [
          "dateTime",
          "asap",
          "menuId"
        ],
        "example": {
          "dateTime": "2020-02-05T16:26:30+0000",
          "asap": true,
          "menuId": "12345"
        }
      },
      "create-delivery-pool": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the pool, used by operations teams, in reports, etc."
          },
          "restaurants": {
            "description": "A list of Just Eat restaurant ids served by the delivery pool.",
            "type": "array",
            "items": {
              "type": "number",
              "format": "int32"
            }
          }
        },
        "required": [
          "name"
        ],
        "example": {
          "name": "Toronto - West",
          "restaurants": [
            123,
            456
          ]
        }
      },
      "delivery-pool-hours": {
        "type": "object",
        "properties": {
          "monday": {
            "type": "object",
            "properties": {
              "closed": {
                "type": "boolean",
                "description": "true if the pool is closed for the day"
              },
              "poolTimes": {
                "type": "array",
                "description": "pool start and end times for the day",
                "items": {
                  "type": "object",
                  "properties": {
                    "startTime": {
                      "type": "string",
                      "description": "pool start time for Monday (HH:mm)"
                    },
                    "endTime": {
                      "type": "string",
                      "description": "pool end time for Monday (HH:mm)"
                    }
                  },
                  "required": [
                    "startTime",
                    "endTime"
                  ]
                }
              }
            },
            "required": [
              "poolTimes"
            ]
          },
          "tuesday": {
            "type": "object",
            "properties": {
              "closed": {
                "type": "boolean",
                "description": "true if the pool is closed for the day"
              },
              "poolTimes": {
                "type": "array",
                "description": "pool start and end times for the day",
                "items": {
                  "type": "object",
                  "properties": {
                    "startTime": {
                      "type": "string",
                      "description": "pool start time for Tuesday (HH:mm)"
                    },
                    "endTime": {
                      "type": "string",
                      "description": "pool end time for Tuesday (HH:mm)"
                    }
                  },
                  "required": [
                    "startTime",
                    "endTime"
                  ]
                }
              }
            },
            "required": [
              "poolTimes"
            ]
          },
          "wednesday": {
            "type": "object",
            "properties": {
              "closed": {
                "type": "boolean",
                "description": "true if the pool is closed for the day"
              },
              "poolTimes": {
                "type": "array",
                "description": "pool start and end times for the day",
                "items": {
                  "type": "object",
                  "properties": {
                    "startTime": {
                      "type": "string",
                      "description": "pool start time for Wednesday (HH:mm)"
                    },
                    "endTime": {
                      "type": "string",
                      "description": "pool end time for Wednesday (HH:mm)"
                    }
                  },
                  "required": [
                    "startTime",
                    "endTime"
                  ]
                }
              }
            },
            "required": [
              "poolTimes"
            ]
          },
          "thursday": {
            "type": "object",
            "properties": {
              "closed": {
                "type": "boolean",
                "description": "true if the pool is closed for the day"
              },
              "poolTimes": {
                "type": "array",
                "description": "pool start and end times for the day",
                "items": {
                  "type": "object",
                  "properties": {
                    "startTime": {
                      "type": "string",
                      "description": "pool start time for Thursday (HH:mm)"
                    },
                    "endTime": {
                      "type": "string",
                      "description": "pool end time for Thursday (HH:mm)"
                    }
                  },
                  "required": [
                    "startTime",
                    "endTime"
                  ]
                }
              }
            },
            "required": [
              "poolTimes"
            ]
          },
          "friday": {
            "type": "object",
            "properties": {
              "closed": {
                "type": "boolean",
                "description": "true if the pool is closed for the day"
              },
              "poolTimes": {
                "type": "array",
                "description": "pool start and end times for the day",
                "items": {
                  "type": "object",
                  "properties": {
                    "startTime": {
                      "type": "string",
                      "description": "pool start time for Friday (HH:mm)"
                    },
                    "endTime": {
                      "type": "string",
                      "description": "pool end time for Friday (HH:mm)"
                    }
                  },
                  "required": [
                    "startTime",
                    "endTime"
                  ]
                }
              }
            },
            "required": [
              "poolTimes"
            ]
          },
          "saturday": {
            "type": "object",
            "properties": {
              "closed": {
                "type": "boolean",
                "description": "true if the pool is closed for the day"
              },
              "poolTimes": {
                "type": "array",
                "description": "pool start and end times for the day",
                "items": {
                  "type": "object",
                  "properties": {
                    "startTime": {
                      "type": "string",
                      "description": "pool start time for Saturday (HH:mm)"
                    },
                    "endTime": {
                      "type": "string",
                      "description": "pool end time for Saturday (HH:mm)"
                    }
                  },
                  "required": [
                    "startTime",
                    "endTime"
                  ]
                }
              }
            },
            "required": [
              "poolTimes"
            ]
          },
          "sunday": {
            "type": "object",
            "properties": {
              "closed": {
                "type": "boolean",
                "description": "true if the pool is closed for the day"
              },
              "poolTimes": {
                "type": "array",
                "description": "pool start and end times for the day",
                "items": {
                  "type": "object",
                  "properties": {
                    "startTime": {
                      "type": "string",
                      "description": "pool start time for Sunday (HH:mm)"
                    },
                    "endTime": {
                      "type": "string",
                      "description": "pool end time for Sunday (HH:mm)"
                    }
                  },
                  "required": [
                    "startTime",
                    "endTime"
                  ]
                }
              }
            },
            "required": [
              "poolTimes"
            ]
          }
        },
        "required": [
          "monday",
          "tuesday",
          "wednesday",
          "thursday",
          "friday",
          "saturday",
          "sunday"
        ],
        "example": {
          "monday": {
            "closed": false,
            "poolTimes": [
              {
                "startTime": "09:00",
                "endTime": "21:00"
              }
            ]
          },
          "tuesday": {
            "closed": true,
            "poolTimes": [
              {
                "startTime": "10:00",
                "endTime": "19:00"
              }
            ]
          },
          "wednesday": {
            "closed": false,
            "poolTimes": [
              {
                "startTime": "08:00",
                "endTime": "18:00"
              }
            ]
          },
          "thursday": {
            "closed": false,
            "poolTimes": [
              {
                "startTime": "12:00",
                "endTime": "03:00"
              }
            ]
          },
          "friday": {
            "closed": false,
            "poolTimes": [
              {
                "startTime": "12:00",
                "endTime": "01:00"
              }
            ]
          },
          "saturday": {
            "closed": false,
            "poolTimes": [
              {
                "startTime": "11:00",
                "endTime": "23:00"
              }
            ]
          },
          "sunday": {
            "closed": false,
            "poolTimes": [
              {
                "startTime": "13:00",
                "endTime": "19:00"
              }
            ]
          }
        }
      },
      "delivery-pool": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the pool, used by operations teams, in reports, etc."
          },
          "restaurants": {
            "description": "A list of Just Eat restaurant ids served by the delivery pool.",
            "type": "array",
            "items": {
              "type": "number",
              "format": "int32"
            }
          }
        },
        "example": {
          "name": "Toronto - West",
          "restaurants": [
            123,
            456
          ]
        }
      },
      "estimated-time": {
        "type": "object",
        "properties": {
          "bestGuess": {
            "type": "string",
            "description": "Your best estimation (hh:mm:ss)"
          }
        },
        "example": {
          "bestGuess": "00:35:00"
        }
      },
      "patch-delivery-pool": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the pool, used by operations teams, in reports, etc."
          },
          "restaurants": {
            "description": "A list of Just Eat restaurant ids served by the delivery pool.",
            "type": "array",
            "items": {
              "type": "number",
              "format": "int32"
            }
          }
        },
        "example": {
          "name": "Toronto - North"
        }
      },
      "bulk-delivery-details-list": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/bulk-delivery-details"
        }
      },
      "bulk-delivery-details": {
        "type": "object",
        "properties": {
          "OrderId": {
            "description": "Just Eat order identifier",
            "type": "string"
          },
          "EtaAtDeliveryAddress": {
            "description": "This should represent the delivery partner's best guess at when the driver will arrive at the delivery address.",
            "format": "date-time",
            "type": "string",
            "example": "2020-12-25T16:45:28.7537228+00:00"
          },
          "EtaAtRestaurant": {
            "description": "This should represent the delivery partner's best guess at when the driver will arrive at the restaurant.",
            "format": "date-time",
            "type": "string",
            "example": "2020-12-25T16:30:28.7537228+00:00"
          },
          "Location": {
            "$ref": "#/components/schemas/location"
          },
          "TimeStampWithUtcOffset": {
            "description": "This should represent the bulk delivery updated timestamp.",
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "delivery-abort-with-reason": {
        "type": "object",
        "properties": {
          "reason": {
            "description": "The detailed Just Eat delivery partner cancellation reason code",
            "type": "string",
            "enum": [
              "cancelled_by_requester",
              "package_not_available",
              "restaurant_closed",
              "package_damaged",
              "address_error",
              "driver_problem",
              "could_not_reach_customer",
              "technical_problem",
              "incorrect_package",
              "other"
            ],
            "example": "incorrect_package"
          },
          "deliveryPartnerReasonCode": {
            "description": "The original reason code from the delivery partner",
            "format": "string",
            "type": "string",
            "example": "package_damaged"
          }
        },
        "example": {
          "reason": "driver_problem",
          "deliveryPartnerReasonCode": "courier_issue"
        }
      },
      "delivery-details": {
        "type": "object",
        "properties": {
          "Location": {
            "$ref": "#/components/schemas/location"
          },
          "TimeStampWithUtcOffset": {
            "format": "date-time",
            "type": "string",
            "description": "This should represent the delivery detailed updated timestamp."
          }
        },
        "example": {
          "TimeStampWithUtcOffset": "2018-03-10T14:45:28.7537228+00:00"
        }
      },
      "delivery-driver-assigned-details": {
        "type": "object",
        "properties": {
          "DriverName": {
            "description": "This should represent the driver's name.",
            "type": "string",
            "example": "David"
          },
          "DriverContactNumber": {
            "description": "This should represent the driver's contact number.",
            "type": "string",
            "example": "07123456789"
          },
          "VehicleDetails": {
            "$ref": "#/components/schemas/vehicle-details"
          },
          "EtaAtRestaurant": {
            "description": "This should represent the delivery partner's best guess at when the driver will arrive at the restaurant. In other words, it should not just contain the pick-up time initially requested by Just Eat.",
            "format": "date-time",
            "type": "string",
            "example": "2020-12-25T15:30:28.7537228+00:00"
          },
          "EtaAtDeliveryAddress": {
            "description": "This should represent the delivery partner's best guess at when the driver will arrive at the delivery address.",
            "format": "date-time",
            "type": "string",
            "example": "2020-12-25T16:45:28.7537228+00:00"
          },
          "Location": {
            "$ref": "#/components/schemas/location"
          },
          "TimeStampWithUtcOffset": {
            "description": "This should represent the driver assigned timestamp.",
            "format": "date-time",
            "type": "string",
            "example": "2020-12-25T15:45:28.7537228+00:00"
          }
        }
      },
      "delivery-driver-details-with-eta": {
        "type": "object",
        "properties": {
          "EtaAtDeliveryAddress": {
            "description": "This should represent the delivery partner's best guess at when the driver will arrive at the delivery address.",
            "format": "date-time",
            "type": "string"
          },
          "Location": {
            "$ref": "#/components/schemas/location"
          },
          "TimeStampWithUtcOffset": {
            "description": "This should represent the Eta calculated timestamp.",
            "format": "date-time",
            "type": "string"
          }
        },
        "example": {
          "EtaAtDeliveryAddress": "2018-03-10T15:45:28.7537228+00:00",
          "Location": {
            "Latitude": 51.51641,
            "Longitude": -0.103198,
            "Speed": 8.68,
            "Heading": 357.10382,
            "Accuracy": 12.814
          },
          "TimeStampWithUtcOffset": "2018-03-10T14:45:28.7537228+00:00"
        }
      },
      "delivery-driver-location": {
        "type": "object",
        "properties": {
          "EtaAtDeliveryAddress": {
            "description": "This should represent the delivery partner's best guess at when the driver will arrive at the delivery address.",
            "format": "date-time",
            "type": "string",
            "example": "2020-12-25T16:45:28.7537228+00:00"
          },
          "EtaAtRestaurant": {
            "description": "This should represent the delivery partner's best guess at when the driver will arrive at the restaurant.",
            "format": "date-time",
            "type": "string",
            "example": "2020-12-25T16:30:28.7537228+00:00"
          },
          "Location": {
            "$ref": "#/components/schemas/location",
            "example": {
              "Latitude": 51.51641,
              "Longitude": -0.103198,
              "Speed": 8.68,
              "Heading": 357.10382,
              "Accuracy": 12.814
            }
          },
          "TimeStampWithUtcOffset": {
            "description": "This should represent the location updated timestamp.",
            "format": "date-time",
            "type": "string",
            "example": "2020-12-25T15:45:28.7537228+00:00"
          }
        }
      },
      "delivery-driver-unassigned-details": {
        "type": "object",
        "properties": {
          "Comment": {
            "description": "This should represent the comment on the unassignment.",
            "type": "string",
            "example": "Order was not ready"
          },
          "DriverContactNumber": {
            "description": "This should represent the driver's contact number.",
            "type": "string",
            "example": "07123456789"
          },
          "DriverName": {
            "description": "This should represent the driver's name.",
            "type": "string",
            "example": "David McDriverson"
          },
          "EtaAtDeliveryAddress": {
            "description": "This should represent the delivery partner's best guess at when the driver will arrive at the delivery address.",
            "format": "date-time",
            "type": "string",
            "example": "2020-12-25T16:45:28.7537228+00:00"
          },
          "EtaAtRestaurant": {
            "description": "This should represent the delivery partner's best guess at when the driver will arrive at the restaurant. In other words, it should not just contain the pick-up time initially requested by Just Eat.",
            "format": "date-time",
            "type": "string",
            "example": "2020-12-25T16:30:28.7537228+00:00"
          },
          "Location:": {
            "description": "This should represent the driver's geographic location (longitude and latitude)",
            "$ref": "#/components/schemas/location"
          },
          "Reason": {
            "description": "This should represent the delivery partner's reason for unassigning themselves from the order.",
            "type": "string",
            "example": "package_not_ready"
          },
          "TimeStampWithUtcOffset": {
            "description": "This should represent the driver unassigned timestamp.",
            "format": "date-time",
            "type": "string",
            "example": "2020-12-25T15:30:28.7537228+00:00"
          },
          "UnassignedBy": {
            "description": "This should represent the actor who triggered unassignment.",
            "type": "string",
            "example": "operation"
          }
        }
      },
      "delivery-restaurantslist": {
        "type": "object",
        "properties": {
          "restaurants": {
            "description": "A list of Just Eat restaurant ids served by the pool.",
            "type": "array",
            "items": {
              "type": "number",
              "format": "int32"
            },
            "example": [
              10202,
              10203
            ]
          }
        }
      },
      "estimated-delivery-time": {
        "type": "object",
        "properties": {
          "RestaurantReference": {
            "type": "string"
          },
          "DurationInMinutes": {
            "type": "string"
          }
        }
      },
      "on-its-way-details": {
        "type": "object",
        "properties": {
          "EstimatedArrivalTime": {
            "description": "This should represent the delivery partner's best guess at when the driver will arrive at the customer's address. In other words, it should not just contain the delivery time initially requested by Just Eat.",
            "format": "date-time",
            "type": "string",
            "example": "2020-12-25T16:45:28.7537228+00:00"
          },
          "Location": {
            "$ref": "#/components/schemas/location"
          },
          "TimeStampWithUtcOffset": {
            "description": "This should represent the driver on its ways timestamp.",
            "format": "date-time",
            "type": "string",
            "example": "2020-12-25T15:30:28.7537228+00:00"
          }
        }
      },
      "vehicle-details": {
        "type": "object",
        "properties": {
          "Vehicle": {
            "type": "string",
            "example": "Motorbike"
          },
          "VehicleRegistration": {
            "type": "string",
            "example": "JU51 SAY"
          }
        }
      },
      "connectorder-list": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/connectorder"
        }
      },
      "connectorder": {
        "type": "object",
        "properties": {
          "OrderId": {
            "type": "string",
            "description": "Globally unique Identifier for the order. Please use this whenever sending requests related to this order. Just Eat will provide this same identifier on any further messages relating to this order.",
            "example": "ijdhpy7bdusgtc28bapspa"
          },
          "FriendlyOrderReference": {
            "type": "string",
            "description": "The customer facing identifier for the order, which should be used in any UI or receipts to identify the order to the customer, driver or restaurant. This identifier is not guaranteed to be globally unique.",
            "example": "348322088"
          },
          "Id": {
            "type": "string",
            "deprecated": true,
            "description": "The unique identifier for an order within the country. You can provide this ID whenever sending requests related to the order. Note that further messages from Just Eat relating to this order may not use this same identifier, use `OrderId` for a more consistent identifier.",
            "example": "348322088"
          },
          "CustomerOrderId": {
            "format": "int32",
            "type": "number",
            "deprecated": true,
            "description": "This is a deprecated customer-facing ID that we maintain to support existing implementations.",
            "example": 348322088
          },
          "OrderReference": {
            "type": "string",
            "deprecated": true,
            "description": "This field is used to store external references to the order. This is defined by either Just Eat or the partner that created the order.",
            "example": "39cce3f0-0278-dd25-ae32-e8effe1ce4eb"
          },
          "IsAMiniFistPumpOrder": {
            "type": "boolean",
            "deprecated": true,
            "description": "Legacy Promotion - Ignore."
          },
          "Restrictions": {
            "type": "array",
            "description": "This is a list of types of restricted items contained in the order.",
            "items": {
              "$ref": "#/components/schemas/order-item-restriction"
            }
          },
          "Order": {
            "type": "object",
            "description": "Order data",
            "properties": {
              "NoteToRestaurant": {
                "type": "string",
                "description": "Notes from the customer about their order. In addition to notes for the restaurant, this field can also delivery instructions - and should be displayed to the delivery driver.",
                "example": "Contact-free delivery"
              },
              "ServiceType": {
                "type": "string",
                "description": "Type of the Order.",
                "enum": [
                  "Collection",
                  "Delivery"
                ]
              },
              "PlacedDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date Customer placed the order. Note that JUST EAT accepts pre-orders therefore there may be a significant difference between Placed Date and Due Date This Date/Time is set as UTC without an offset, regardless of Country."
              },
              "RdsPickupTimeWithUtcOffset": {
                "type": "string",
                "format": "date-time",
                "description": "When the Delivery Partner needs to be at the Restaurant to pickup the Order."
              },
              "DueDate": {
                "type": "string",
                "format": "date-time",
                "deprecated": true,
                "description": "Ignore - use `DueDateWithUtcOffset`."
              },
              "DueDateWithUtcOffset": {
                "type": "string",
                "format": "date-time",
                "description": "The DateTime when the Customer has been told they will receive the Order."
              },
              "InitialDueDate": {
                "type": "string",
                "format": "date-time",
                "deprecated": true,
                "description": "Ignore - use `IntialDueDateWithUtcOffset`."
              },
              "InitialDueDateWithUtcOffset": {
                "type": "string",
                "format": "date-time",
                "description": "When the Customer was originally told the order would be delivered (prior to Restaurant adjustment)"
              },
              "PickupNoticePeriod": {
                "type": "string",
                "format": "timespan",
                "description": "Desired minimum amount of notice needed before the driver arrives to pickup the order at the restaurant. This is to allow restaurant enough time to prepare the order. If less notice is given the driver may have to wait for the order to be prepared. Field is in the format \"hh:mm:ss\"",
                "example": "00:10:00"
              },
              "PromptAsap": {
                "type": "boolean",
                "description": "Did the Customer request the Order to ready ASAP"
              }
            }
          },
          "RestaurantInfo": {
            "type": "object",
            "description": "Restaurant data",
            "properties": {
              "Id": {
                "type": "string",
                "description": "Unique ID of the Restaurant.",
                "example": "123456"
              },
              "Name": {
                "type": "string",
                "description": "The name of the Restaurant.",
                "example": "Test Restaurant"
              },
              "PhoneNumber": {
                "type": "string",
                "description": "The Restaurant phone number.",
                "example": "07123456789"
              },
              "AddressLines": {
                "type": "array",
                "description": "Restaurant address.",
                "items": {
                  "type": "string",
                  "description": "Address line",
                  "example": "Fleet Place House 2, Fleet Place, London"
                }
              },
              "City": {
                "type": "string",
                "description": "The name of the city where the Restaurant is located",
                "example": "London"
              },
              "Postcode": {
                "type": "string",
                "description": "The post code where Restaurant is located",
                "example": "EC4M 7RF"
              },
              "Longitude": {
                "type": "number",
                "format": "double",
                "description": "Restaurant address longitude. Will be 0 if not provided.",
                "example": -0.12624
              },
              "Latitude": {
                "type": "number",
                "format": "double",
                "description": "Restaurant address latitude. Will be 0 if not provided.",
                "example": 51.50015
              },
              "EmailAddress": {
                "type": "string",
                "description": "Email address for the Restaurant.",
                "example": "contact@testrestaurant.com"
              },
              "PickupNotes": {
                "type": "string",
                "description": "Order pickup instructions for the Delivery Partner.",
                "example": "Use the back entrance"
              },
              "DispatchMethod": {
                "type": "string",
                "description": "`DispatchMethod` to use.",
                "example": "Phone"
              }
            }
          },
          "PaymentInfo": {
            "type": "object",
            "description": "Payment data",
            "properties": {
              "PaymentLines": {
                "type": "array",
                "description": "How the Customer has paid for the Order.",
                "items": {
                  "type": "object",
                  "description": "Payment line data",
                  "properties": {
                    "Type": {
                      "type": "string",
                      "description": "How was the order Paid.",
                      "enum": [
                        "Card"
                      ]
                    },
                    "CardFee": {
                      "type": "number",
                      "format": "double",
                      "description": "Was there a fee for the payment mechanism.",
                      "example": 0.5
                    },
                    "Value": {
                      "type": "number",
                      "format": "double",
                      "description": "The value of the payment.",
                      "example": 22.05
                    }
                  }
                }
              },
              "DriverTipValue": {
                "type": "number",
                "format": "double",
                "description": "The value of the tip given to the Driver.",
                "example": 0
              },
              "Total": {
                "type": "number",
                "format": "double",
                "description": "The total order value.",
                "example": 22.55
              },
              "TotalComplementary": {
                "type": "number",
                "format": "double",
                "description": "Order amount covered by JUST EAT.",
                "example": 0
              },
              "PaidDate": {
                "type": "string",
                "format": "date-time",
                "description": "DateTime when the Order was Paid (excludes UTC offset)."
              },
              "CashOnDelivery": {
                "type": "boolean",
                "description": "Is the Customer paying on Delivery."
              }
            }
          },
          "CustomerInfo": {
            "type": "object",
            "description": "Customer data",
            "properties": {
              "Id": {
                "type": "string",
                "description": "The JUST EAT Customer Id.",
                "example": "123456"
              },
              "Email": {
                "type": "string",
                "description": "Email address for the Customer.",
                "example": "contact@just-eat.com"
              },
              "Name": {
                "type": "string",
                "description": "The name of the Customer.",
                "example": "Just Eat"
              },
              "Address": {
                "type": "string",
                "description": "Customer Address. Note that Address is comma delimited.",
                "example": "Fleet Place House, 2 Fleet Place, London"
              },
              "City": {
                "type": "string",
                "description": "The name of the city where the Customer is located.",
                "example": "London"
              },
              "Postcode": {
                "type": "string",
                "description": "The post code where Customer is located.",
                "example": "EC4M 7RF"
              },
              "Longitude": {
                "format": "double",
                "description": "Customer address longitude. Will be 0 if not provided.",
                "type": "number",
                "example": -0.12624
              },
              "Latitude": {
                "format": "double",
                "description": "Customer address latitude. Will be 0 if not provided.",
                "type": "number",
                "example": 51.50015
              },
              "PhoneNumber": {
                "type": "string",
                "description": "The customer's unmasked phone number. Please don't expose this to drivers, instead use this number to provide your own phone masking number or use the JustEat masked number `DisplayPhoneNumber` below",
                "example": "018727863"
              },
              "DisplayPhoneNumber": {
                "type": "string",
                "description": "The customer's masked phone number.",
                "example": "(01) 872 7863"
              },
              "PhoneMaskingCode": {
                "type": "string",
                "description": "Code to use when calling customer phone masked number (`DisplayPhoneNumber`) about this order. Null if phone masking not enabled",
                "example": "444333222"
              },
              "TimeZone": {
                "type": "string",
                "description": "Customer timezone, e.g. 'Central European Standard Time'.",
                "example": "GMT Standard Time"
              },
              "PreviousRestuarantOrderCount": {
                "format": "int32",
                "type": "number",
                "description": "The number of Orders the Customer has placed at this Restaurant via JUST EAT"
              },
              "LocationSource": {
                "type": "string",
                "description": "Provider of the location data.",
                "example": "GeodataGeocoder"
              },
              "LocationAccuracyInMeters": {
                "format": "double",
                "type": "number",
                "description": "Accuracy of the location data in meters.",
                "example": 0
              },
              "LocationAccuracyDescription": {
                "type": "string",
                "description": "Location accuracy description",
                "example": "ROOFTOP"
              }
            }
          },
          "BasketInfo": {
            "type": "object",
            "description": "Basket data",
            "properties": {
              "BasketId": {
                "type": "string",
                "description": "Unique Basket Id for the Order.",
                "example": "ABCb8DzdnUy7G481b0JN5g"
              },
              "MenuId": {
                "type": "number",
                "format": "int32",
                "description": "Id of the Restaurant's menu.",
                "example": 777890
              },
              "SubTotal": {
                "description": "The Basket total cost, excluding any discounts.",
                "type": "number",
                "format": "double",
                "example": 47.75
              },
              "ToSpend": {
                "type": "number",
                "format": "double",
                "description": "Amount to spend.",
                "example": 0
              },
              "MultiBuyDiscount": {
                "type": "number",
                "format": "double",
                "description": "MultiBuy discount.",
                "example": 0
              },
              "Discount": {
                "description": "The discount amount, used in conjunction with `DiscountType`.",
                "type": "number",
                "format": "double",
                "example": 4.78
              },
              "DeliveryCharge": {
                "type": "number",
                "format": "double",
                "description": "Amount of cost that comes from delivery.",
                "example": 5
              },
              "Total": {
                "type": "number",
                "format": "double",
                "description": "Total price of the Order.",
                "example": 47.97
              },
              "Discounts": {
                "description": "Any Discounts applied to the Order.",
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "Discount data",
                  "properties": {
                    "Id": {
                      "type": "number",
                      "format": "int32",
                      "description": "Basket item id.",
                      "example": 21950
                    },
                    "Discount": {
                      "description": "The discount amount, used in conjunction with `DiscountType`.",
                      "type": "number",
                      "format": "int32",
                      "example": 10
                    },
                    "DiscountType": {
                      "description": "The type of discount, e.g. a percentage or the order or fixed amount.",
                      "type": "string",
                      "example": "Percent"
                    },
                    "QualifyingValue": {
                      "description": "The minimum order amount in order for this discount to be applicable.",
                      "type": "number",
                      "format": "double",
                      "example": 4.78
                    }
                  }
                }
              },
              "GroupedBasketItems": {
                "type": "array",
                "description": "Grouped basket items",
                "items": {
                  "description": "An item in the Basket.",
                  "type": "object",
                  "properties": {
                    "CombinedPrice": {
                      "description": "The total price of the Basket Item (including discounts).",
                      "type": "number",
                      "format": "double",
                      "example": 3.58
                    },
                    "Quantity": {
                      "description": "The quantity of Basket Items requested.",
                      "type": "number",
                      "format": "int32",
                      "example": 2
                    },
                    "OrderSubId": {
                      "type": "number",
                      "format": "int32",
                      "description": "Order `SubId`",
                      "example": 0
                    },
                    "MenuCardNumber": {
                      "type": "string",
                      "description": "Menu card number.",
                      "example": "1"
                    },
                    "BasketItem": {
                      "type": "object",
                      "description": "An item in the Basket.",
                      "properties": {
                        "ProductId": {
                          "type": "number",
                          "format": "int32",
                          "description": "Id of the Product.",
                          "example": 45858074
                        },
                        "ProductTypeId": {
                          "type": "number",
                          "format": "int32",
                          "description": "Id of the Product.",
                          "example": 428
                        },
                        "MenuCardNumber": {
                          "type": "string",
                          "description": "Menu card number.",
                          "example": "1"
                        },
                        "Name": {
                          "description": "The Item name, e.g. Chicken Tikka Masala or Family Meal Deal 3.",
                          "type": "string",
                          "example": "Mini Fillet Burger"
                        },
                        "Synonym": {
                          "description": "Legacy - ignore.",
                          "type": "string"
                        },
                        "UnitPrice": {
                          "description": "The price of the item.",
                          "type": "number",
                          "format": "double",
                          "example": 1.79
                        },
                        "CombinedPrice": {
                          "description": "Unit Price plus individual Meal Part item cost.",
                          "type": "number",
                          "format": "double",
                          "example": 3.58
                        },
                        "MealParts": {
                          "description": "Represents sub-parts of a meal.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "description": "Meal part data",
                            "properties": {
                              "MealPartId": {
                                "type": "number",
                                "format": "int32",
                                "description": "The meal part Id.",
                                "example": 45822750
                              },
                              "GroupId": {
                                "type": "number",
                                "format": "int32",
                                "description": "The group Id.",
                                "example": 1
                              },
                              "Name": {
                                "type": "string",
                                "description": "The name of the meal part.",
                                "example": "Any Sides?"
                              },
                              "Synonym": {
                                "type": "string",
                                "description": "The synonym of the meal part."
                              },
                              "OptionalAccessories": {
                                "type": "array",
                                "description": "Optional accessories",
                                "items": {
                                  "type": "object",
                                  "description": "Optional accessory",
                                  "properties": {
                                    "OptionalAccessoryId": {
                                      "type": "number",
                                      "format": "int32",
                                      "description": "The accessory Id.",
                                      "example": 56168
                                    },
                                    "Quantity": {
                                      "type": "number",
                                      "format": "int32",
                                      "description": "The quantity of the accessory.",
                                      "example": 1
                                    },
                                    "UnitPrice": {
                                      "type": "number",
                                      "format": "double",
                                      "description": "The unit price of the accessory.",
                                      "example": 0.5
                                    },
                                    "Name": {
                                      "type": "string",
                                      "description": "The name of the accessory.",
                                      "example": "Add Bacon"
                                    }
                                  }
                                }
                              },
                              "RequiredAccessories": {
                                "type": "array",
                                "description": "Required accessories",
                                "items": {
                                  "type": "object",
                                  "description": "Required accessory",
                                  "properties": {
                                    "RequiredAccessoryId": {
                                      "type": "number",
                                      "format": "int32",
                                      "description": "The accessory Id.",
                                      "example": 225025
                                    },
                                    "GroupId": {
                                      "type": "number",
                                      "format": "int32",
                                      "description": "The group Id of the accessory.",
                                      "example": 3
                                    },
                                    "UnitPrice": {
                                      "type": "number",
                                      "format": "double",
                                      "description": "The unit price of the accessory.",
                                      "example": 0.16
                                    },
                                    "Name": {
                                      "type": "string",
                                      "description": "The name of the accessory.",
                                      "example": "Coca-Cola Original Taste"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "OptionalAccessories": {
                          "description": "An option item added to the Basket Item, this may be options such as Garlic Bread or a bottle of Coke.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "description": "Optional accessory",
                            "properties": {
                              "OptionalAccessoryId": {
                                "type": "number",
                                "format": "int32",
                                "description": "The accessory Id.",
                                "example": 56168
                              },
                              "Quantity": {
                                "type": "number",
                                "format": "int32",
                                "description": "The quantity of the accessory.",
                                "example": 1
                              },
                              "UnitPrice": {
                                "type": "number",
                                "format": "double",
                                "description": "The unit price of the accessory.",
                                "example": 0.5
                              },
                              "Name": {
                                "type": "string",
                                "description": "The name of the accessory.",
                                "example": "Add Bacon"
                              }
                            }
                          }
                        },
                        "RequiredAccessories": {
                          "description": "Items required as part of the Item, for example, Pizza base sauce.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "description": "Required accessory",
                            "properties": {
                              "RequiredAccessoryId": {
                                "type": "number",
                                "format": "int32",
                                "description": "The accessory Id.",
                                "example": 225025
                              },
                              "GroupId": {
                                "type": "number",
                                "format": "int32",
                                "description": "The group Id of the accessory.",
                                "example": 3
                              },
                              "UnitPrice": {
                                "type": "number",
                                "format": "double",
                                "description": "The unit price of the accessory.",
                                "example": 0.1
                              },
                              "Name": {
                                "type": "string",
                                "description": "The name of the accessory.",
                                "example": "Large Meal"
                              }
                            }
                          }
                        },
                        "Discounts": {
                          "description": "Any discounts applied to this specific item.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "description": "Discount data",
                            "properties": {
                              "Amount": {
                                "type": "number",
                                "format": "double",
                                "description": "Amount of the discount applied",
                                "example": 4.5
                              },
                              "DiscountType": {
                                "type": "string",
                                "description": "Type of the discount applied",
                                "example": "Percent"
                              }
                            }
                          }
                        },
                        "MultiBuyDiscounts": {
                          "description": "Any multi-purchase discounts applied to this item.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "description": "Multi-purchase discount data",
                            "properties": {
                              "OrderItemId": {
                                "type": "string",
                                "description": "Id of the Order item."
                              },
                              "Amount": {
                                "type": "number",
                                "format": "double",
                                "description": "Amount of the discount applied",
                                "example": 4.5
                              },
                              "DiscountType": {
                                "type": "string",
                                "description": "Type of the discount applied",
                                "example": "Percent"
                              },
                              "ProductTypeId": {
                                "type": "number",
                                "format": "int32",
                                "description": "The Id of the product type the discount applies to."
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "driver-location": {
        "type": "object",
        "properties": {
          "TimeStamp": {
            "type": "string",
            "format": "date-time"
          },
          "OrderId": {
            "type": "string"
          },
          "Location": {
            "$ref": "#/components/schemas/location-v2"
          }
        }
      },
      "driver-status": {
        "type": "object",
        "properties": {
          "TimeStamp": {
            "type": "string",
            "format": "date-time"
          },
          "EstimatedPickupTime": {
            "type": "string",
            "format": "date-time"
          },
          "EstimatedDeliveryTime": {
            "type": "string",
            "format": "date-time"
          },
          "DriverName": {
            "type": "string"
          },
          "DriverContactNumber": {
            "type": "string"
          },
          "Event": {
            "type": "string",
            "enum": [
              "DriverAssigned",
              "DriverAtRestaurant",
              "OnItsWay",
              "AtDeliveryAddress",
              "Delivered"
            ]
          },
          "OrderId": {
            "type": "string"
          }
        }
      },
      "order-item-restriction": {
        "type": "object",
        "properties": {
          "Type": {
            "type": "string",
            "description": "The type of restricted item contained in the order. The only supported value is 'Alcohol'.",
            "enum": [
              "Alcohol"
            ]
          }
        }
      },
      "ready-for-pickup": {
        "type": "object",
        "properties": {
          "Event": {
            "type": "string",
            "enum": [
              "Ready for pickup"
            ]
          },
          "Timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "RestaurantDeliveryFees": {
        "type": "object",
        "nullable": false,
        "properties": {
          "restaurantId": {
            "description": "The identifier of the restaurant",
            "type": "string"
          },
          "minimumOrderValue": {
            "type": "number",
            "format": "integer",
            "description": "The minimum order value (excluding fees) required, in the smallest unit of local currency (e.g. pence)."
          },
          "bands": {
            "type": "array",
            "description": "Collection of delivery fee bands",
            "items": {
              "type": "object",
              "properties": {
                "minimumAmount": {
                  "type": "number",
                  "format": "integer",
                  "description": "The minimum order value (excluding fees) when this fee band applies. The fee with the highest `minimumAmount` that is less than or equal to order value applies. This is in the smallest unit of local currency (e.g. pence)."
                },
                "fee": {
                  "type": "number",
                  "format": "integer",
                  "description": "The delivery fee, in the smallest unit of local currency (e.g. pence)."
                }
              }
            }
          }
        },
        "example": {
          "restaurantId": "5678",
          "minimumOrderValue": 1000,
          "bands": [
            {
              "minimumAmount": 1000,
              "fee": 250
            },
            {
              "minimumAmount": 2000,
              "fee": 0
            }
          ]
        }
      },
      "DiscoveryResponse": {
        "type": "object",
        "properties": {
          "searchResults": {
            "type": "array",
            "description": "Restaurants serving the requested area",
            "items": {
              "$ref": "#/components/schemas/DiscoveryResponseItem"
            }
          }
        },
        "example": {
          "searchResults": [
            {
              "name": "Example Restaurant",
              "restaurantId": "12345",
              "cuisines": [
                {
                  "seoName": "pizza",
                  "name": "Pizza"
                },
                {
                  "seoName": "Fish & Chips",
                  "name": "fish-and-chips"
                },
                {
                  "seoName": "halal",
                  "name": "Halal"
                }
              ],
              "availabilities": [
                {
                  "serviceType": "Delivery",
                  "isOpen": true,
                  "canPreOrder": false,
                  "nextAvailability": {
                    "AvailableFrom": "2020-01-01T07:20:00Z"
                  }
                }
              ]
            }
          ]
        }
      },
      "DiscoveryResponseAvailabilities": {
        "type": "object",
        "properties": {
          "serviceType": {
            "type": "string",
            "description": "The type of service the restaurant availability is",
            "enum": [
              "Unknown",
              "Delivery",
              "Collection"
            ]
          },
          "isOpen": {
            "type": "boolean",
            "description": "If the restaurant is in an open state. This also assumes it is accepting orders"
          },
          "canPreOrder": {
            "type": "boolean",
            "description": "If the restaurant is in a pre order state"
          },
          "nextAvailability": {
            "description": "When the restaurant is next available",
            "$ref": "#/components/schemas/DiscoveryResponseAvailability"
          }
        }
      },
      "DiscoveryResponseAvailability": {
        "type": "object",
        "properties": {
          "availableFrom": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the restaurant is available from. Format - 'yyyy-dd-MMTHH:mm:ssZ'"
          }
        }
      },
      "DiscoveryResponseCuisine": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Display name of the cuisine"
          },
          "seoName": {
            "type": "string",
            "description": "Sanitized name of the cuisine, compatible with URLs"
          }
        }
      },
      "DiscoveryResponseItem": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Display name of the restaurant"
          },
          "restaurantId": {
            "type": "string",
            "description": "Id of the restaurant"
          },
          "cuisines": {
            "type": "array",
            "description": "Cuisines of the restaurant",
            "items": {
              "$ref": "#/components/schemas/DiscoveryResponseCuisine"
            }
          },
          "availabilities": {
            "type": "array",
            "description": "Availabilities of the restaurant",
            "items": {
              "$ref": "#/components/schemas/DiscoveryResponseAvailabilities"
            }
          }
        },
        "example": {
          "name": "Example Restaurant",
          "restaurantId": "12345",
          "cuisines": [
            {
              "seoName": "pizza",
              "name": "Pizza"
            },
            {
              "seoName": "Fish & Chips",
              "name": "fish-and-chips"
            },
            {
              "seoName": "halal",
              "name": "Halal"
            }
          ],
          "availabilities": [
            {
              "serviceType": "Delivery",
              "isOpen": true,
              "canPreOrder": false,
              "nextAvailability": {
                "AvailableFrom": "2020-01-01T07:20:00Z"
              }
            }
          ]
        }
      },
      "RestaurantSmileyRatingsInspection": {
        "properties": {
          "rate": {
            "type": "integer",
            "minimum": 1,
            "maximum": 4,
            "nullable": true,
            "description": "Smiley Rating of this inspection (4 - lower, 1 - higher). It can be nullable if no inspection was done in the restaurant."
          },
          "inspectionDate": {
            "type": "string",
            "nullable": true,
            "description": "Date of the inspection (dd-mm-yyyy). It can be nullable if no inspection was done in the restaurant."
          }
        }
      },
      "RestaurantSmileyRatingsResponse": {
        "type": "object",
        "properties": {
          "restaurantSmileyId": {
            "type": "string",
            "nullable": false,
            "description": "Restaurant Smiley Id"
          },
          "url": {
            "type": "string",
            "nullable": false,
            "description": "URL for complete info of this restaurant at https://www.findsmiley.dk"
          },
          "isElite": {
            "description": "Flag that ensures a restaurant is rated as Elite",
            "type": "boolean",
            "nullable": false
          },
          "inspections": {
            "description": "Object with the last four inspections from most recent to older",
            "type": "object",
            "properties": {
              "first": {
                "type": "object",
                "description": "First most recent inspection",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RestaurantSmileyRatingsInspection"
                  }
                ],
                "nullable": false
              },
              "second": {
                "type": "object",
                "description": "Second most recent inspection",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RestaurantSmileyRatingsInspection"
                  }
                ],
                "nullable": false
              },
              "third": {
                "type": "object",
                "description": "Third most recent inspection",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RestaurantSmileyRatingsInspection"
                  }
                ],
                "nullable": false
              },
              "fourth": {
                "type": "object",
                "description": "Fourth most recent inspection",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RestaurantSmileyRatingsInspection"
                  }
                ],
                "nullable": false
              }
            }
          }
        },
        "additionalProperties": false,
        "example": {
          "restaurantSmileyId": "111111",
          "url": "https://www.findsmiley.dk/111111",
          "isElite": false,
          "inspections": {
            "first": {
              "rate": 1,
              "inspectionDate": "02-01-2021"
            },
            "second": {
              "rate": 1,
              "inspectionDate": "02-01-2021"
            },
            "third": {
              "rate": 2,
              "inspectionDate": "02-01-2021"
            },
            "fourth": {
              "rate": null,
              "inspectionDate": null
            }
          }
        }
      },
      "ExperimentContext": {
        "type": "object",
        "properties": {
          "UserBucket": {
            "type": "string",
            "format": "uuid",
            "description": "Representation of how the user has been partitioned into experiments."
          },
          "ClientVersion": {
            "type": "string",
            "description": "The version of the experiment client."
          },
          "Culture": {
            "type": "string",
            "description": "Culture of the request."
          },
          "Client": {
            "type": "string",
            "enum": [
              "Web",
              "Android",
              "iOS",
              "Mobile",
              "All",
              "Test"
            ],
            "description": "Type of client making the request."
          },
          "IsBetaClient": {
            "type": "boolean",
            "description": "Client is a beta instance."
          },
          "UserAgent": {
            "type": "string",
            "description": "Browser user agent."
          }
        },
        "example": {
          "UserBucket": "047850da-ccb3-491f-b5a5-43f186e4344b",
          "ClientVersion": "2.0.0.1390",
          "Culture": "en-GB",
          "Client": "Web",
          "IsBetaClient": false,
          "UserAgent": "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0"
        }
      },
      "ExperimentErrorResponse": {
        "type": "object",
        "description": "The error object returned when an operation fails",
        "properties": {
          "Message": {
            "type": "string"
          }
        }
      },
      "ExperimentResultResponse": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "The experiment name."
          },
          "Partition": {
            "type": "string",
            "description": "Experiment partition."
          },
          "AssociatedTicket": {
            "type": "string",
            "description": "Associated jira experiment ticket."
          },
          "ParentTicket": {
            "type": "string",
            "description": "Parent jira experiment ticket."
          },
          "Version": {
            "type": "integer",
            "format": "int32",
            "description": "Version number of the experiment."
          }
        },
        "example": {
          "Name": "webexperiment",
          "Partition": "variant1",
          "AssociatedTicket": "EX-1234",
          "ParentTicket": "EX-123",
          "Version": 2
        }
      },
      "ExperimentResultsResponse": {
        "type": "object",
        "properties": {
          "Active": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ExperimentResultResponse"
            },
            "readOnly": true,
            "description": "The active (enabled) experiments."
          }
        },
        "example": {
          "webexperiment": {
            "Name": "webexperiment",
            "Partition": "variant1",
            "AssociatedTicket": "EX-1234",
            "ParentTicket": "EX-123",
            "Version": 2
          },
          "iosexperiment": {
            "Name": "iosexperiment",
            "Partition": "variant5",
            "AssociatedTicket": "EX-8888",
            "ParentTicket": "EX-777",
            "Version": 3
          }
        }
      },
      "extensibleObject": {
        "type": "object",
        "additionalProperties": true
      },
      "Additive": {
        "description": "List of Additives",
        "type": "object",
        "properties": {
          "code": {
            "description": "Additive code of Takeaway Standard from TMS",
            "type": "string",
            "nullable": false
          }
        },
        "additionalProperties": false,
        "example": {
          "code": "10.2"
        }
      },
      "Allergen": {
        "description": "List of  Allergens",
        "type": "object",
        "properties": {
          "code": {
            "description": "Allergen code of Takeaway Standard from TMS",
            "type": "string",
            "nullable": false
          }
        },
        "additionalProperties": false,
        "example": {
          "code": "A"
        }
      },
      "Ingredients": {
        "description": "List of ingredients",
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of ingredient",
            "type": "string",
            "nullable": false
          }
        },
        "additionalProperties": false,
        "example": {
          "name": "wasser"
        }
      },
      "Manufacturer": {
        "type": "object",
        "properties": {
          "brand": {
            "description": "Brand name",
            "type": "string",
            "nullable": true
          },
          "manufacturer": {
            "description": "Manufacturer name",
            "type": "string",
            "nullable": true
          },
          "origin": {
            "description": "Country",
            "type": "string",
            "nullable": true
          },
          "city": {
            "description": "City",
            "type": "string",
            "nullable": true
          },
          "streetAddress": {
            "description": "Street Address",
            "type": "string",
            "nullable": true
          },
          "postalCode": {
            "description": "Postal Code",
            "type": "string",
            "nullable": true
          }
        },
        "example": {
          "brand": "Coca-Cola Zero",
          "manufacturer": "Coca-Cola Erfrischungsgetränke AG, Postfach 67 01 56, 10207 Berlin",
          "origin": "Deutschland",
          "city": "Anderlecht",
          "streetAddress": "Bergense Steenweg 1424",
          "postalCode": "1070"
        }
      },
      "Nutritional": {
        "type": "object",
        "properties": {
          "energy": {
            "description": "Energy value for product",
            "properties": {
              "value": {
                "description": "Value of the item",
                "type": "number",
                "nullable": true
              },
              "unit": {
                "description": "Unit of the item",
                "type": "string",
                "nullable": false
              }
            }
          },
          "calories": {
            "description": "Calories value for product",
            "properties": {
              "value": {
                "description": "Value of the item",
                "type": "number",
                "nullable": true
              },
              "unit": {
                "description": "Unit of the item",
                "type": "string",
                "nullable": false
              }
            }
          },
          "protein": {
            "description": "Protein value for product",
            "properties": {
              "value": {
                "description": "Value of the item",
                "type": "number",
                "nullable": true
              },
              "unit": {
                "description": "Unit of the item",
                "type": "string",
                "nullable": false
              }
            }
          },
          "carbohydrate": {
            "description": "Carbohydrate value for product",
            "properties": {
              "value": {
                "description": "Value of the item",
                "type": "number",
                "nullable": true
              },
              "unit": {
                "description": "Unit of the item",
                "type": "string",
                "nullable": false
              }
            }
          },
          "sugar": {
            "description": "Sugar value for product",
            "properties": {
              "value": {
                "description": "Value of the item",
                "type": "number",
                "nullable": true
              },
              "unit": {
                "description": "Unit of the item",
                "type": "string",
                "nullable": false
              }
            }
          },
          "fat": {
            "description": "Fat value for product",
            "properties": {
              "value": {
                "description": "Value of the item",
                "type": "number",
                "nullable": true
              },
              "unit": {
                "description": "Unit of the item",
                "type": "string",
                "nullable": false
              }
            }
          },
          "fattyAcidTotal": {
            "description": "Fatty Acid value for product",
            "properties": {
              "value": {
                "description": "Value of the item",
                "type": "number",
                "nullable": true
              },
              "unit": {
                "description": "Unit of the item",
                "type": "string",
                "nullable": false
              }
            }
          },
          "sodium": {
            "description": "Sodium value for product",
            "properties": {
              "value": {
                "description": "Value of the item",
                "type": "number",
                "nullable": true
              },
              "unit": {
                "description": "Unit of the item",
                "type": "string",
                "nullable": false
              }
            }
          },
          "salt": {
            "description": "Salt value for product",
            "properties": {
              "value": {
                "description": "Value of the item",
                "type": "number",
                "nullable": true
              },
              "unit": {
                "description": "Unit of the item",
                "type": "string",
                "nullable": false
              }
            }
          },
          "caffeine": {
            "description": "Caffeine milligram value for product",
            "properties": {
              "value": {
                "description": "Value of the item",
                "type": "number",
                "nullable": true
              },
              "unit": {
                "description": "Unit of the item",
                "type": "string",
                "nullable": false
              }
            }
          },
          "alcohol": {
            "description": "Alcohol by volume value for product",
            "properties": {
              "value": {
                "description": "Value of the item",
                "type": "number",
                "nullable": true
              },
              "unit": {
                "description": "Unit of the item",
                "type": "string",
                "nullable": false
              }
            }
          }
        },
        "example": {
          "energy": {
            "value": 175.5,
            "unit": "kJ"
          },
          "calories": {
            "value": 42,
            "unit": "kcal"
          },
          "protein": {
            "value": 4000.01,
            "unit": "mg"
          },
          "carbohydrate": {
            "value": 22000,
            "unit": "mg"
          },
          "sugar": {
            "value": 9100,
            "unit": "mg"
          },
          "fat": {
            "value": 16000,
            "unit": "mg"
          },
          "fattyAcidTotal": {
            "value": 100,
            "unit": "mg"
          },
          "sodium": {
            "value": 10,
            "unit": "mg"
          },
          "salt": {
            "value": 20,
            "unit": "mg"
          },
          "caffeine": {
            "value": 10,
            "unit": "mg"
          },
          "alcohol": {
            "value": 7.5,
            "unit": "%"
          }
        }
      },
      "PagedFoodSafetyResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PagedAfterOnlyCursorResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "description": "List of Products with food safety data.",
                "type": "array",
                "minItems": 0,
                "maxItems": 500,
                "items": {
                  "$ref": "#/components/schemas/ProductFoodSafety"
                }
              }
            }
          }
        ],
        "example": {
          "data": [
            {
              "id": "RRR3PRE",
              "type": "product",
              "allergens": [
                {
                  "code": "A"
                }
              ],
              "additives": [
                {
                  "code": "10.2"
                }
              ],
              "ingredients": [
                "wasser"
              ],
              "nutritional": {
                "energy": {
                  "value": 175.5,
                  "unit": "kJ"
                },
                "calories": {
                  "value": 42,
                  "unit": "kcal"
                },
                "protein": {
                  "value": 4000.01,
                  "unit": "mg"
                },
                "carbohydrate": {
                  "value": 22000,
                  "unit": "mg"
                },
                "sugar": {
                  "value": 9100,
                  "unit": "mg"
                },
                "fat": {
                  "value": 16000,
                  "unit": "mg"
                },
                "fattyAcidTotal": {
                  "value": 100,
                  "unit": "mg"
                },
                "sodium": {
                  "value": 10,
                  "unit": "mg"
                },
                "salt": {
                  "value": 20,
                  "unit": "mg"
                },
                "caffeine": {
                  "value": 10,
                  "unit": "mg"
                },
                "alcohol": {
                  "value": 7.5,
                  "unit": "%"
                }
              },
              "manufacturer": {
                "brand": "Coca-Cola Zero",
                "manufacturer": "Coca-Cola Erfrischungsgetränke AG, Postfach 67 01 56, 10207 Berlin",
                "origin": "Deutschland",
                "city": "Anderlecht",
                "streetAddress": "Bergense Steenweg 1424",
                "postalCode": "1070"
              },
              "storage": {
                "stgInstruction": "Example"
              }
            }
          ],
          "paging": {
            "cursors": {
              "after": "NDMyNzQyODI3OTQw=="
            }
          }
        }
      },
      "ProductFoodSafety": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": false,
            "description": "Encrypted Product/Addon Id"
          },
          "type": {
            "type": "string",
            "nullable": false,
            "description": "Product or Addon"
          },
          "allergens": {
            "minItems": 0,
            "maxItems": 29,
            "description": "List of allergens",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Allergen"
            },
            "nullable": false
          },
          "additives": {
            "minItems": 0,
            "maxItems": 26,
            "description": "List of additives",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Additive"
            },
            "nullable": false
          },
          "ingredients": {
            "minItems": 0,
            "maxItems": 80,
            "description": "List of ingredients",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Ingredients"
            },
            "nullable": false
          },
          "nutritional": {
            "description": "Object for nutritional data",
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/Nutritional"
              }
            ],
            "nullable": false
          },
          "manufacturer": {
            "description": "Object for manufacturer data",
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/Manufacturer"
              }
            ],
            "nullable": false
          },
          "storage": {
            "description": "Object for storage data",
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/Storage"
              }
            ],
            "nullable": false
          }
        },
        "additionalProperties": false
      },
      "Storage": {
        "type": "object",
        "properties": {
          "stgInstruction": {
            "description": "Storage/Usage instructions",
            "type": "string",
            "nullable": true
          }
        },
        "example": {
          "stgInstruction": "Example"
        }
      },
      "GiftCardsErrorResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "codeText": {
            "type": "string"
          }
        }
      },
      "SearchByPanResponse": {
        "type": "object",
        "properties": {
          "pan": {
            "type": "string"
          },
          "amount": {
            "type": "integer",
            "format": "int32"
          },
          "redemptionHistory": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "transactionId": {
                  "type": "string"
                },
                "consumerId": {
                  "type": "string"
                },
                "status": {
                  "enum": [
                    "Redeemed",
                    "Failed"
                  ],
                  "type": "string"
                },
                "statusDetails": {
                  "type": "string"
                },
                "redeemedOn": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          }
        }
      },
      "400LiveMetricsErrorResponse": {
        "type": "object",
        "description": "The error object returned when an operation fails",
        "properties": {
          "error": {
            "description": "Error Title",
            "type": "string",
            "example": "Invalid Request"
          },
          "message": {
            "description": "Error Message Text",
            "type": "string",
            "example": "Invalid Request"
          }
        }
      },
      "401LiveMetricsErrorResponse": {
        "type": "object",
        "description": "The error object returned when an operation fails",
        "properties": {
          "error": {
            "description": "Error Title",
            "type": "string",
            "example": "Unauthorized Request"
          },
          "message": {
            "description": "Error Message Text",
            "type": "string",
            "example": "Unauthorized Request"
          }
        }
      },
      "404LiveMetricsErrorResponse": {
        "type": "object",
        "description": "The error object returned when an operation fails",
        "properties": {
          "error": {
            "description": "Error Title",
            "type": "string",
            "example": "Live Metrics not found for delivery zone"
          },
          "message": {
            "description": "Error Message Text",
            "type": "string",
            "example": "Live Metrics not found for delivery zone"
          }
        }
      },
      "500LiveMetricsErrorResponse": {
        "type": "object",
        "description": "The error object returned when an operation fails",
        "properties": {
          "error": {
            "description": "Error Title",
            "type": "string",
            "example": "Internal Server Error"
          },
          "message": {
            "description": "Error Message Text",
            "type": "string",
            "example": "Internal Server Error"
          }
        }
      },
      "LiveMetrics": {
        "type": "object",
        "description": "The live metrics object for a given delivery zone.",
        "properties": {
          "aajlTimestamp": {
            "type": "number",
            "format": "integer",
            "description": "Timestamp for the average assignable job load retrieved for a given delivery zone.",
            "example": 1585260360000
          },
          "currentAajl": {
            "type": "number",
            "format": "double",
            "description": "Average assignable job load retrieved for a given delivery zone.",
            "example": 0.7
          },
          "marketplaceRankStatus": {
            "type": "boolean",
            "description": "Marketplace On/Off status"
          },
          "marketplaceRank": {
            "type": "number",
            "format": "integer",
            "description": "Current marketplace rank value retrieved for a given delivery zone.",
            "example": -2
          },
          "throttlingStatus": {
            "type": "boolean",
            "description": "Zone Throttling On/Off status"
          },
          "zoneThrottling": {
            "type": "number",
            "format": "integer",
            "description": "Current zone throttling value retrieved for a given delivery zone.",
            "example": 15
          }
        }
      },
      "local-date-time": {
        "type": "string",
        "pattern": "^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?$",
        "description": "A local date time object, conforming to `ISO-8601`, but with only a partial time representation and no time offset."
      },
      "availability-result-error": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Short error description"
          }
        }
      },
      "availability-result": {
        "type": "object",
        "properties": {
          "processedPartnerProductIds": {
            "type": "array",
            "description": "Array of partner product identifiers that have been successfully processed",
            "items": {
              "type": "string"
            }
          },
          "unprocessedPartnerProductIds": {
            "type": "array",
            "description": "Array of partner product identifiers that have not been processed",
            "items": {
              "type": "string"
            }
          },
          "message": {
            "type": "string",
            "description": "Error description when something went wrong or `unprocessedPartnerProductIds` any"
          }
        }
      },
      "delivery-eta-minutes": {
        "type": "object",
        "nullable": true,
        "properties": {
          "Approximate": {
            "format": "int32",
            "type": "integer",
            "nullable": true,
            "description": "Approximate delivery eta in minutes"
          },
          "RangeLower": {
            "format": "int32",
            "type": "integer",
            "nullable": true,
            "description": "Lower bound of delivery eta in minutes"
          },
          "RangeUpper": {
            "format": "int32",
            "type": "integer",
            "nullable": true,
            "description": "Upper bound of delivery eta in minutes"
          }
        },
        "example": {
          "Approximate": null,
          "RangeLower": 35,
          "RangeUpper": 50
        }
      },
      "location": {
        "type": "object",
        "description": "GeoLocation object containing latitude and longitude values.",
        "properties": {
          "Latitude": {
            "description": "This should represent the latitude of the driver's location.",
            "format": "double",
            "type": "number"
          },
          "Longitude": {
            "description": "This should represent the longitude of the driver's location.",
            "format": "double",
            "type": "number"
          },
          "Speed": {
            "description": "This should represent the travel speed of the driver.",
            "format": "double",
            "type": "number"
          },
          "Heading": {
            "description": "This should represent the degree of heading direction, for example, 0 is north, 90 is east.",
            "format": "double",
            "type": "number"
          },
          "Accuracy": {
            "description": "This should represent the accuracy of driver's location.",
            "format": "double",
            "type": "number"
          }
        },
        "required": [
          "Latitude",
          "Longitude"
        ],
        "example": {
          "Latitude": 51.51641,
          "Longitude": -0.103198,
          "Speed": 8.68,
          "Heading": 357.10382,
          "Accuracy": 12.814
        }
      },
      "object": {
        "type": "object"
      },
      "product-id-list": {
        "type": "array",
        "items": {
          "type": "string",
          "description": "Array of partner product identifiers"
        }
      },
      "tenants": {
        "type": "string",
        "enum": [
          "au",
          "ca",
          "dk",
          "es",
          "ie",
          "it",
          "nz",
          "uk"
        ]
      },
      "400MarketplaceRankingErrorResponse": {
        "type": "object",
        "description": "The error object returned when an operation fails",
        "properties": {
          "error": {
            "description": "Error Title",
            "type": "string",
            "example": "Invalid Request"
          },
          "message": {
            "description": "Error Message Text",
            "type": "string",
            "example": "Invalid Request"
          }
        }
      },
      "401MarketplaceRankingErrorResponse": {
        "type": "object",
        "description": "The error object returned when an operation fails",
        "properties": {
          "error": {
            "description": "Error Title",
            "type": "string",
            "example": "Unauthorized Request"
          },
          "message": {
            "description": "Error Message Text",
            "type": "string",
            "example": "Unauthorized Request"
          }
        }
      },
      "404MarketplaceRankingErrorResponse": {
        "type": "object",
        "description": "The error object returned when an operation fails",
        "properties": {
          "error": {
            "description": "Error Title",
            "type": "string",
            "example": "Marketplace Ranking Settings not found"
          },
          "message": {
            "description": "Error Message Text",
            "type": "string",
            "example": "Marketplace Ranking Settings not found"
          }
        }
      },
      "500MarketplaceRankingErrorResponse": {
        "type": "object",
        "description": "The error object returned when an operation fails",
        "properties": {
          "error": {
            "description": "Error Title",
            "type": "string",
            "example": "Internal Server Error"
          },
          "message": {
            "description": "Error Message Text",
            "type": "string",
            "example": "Internal Server Error"
          }
        }
      },
      "MarketplaceRank": {
        "type": "object",
        "description": "The marketplace rank object used to build a Ranking for a given delivery zone.",
        "properties": {
          "rank": {
            "type": "number",
            "format": "integer",
            "description": "Rank position of Average Assignable Job Load",
            "example": -20
          },
          "aajl": {
            "type": "number",
            "format": "integer",
            "description": "Average Assignable Job Load",
            "example": 1
          },
          "enabled": {
            "type": "boolean",
            "description": "Status of the corresponding rank"
          }
        }
      },
      "MarketplaceRankingSettings": {
        "type": "object",
        "description": "The marketplace ranking settings object for all endpoints.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Delivery Zone Id",
            "example": "fc71ee27-608f-4223-b2ea-2774eb83c6b4"
          },
          "marketplaceRankingStatus": {
            "type": "boolean",
            "description": "Marketplace On/Off Status"
          },
          "ranks": {
            "type": "array",
            "minItems": 9,
            "maxItems": 9,
            "description": "Array of marketplace rank objects used to build a Ranking for a given delivery zone.",
            "items": {
              "$ref": "#/components/schemas/MarketplaceRank"
            }
          }
        }
      },
      "MarketplaceRankingSettingsList": {
        "type": "object",
        "description": "Marketplace Ranking Settings List",
        "properties": {
          "marketplaceRankSettingsList": {
            "type": "array",
            "minItems": 3,
            "maxItems": 3,
            "description": "List of Marketplace Ranking Settings",
            "items": {
              "$ref": "#/components/schemas/MarketplaceRankingSettings"
            }
          }
        }
      },
      "AddMenuView": {
        "type": "object",
        "properties": {
          "outcode": {
            "type": "string"
          },
          "latitude": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "longitude": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "app": {
            "type": "string"
          },
          "gaUserId": {
            "type": "string"
          },
          "anonymousUserId": {
            "type": "string"
          },
          "globalUserId": {
            "type": "string"
          },
          "menuDisplayedTimestampUtc": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "searchDisplayedTimestampUtc": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "isSponsored": {
            "type": "boolean"
          }
        }
      },
      "CategoryRequest": {
        "type": "object",
        "properties": {
          "Id": {
            "description": "Id of the Category",
            "type": "string"
          },
          "Name": {
            "type": "string",
            "description": "Name of the Category"
          }
        },
        "example": {
          "Id": "21",
          "Name": "Pizzas"
        }
      },
      "CategoryResponse": {
        "type": "object",
        "properties": {
          "Id": {
            "description": "Id of the Category",
            "type": "string"
          },
          "Name": {
            "description": "Name of the Category",
            "type": "string"
          }
        },
        "example": {
          "Id": "21",
          "Name": "Pizzas"
        }
      },
      "CreateMenuItemRequest": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "description": "Name of the Menu Item",
            "type": "string"
          },
          "Category": {
            "description": "Category of the Menu Item",
            "$ref": "#/components/schemas/CategoryRequest"
          },
          "Description": {
            "description": "Description of the Menu Item",
            "type": "string"
          },
          "Labels": {
            "description": "Labels of the Menu Item",
            "uniqueItems": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Variations": {
            "description": "Any variations of the Menu Item",
            "maxLength": 75,
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateMenuItemVariationRequest"
            }
          },
          "PreferenceGroups": {
            "description": "A list of preference groups of the Menu Item",
            "maxLength": 100,
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateModifierGroupRequest"
            }
          },
          "OptionGroups": {
            "description": "A list of options groups of the Menu Item",
            "maxLength": 100,
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateModifierGroupRequest"
            }
          },
          "HasAllergens": {
            "description": "Whether the menu item has any allergens",
            "type": "boolean"
          },
          "ReceiptNumber": {
            "description": "The Receipt number or kitchen number of the Menu Item",
            "type": "string"
          }
        },
        "example": {
          "Name": "Cheese Pizza",
          "Category": {
            "Id": "12",
            "Name": "Pizzas"
          },
          "Description": "A cheesy pizza, covered in cheese, with extra cheesy bits",
          "Labels": [
            "Vegetarian"
          ],
          "Variations": [
            {
              "Id": "1",
              "Name": "Small",
              "Price": 1
            },
            {
              "Id": "2",
              "Name": "Large",
              "Price": 2.5
            }
          ],
          "PreferenceGroups": [
            {
              "Id": "1",
              "Name": "Toppings",
              "Modifiers": [
                {
                  "Id": "123",
                  "Name": "More cheese",
                  "AdditionPrice": 0.51,
                  "Variations": [
                    {
                      "ModifierGroupId": "123",
                      "VariationId": "1",
                      "VariationName": "Small",
                      "AdditionalPrice": 0.12,
                      "Selected": true
                    },
                    {
                      "ModifierGroupId": "123",
                      "VariationId": "2",
                      "VariationName": "Large",
                      "AdditionalPrice": 0.23,
                      "Selected": true
                    }
                  ]
                }
              ]
            }
          ],
          "OptionGroups": [
            {
              "Id": "1",
              "Name": "Crusts",
              "Modifiers": [
                {
                  "Id": "123",
                  "Name": "Garlic",
                  "AdditionPrice": 0.51,
                  "Variations": [
                    {
                      "ModifierGroupId": "123",
                      "VariationId": "1",
                      "VariationName": "Small",
                      "AdditionalPrice": 0.12,
                      "Selected": true
                    },
                    {
                      "ModifierGroupId": "123",
                      "VariationId": "2",
                      "VariationName": "Large",
                      "AdditionalPrice": 0.23,
                      "Selected": true
                    }
                  ]
                }
              ]
            }
          ],
          "HasAllergens": false,
          "ReceiptNumber": "123a"
        }
      },
      "MenuAllEditsResponse": {
        "description": "All pending changes",
        "uniqueItems": false,
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/MenuEditResponse"
        },
        "example": [
          {
            "CategoryId": "1",
            "CategoryName": "Pizzas",
            "MenuItemId": "123",
            "MenuItemName": "Cheese Pizza",
            "Description": "It's a pizza",
            "Labels": [
              "Vegetarian"
            ],
            "ReceiptNumber": "321a",
            "Variations": [
              {
                "Id": "32",
                "Name": "Large",
                "Type": "???",
                "Price": 12.32,
                "PreferenceGroupIds": [
                  "12",
                  "32"
                ],
                "OptionGroupIds": [
                  "1"
                ]
              }
            ],
            "PreferenceGroups": [
              {
                "Id": "12",
                "Name": "Meats",
                "MinChoices": 0,
                "MaxChoices": 1,
                "Modifiers": [
                  {
                    "Id": "9",
                    "Name": "Ham",
                    "Variations": [
                      {
                        "ModifierGroupId": "12",
                        "VariationId": "4",
                        "VariationName": "Large",
                        "AdditionPrice": 0.5,
                        "Selected": true
                      }
                    ]
                  }
                ]
              }
            ],
            "OptionGroups": [
              {
                "Id": "1",
                "Name": "Bases",
                "MinChoices": 1,
                "MaxChoices": 1,
                "Modifiers": [
                  {
                    "Id": "9",
                    "Name": "Gluten-free",
                    "Variations": [
                      {
                        "ModifierGroupId": "1",
                        "VariationId": "4",
                        "VariationName": "Large",
                        "AdditionPrice": 1.5,
                        "Selected": true
                      },
                      {
                        "ModifierGroupId": "1",
                        "VariationId": "5",
                        "VariationName": "Small",
                        "AdditionPrice": 1.3,
                        "Selected": true
                      }
                    ]
                  }
                ]
              }
            ],
            "EditType": "Add"
          }
        ]
      },
      "MenuEditResponse": {
        "type": "object",
        "properties": {
          "CategoryId": {
            "description": "Id of the category of the menu item",
            "type": "string"
          },
          "CategoryName": {
            "description": "Name of the category of the menu item",
            "type": "string"
          },
          "MenuItemId": {
            "description": "Id of the menu item",
            "type": "string"
          },
          "MenuItemName": {
            "description": "Name of the menu item",
            "type": "string"
          },
          "Description": {
            "description": "Description of the menu item",
            "type": "string"
          },
          "Labels": {
            "description": "Labels for the menu item",
            "uniqueItems": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ReceiptNumber": {
            "description": "Receipt or kitchen number of the menu item",
            "type": "string"
          },
          "Variations": {
            "description": "Variations applicable to the menu item",
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VariationResponse"
            }
          },
          "PreferenceGroups": {
            "description": "Preference groups available for the menu item",
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModifierGroupResponse"
            }
          },
          "OptionGroups": {
            "description": "Option groups available for the menu item",
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModifierGroupResponse"
            }
          },
          "EditType": {
            "description": "Action being applied to the menu item",
            "format": "string",
            "enum": [
              "Add",
              "Edit",
              "Delete",
              "None"
            ],
            "type": "string"
          }
        },
        "example": {
          "CategoryId": "1",
          "CategoryName": "Pizzas",
          "MenuItemId": "12",
          "MenuItemName": "Cheese pizza",
          "Description": "Cheesy pizza",
          "Labels": [
            "Vegetarian"
          ],
          "ReceiptNumber": "123",
          "Variations": [
            {
              "Id": "4",
              "Name": "Large",
              "Price": 12.32,
              "PreferenceGroupIds": [
                "12",
                "32"
              ],
              "OptionGroupIds": [
                "1"
              ]
            },
            {
              "Id": "5",
              "Name": "Small",
              "Price": 8.99,
              "PreferenceGroupIds": [
                "32"
              ],
              "OptionGroupIds": [
                "1"
              ]
            }
          ],
          "PreferenceGroups": [
            {
              "Id": "12",
              "Name": "Meats",
              "MinChoices": 0,
              "MaxChoices": 1,
              "Modifiers": [
                {
                  "Id": "9",
                  "Name": "Ham",
                  "Variations": [
                    {
                      "ModifierGroupId": "12",
                      "VariationId": "4",
                      "VariationName": "Large",
                      "AdditionPrice": 0.5,
                      "Selected": true
                    }
                  ]
                }
              ]
            },
            {
              "Id": "32",
              "Name": "Veggies",
              "MinChoices": 0,
              "MaxChoices": 1,
              "Modifiers": [
                {
                  "Id": "7",
                  "Name": "Pineapple",
                  "Variations": [
                    {
                      "ModifierGroupId": "32",
                      "VariationId": "4",
                      "VariationName": "Large",
                      "AdditionPrice": 0.5,
                      "Selected": true
                    },
                    {
                      "ModifierGroupId": "32",
                      "VariationId": "5",
                      "VariationName": "Small",
                      "AdditionPrice": 0.3,
                      "Selected": true
                    }
                  ]
                }
              ]
            }
          ],
          "OptionGroups": [
            {
              "Id": "1",
              "Name": "Bases",
              "MinChoices": 1,
              "MaxChoices": 1,
              "Modifiers": [
                {
                  "Id": "9",
                  "Name": "Gluten-free",
                  "Variations": [
                    {
                      "ModifierGroupId": "1",
                      "VariationId": "4",
                      "VariationName": "Large",
                      "AdditionPrice": 1.5,
                      "Selected": true
                    },
                    {
                      "ModifierGroupId": "1",
                      "VariationId": "5",
                      "VariationName": "Small",
                      "AdditionPrice": 1.3,
                      "Selected": true
                    }
                  ]
                }
              ]
            }
          ],
          "EditType": "Add"
        }
      },
      "MenuItemDetailsResponse": {
        "type": "object",
        "properties": {
          "Category": {
            "description": "Category of the menu item",
            "$ref": "#/components/schemas/CategoryResponse"
          },
          "PreferenceGroups": {
            "description": "Preference groups of the menu item",
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModifierGroupResponse"
            }
          },
          "OptionGroups": {
            "description": "Option groups of the menu item",
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModifierGroupResponse"
            }
          },
          "Id": {
            "description": "Id of the menu item",
            "type": "string"
          },
          "Name": {
            "description": "Name of the menu item",
            "type": "string"
          },
          "Description": {
            "description": "Description of the menu item",
            "type": "string"
          },
          "IsDeal": {
            "description": "Is a deal",
            "type": "boolean"
          },
          "Labels": {
            "description": "Labels of the menu item",
            "uniqueItems": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Variations": {
            "description": "Variations applicable to the menu item",
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VariationResponse"
            }
          },
          "HasPendingChange": {
            "description": "Whether the item has pending changes",
            "type": "boolean"
          },
          "ReceiptNumber": {
            "description": "The receipt or kitchen number of the menu item",
            "type": "string"
          }
        },
        "example": {
          "Id": "1",
          "Name": "Pizza",
          "Description": "Boring pizza",
          "IsDeal": false,
          "Labels": [
            "Vegetarian"
          ],
          "Category": {
            "Id": "21",
            "Name": "Pizzas"
          },
          "Variations": [
            {
              "Id": "4",
              "Name": "Large",
              "Price": 12.32,
              "PreferenceGroupIds": [
                "12",
                "32"
              ],
              "OptionGroupIds": [
                "1"
              ]
            },
            {
              "Id": "5",
              "Name": "Small",
              "Price": 8.99,
              "PreferenceGroupIds": [
                "32"
              ],
              "OptionGroupIds": [
                "1"
              ]
            }
          ],
          "PreferenceGroups": [
            {
              "Id": "12",
              "Name": "Meats",
              "MinChoices": 0,
              "MaxChoices": 1,
              "Modifiers": [
                {
                  "Id": "9",
                  "Name": "Ham",
                  "Variations": [
                    {
                      "ModifierGroupId": "12",
                      "VariationId": "4",
                      "VariationName": "Large",
                      "AdditionPrice": 0.5,
                      "Selected": true
                    }
                  ]
                }
              ]
            },
            {
              "Id": "32",
              "Name": "Veggies",
              "MinChoices": 0,
              "MaxChoices": 1,
              "Modifiers": [
                {
                  "Id": "7",
                  "Name": "Pineapple",
                  "Variations": [
                    {
                      "ModifierGroupId": "32",
                      "VariationId": "4",
                      "VariationName": "Large",
                      "AdditionPrice": 0.5,
                      "Selected": true
                    },
                    {
                      "ModifierGroupId": "32",
                      "VariationId": "5",
                      "VariationName": "Small",
                      "AdditionPrice": 0.3,
                      "Selected": true
                    }
                  ]
                }
              ]
            }
          ],
          "OptionGroups": [
            {
              "Id": "1",
              "Name": "Bases",
              "MinChoices": 1,
              "MaxChoices": 1,
              "Modifiers": [
                {
                  "Id": "9",
                  "Name": "Gluten-free",
                  "Variations": [
                    {
                      "ModifierGroupId": "1",
                      "VariationId": "4",
                      "VariationName": "Large",
                      "AdditionPrice": 1.5,
                      "Selected": true
                    },
                    {
                      "ModifierGroupId": "1",
                      "VariationId": "5",
                      "VariationName": "Small",
                      "AdditionPrice": 1.3,
                      "Selected": true
                    }
                  ]
                }
              ]
            }
          ],
          "HasPendingChange": true,
          "ReceiptNumber": "987"
        }
      },
      "MenuItemResponse": {
        "type": "object",
        "properties": {
          "Id": {
            "description": "Id of the menu item",
            "type": "string"
          },
          "Name": {
            "description": "Name of the menu item",
            "type": "string"
          },
          "Description": {
            "description": "Description of the menu item",
            "type": "string"
          },
          "IsDeal": {
            "description": "Is a deal",
            "type": "boolean"
          },
          "Labels": {
            "description": "Labels of the menu item",
            "uniqueItems": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Variations": {
            "description": "Variations applicable to the menu item",
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VariationResponse"
            }
          },
          "HasPendingChange": {
            "description": "Whether the item has pending changes",
            "type": "boolean"
          },
          "ReceiptNumber": {
            "description": "The receipt or kitchen number of the menu item",
            "type": "string"
          }
        },
        "example": {
          "Id": "1",
          "Name": "Pizza",
          "Description": "It's a pizza",
          "IsDeal": false,
          "Labels": [
            "Vegetarian"
          ],
          "Variations": [
            {
              "Id": "4",
              "Name": "Large",
              "Price": 12.32,
              "PreferenceGroupIds": [
                "12",
                "32"
              ],
              "OptionGroupIds": [
                "1"
              ]
            },
            {
              "Id": "5",
              "Name": "Small",
              "Price": 8.99,
              "PreferenceGroupIds": [
                "32"
              ],
              "OptionGroupIds": [
                "1"
              ]
            }
          ],
          "HasPendingChange": true,
          "ReceiptNumber": "123"
        }
      },
      "MenuItemVariationResponse": {
        "type": "object",
        "properties": {
          "MenuItemId": {
            "description": "Id of the menu item",
            "type": "string"
          },
          "VariationId": {
            "description": "Id of the variation",
            "type": "string"
          },
          "UnitsOfferedInDealGroup": {
            "description": "Units offered in deal group",
            "format": "int32",
            "type": "integer"
          },
          "PreferenceGroupsIds": {
            "description": "List of Preference Group Ids",
            "uniqueItems": false,
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "example": {
          "MenuItemId": "1",
          "VariationId": "9",
          "UnitsOfferedInDealGroup": 3,
          "PreferenceGroupsIds": [
            4,
            5
          ]
        }
      },
      "ModifierGroupResponse": {
        "type": "object",
        "properties": {
          "Id": {
            "description": "Id of Modifier Group",
            "type": "string"
          },
          "Name": {
            "description": "Name of Modifier Group",
            "type": "string"
          },
          "MinChoices": {
            "description": "The minimum number of options allowed to be selected",
            "format": "int32",
            "type": "integer"
          },
          "MaxChoices": {
            "description": "The maximum number of options allowed to be selected",
            "format": "int32",
            "type": "integer"
          },
          "Modifiers": {
            "description": "A list of modifiers within the group",
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModifierResponse"
            }
          }
        },
        "example": {
          "Id": "1",
          "Name": "Toppings",
          "MinChoices": 0,
          "MaxChoices": 3,
          "Modifiers": [
            {
              "Id": "9",
              "Name": "Ham",
              "Variations": [
                {
                  "ModifierGroupId": "1",
                  "VariationId": "4",
                  "VariationName": "Large",
                  "AdditionPrice": 0.5,
                  "Selected": true
                }
              ]
            },
            {
              "Id": "10",
              "Name": "Sausage",
              "Variations": [
                {
                  "ModifierGroupId": "1",
                  "VariationId": "4",
                  "VariationName": "Large",
                  "AdditionPrice": 0.5,
                  "Selected": true
                }
              ]
            }
          ]
        }
      },
      "ModifierResponse": {
        "type": "object",
        "properties": {
          "Id": {
            "description": "Id of the modifier",
            "type": "string"
          },
          "Name": {
            "description": "Name of the modifier",
            "type": "string"
          },
          "MinChoices": {
            "description": "The minimum number of options allowed to be selected",
            "format": "int32",
            "type": "integer"
          },
          "MaxChoices": {
            "description": "The maximum number of options allowed to be selected",
            "format": "int32",
            "type": "integer"
          },
          "DefaultChoices": {
            "description": "The default number of options allowed to be selected",
            "format": "int32",
            "type": "integer"
          },
          "AdditionPrice": {
            "description": "The additional price",
            "format": "double",
            "type": "number"
          },
          "RemovePrice": {
            "description": "The cost to remove",
            "format": "double",
            "type": "number"
          },
          "Variations": {
            "description": "The variations to which this modifiers applies",
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VariationModifierResponse"
            }
          }
        },
        "example": {
          "Id": "9",
          "Name": "Ham",
          "Variations": [
            {
              "ModifierGroupId": "1",
              "VariationId": "4",
              "VariationName": "Large",
              "AdditionPrice": 0.5,
              "Selected": true
            }
          ]
        }
      },
      "UpdateMenuItemRequest": {
        "type": "object",
        "properties": {
          "Id": {
            "description": "Id",
            "type": "string"
          },
          "Name": {
            "description": "Name",
            "type": "string"
          },
          "Description": {
            "description": "Description",
            "type": "string"
          },
          "Category": {
            "description": "Category",
            "$ref": "#/components/schemas/CategoryRequest"
          },
          "Labels": {
            "description": "Labels",
            "uniqueItems": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Variations": {
            "description": "Variations",
            "maxLength": 75,
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateMenuItemVariationRequest"
            }
          },
          "PreferenceGroups": {
            "description": "Preference Groups",
            "maxLength": 100,
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateModifierGroupRequest"
            }
          },
          "OptionGroups": {
            "description": "Option Groups",
            "maxLength": 100,
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateModifierGroupRequest"
            }
          },
          "HasAllergens": {
            "description": "Whether this item has allergens",
            "type": "boolean"
          },
          "ReceiptNumber": {
            "description": "The receipt or kitchen number",
            "type": "string"
          }
        },
        "example": {
          "Id": "1",
          "Name": "Burrito",
          "Description": "Tasty burrito",
          "Category": {
            "Id": "10",
            "Name": "Lunches"
          },
          "Labels": [
            "Vegetarian"
          ],
          "Variations": [
            {
              "Id": "3",
              "Name": "Standard",
              "Price": 6.99
            }
          ],
          "PreferenceGroups": [
            {
              "Id": "13",
              "Name": "Salsas",
              "Modifiers": [
                {
                  "Id": "1",
                  "Name": "Green",
                  "Variations": [
                    {
                      "ModifierGroupId": "2",
                      "VariationId": "3",
                      "VariationName": "Standard",
                      "AdditionPrice": 0.3,
                      "Selected": true
                    }
                  ]
                },
                {
                  "Id": "2",
                  "Name": "Medium",
                  "Variations": [
                    {
                      "ModifierGroupId": "2",
                      "VariationId": "3",
                      "VariationName": "Standard",
                      "AdditionPrice": 0.3,
                      "Selected": true
                    }
                  ]
                },
                {
                  "Id": "3",
                  "Name": "Spicy",
                  "Variations": [
                    {
                      "ModifierGroupId": "2",
                      "VariationId": "3",
                      "VariationName": "Standard",
                      "AdditionPrice": 0.3,
                      "Selected": true
                    }
                  ]
                }
              ]
            }
          ],
          "OptionGroups": [
            {
              "Id": "14",
              "Name": "Rice",
              "Modifiers": [
                {
                  "Id": "5",
                  "Name": "Plain",
                  "Variations": [
                    {
                      "ModifierGroupId": "2",
                      "VariationId": "3",
                      "VariationName": "Standard",
                      "AdditionPrice": 0,
                      "Selected": true
                    }
                  ]
                },
                {
                  "Id": "6",
                  "Name": "Pilau",
                  "Variations": [
                    {
                      "ModifierGroupId": "2",
                      "VariationId": "3",
                      "VariationName": "Standard",
                      "AdditionPrice": 0,
                      "Selected": true
                    }
                  ]
                }
              ]
            }
          ],
          "HasAllergens": false,
          "ReceiptNumber": "123"
        }
      },
      "UpdateMenuItemVariationRequest": {
        "type": "object",
        "properties": {
          "Id": {
            "description": "Id",
            "type": "string"
          },
          "Name": {
            "description": "Name",
            "type": "string"
          },
          "Price": {
            "description": "Price",
            "format": "double",
            "type": "number"
          }
        },
        "example": {
          "Id": "12",
          "Name": "Extra-mega-large",
          "Price": 50
        }
      },
      "UpdateModifierGroupRequest": {
        "type": "object",
        "properties": {
          "Id": {
            "description": "Id",
            "type": "string"
          },
          "Name": {
            "description": "Name",
            "type": "string"
          },
          "Modifiers": {
            "description": "Modifiers within this group",
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateModifierRequest"
            }
          }
        },
        "example": {
          "Id": "13",
          "Name": "Salsas",
          "Modifiers": [
            {
              "Id": "1",
              "Name": "Green",
              "Variations": [
                {
                  "ModifierGroupId": "2",
                  "VariationId": "3",
                  "VariationName": "Standard",
                  "AdditionPrice": 0.3,
                  "Selected": true
                }
              ]
            },
            {
              "Id": "2",
              "Name": "Medium",
              "Variations": [
                {
                  "ModifierGroupId": "2",
                  "VariationId": "3",
                  "VariationName": "Standard",
                  "AdditionPrice": 0.3,
                  "Selected": true
                }
              ]
            },
            {
              "Id": "3",
              "Name": "Spicy",
              "Variations": [
                {
                  "ModifierGroupId": "2",
                  "VariationId": "3",
                  "VariationName": "Standard",
                  "AdditionPrice": 0.3,
                  "Selected": true
                }
              ]
            }
          ]
        }
      },
      "UpdateModifierRequest": {
        "type": "object",
        "properties": {
          "Id": {
            "description": "Id",
            "type": "string"
          },
          "Name": {
            "description": "Name",
            "type": "string"
          },
          "AdditionPrice": {
            "description": "Additional price",
            "format": "double",
            "type": "number"
          },
          "Variations": {
            "description": "Variations permitted",
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VariationModifierResponse"
            }
          }
        },
        "example": {
          "Id": "1",
          "Name": "Green",
          "Variations": [
            {
              "ModifierGroupId": "2",
              "VariationId": "3",
              "VariationName": "Standard",
              "AdditionPrice": 0.3,
              "Selected": true
            }
          ]
        }
      },
      "VariationModifierResponse": {
        "type": "object",
        "properties": {
          "ModifierGroupId": {
            "description": "Id of the modifier group",
            "type": "string"
          },
          "VariationId": {
            "description": "Id of the variation",
            "type": "string"
          },
          "VariationName": {
            "description": "Name of the variation",
            "type": "string"
          },
          "AdditionalPrice": {
            "description": "The additional price",
            "format": "double",
            "type": "number"
          },
          "Selected": {
            "description": "Whether this modifier is permitted on this variation",
            "type": "boolean"
          }
        },
        "example": {
          "ModifierGroupId": "2",
          "VariationId": "3",
          "VariationName": "Large",
          "AdditionPrice": 12.34,
          "Selected": true
        }
      },
      "VariationResponse": {
        "type": "object",
        "properties": {
          "Id": {
            "description": "Id",
            "type": "string"
          },
          "Name": {
            "description": "Name",
            "type": "string"
          },
          "Type": {
            "description": "Type",
            "type": "string"
          },
          "Price": {
            "description": "Price",
            "format": "double",
            "type": "number"
          },
          "PreferenceGroupIds": {
            "description": "List of preference group ids applicable to this variation",
            "uniqueItems": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "OptionGroupIds": {
            "description": "List of option group ids applicable to this variation",
            "uniqueItems": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "Id": "32",
          "Name": "Large",
          "Price": 12.32,
          "PreferenceGroupIds": [
            "12",
            "32"
          ],
          "OptionGroupIds": [
            "1"
          ]
        }
      },
      "acceptance-requested": {
        "type": "object",
        "properties": {
          "OrderId": {
            "type": "string"
          },
          "FriendlyOrderReference": {
            "type": "string"
          },
          "Currency": {
            "type": "string"
          },
          "TotalPrice": {
            "format": "money",
            "type": "number"
          },
          "Fulfilment": {
            "type": "object",
            "properties": {
              "Method": {
                "type": "string",
                "enum": [
                  "Delivery",
                  "Collection"
                ]
              },
              "PhoneNumber": {
                "type": "string",
                "description": "Customer phone number (will be phone masking number if enabled)"
              },
              "PhoneMaskingCode": {
                "type": "string",
                "description": "Code to use when calling customer phone masking number about this order. null if phone masking not enabled"
              },
              "CustomerDueDate": {
                "format": "date-time",
                "type": "string"
              },
              "CustomerDueAsap": {
                "type": "boolean"
              },
              "PreparationTime": {
                "format": "timespan",
                "type": "string"
              },
              "Address": {
                "$ref": "#/components/schemas/order-address"
              }
            }
          },
          "Payment": {
            "type": "object",
            "properties": {
              "Lines": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "Type": {
                      "type": "string"
                    },
                    "Value": {
                      "format": "money",
                      "type": "number"
                    },
                    "Paid": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "Customer": {
            "type": "object",
            "properties": {
              "Id": {
                "type": "number",
                "nullable": true
              },
              "Name": {
                "type": "string"
              },
              "PreviousRestaurantOrderCount": {
                "type": "number",
                "description": "The customer's previous total number of orders made to this restaurant"
              },
              "PreviousTotalOrderCount": {
                "type": "number",
                "description": "The customer's previous total number of orders made to all restaurants"
              }
            }
          },
          "Restrictions": {
            "type": "array",
            "description": "This is a list of types of restricted items contained in the order.",
            "items": {
              "$ref": "#/components/schemas/order-item-restriction"
            }
          },
          "Items": {
            "$ref": "#/components/schemas/order-item"
          },
          "PriceBreakdown": {
            "type": "object",
            "properties": {
              "Discount": {
                "format": "money",
                "type": "number",
                "nullable": true
              },
              "Tips": {
                "format": "money",
                "type": "number",
                "nullable": true
              },
              "Taxes": {
                "format": "money",
                "type": "number",
                "nullable": true
              },
              "Items": {
                "format": "money",
                "type": "number",
                "nullable": true
              },
              "Fees": {
                "type": "object",
                "properties": {
                  "Delivery": {
                    "format": "money",
                    "type": "number",
                    "nullable": true
                  },
                  "ServiceCharge": {
                    "format": "money",
                    "type": "number",
                    "nullable": true
                  },
                  "Other": {
                    "format": "money",
                    "type": "number",
                    "nullable": true
                  }
                }
              }
            }
          },
          "PlacedDate": {
            "format": "date-time",
            "type": "string"
          },
          "CustomerNotes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Restaurant": {
            "type": "object",
            "properties": {
              "Id": {
                "type": "string",
                "description": "Restaurant Id"
              },
              "Reference": {
                "type": "string"
              },
              "Name": {
                "type": "string"
              },
              "Address": {
                "$ref": "#/components/schemas/order-address"
              },
              "TimeZone": {
                "type": "string"
              },
              "PhoneNumber": {
                "type": "string"
              }
            }
          },
          "IsTest": {
            "type": "boolean"
          }
        },
        "example": {
          "OrderId": "ABCD654321",
          "FriendlyOrderReference": "REF0001",
          "Currency": "GBP",
          "TotalPrice": 19.25,
          "Fulfilment": {
            "Method": "Delivery",
            "PhoneNumber": "+441234567890",
            "PhoneMaskingCode": "9999999",
            "CustomerDueDate": "2018-03-10T14:45:28Z",
            "CustomerDueAsap": false,
            "Address": {
              "Lines": [
                "Fleet Place House",
                "Fleet Pl"
              ],
              "City": "London",
              "PostalCode": "EC4M 7RD",
              "Geolocation": {
                "Latitude": 51.51641,
                "Longitude": -0.103198
              }
            },
            "PreparationTime": "0:23:32"
          },
          "Payment": {
            "Lines": [
              {
                "Type": "AccountCredit",
                "Value": 19.25,
                "Paid": false
              },
              {
                "Type": "CreditCard",
                "Value": 19.25,
                "Paid": true
              }
            ]
          },
          "Customer": {
            "Id": 12345,
            "Name": "Bruce Wayne",
            "PreviousRestaurantOrderCount": 5,
            "PreviousTotalOrderCount": 83
          },
          "Restrictions": [
            {
              "Type": "Alcohol"
            }
          ],
          "Items": [
            {
              "Reference": "1234",
              "Name": "Chicken Box Meal",
              "Synonym": "",
              "Quantity": 2,
              "UnitPrice": 5,
              "TotalPrice": 10,
              "Items": [
                {
                  "Reference": "9876",
                  "Name": "Fries",
                  "Synonym": "Regular",
                  "Quantity": 1,
                  "UnitPrice": 0,
                  "Items": []
                },
                {
                  "Reference": "6789",
                  "Name": "Pepsi",
                  "Synonym": "330ml",
                  "Quantity": 2,
                  "UnitPrice": 0,
                  "Items": []
                }
              ]
            },
            {
              "Reference": "4321",
              "Name": "Milkshake",
              "Synonym": "",
              "Quantity": 1,
              "UnitPrice": 7.25,
              "TotalPrice": 7.25,
              "Items": []
            }
          ],
          "PriceBreakdown": {
            "Discount": 0,
            "Tips": 0.5,
            "Taxes": 3.85,
            "Items": 17.25,
            "Fees": {
              "Delivery": 1,
              "ServiceCharge": 0.5,
              "Other": 0
            }
          },
          "PlacedDate": "2018-03-10T14:45:28Z",
          "CustomerNotes": {
            "noteForRestaurant": "restaurant note",
            "noteForDelivery": "delivery note"
          },
          "Restaurant": {
            "Id": "I12345",
            "Refererence": "R99999",
            "Name": "Just Eat Test Restaurant",
            "Address": {
              "Lines": [
                "Oldridge Road"
              ],
              "City": "London",
              "PostalCode": "SW12 8PW",
              "Geolocation": {
                "Latitude": 51.4484,
                "Longitude": -0.1504
              }
            },
            "TimeZone": "Australia/Sydney (IANA format)",
            "PhoneNumber": "+441200000000"
          },
          "IsTest": true
        }
      },
      "order-accept-request": {
        "type": "object",
        "properties": {
          "TimeAcceptedFor": {
            "format": "date-time",
            "type": "string"
          }
        },
        "example": {
          "TimeAcceptedFor": "2018-03-10T14:45:28Z"
        }
      },
      "order-accepted": {
        "type": "object",
        "properties": {
          "OrderId": {
            "type": "string"
          },
          "AcceptedFor": {
            "format": "date-time",
            "type": "string"
          },
          "Event": {
            "type": "string"
          }
        },
        "example": {
          "OrderId": "123456",
          "AcceptedFor": "2018-03-10T14:45:28Z",
          "Event": "OrderAccepted"
        }
      },
      "order-address": {
        "type": "object",
        "properties": {
          "Lines": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "City": {
            "type": "string"
          },
          "PostalCode": {
            "type": "string"
          },
          "Geolocation": {
            "type": "object",
            "properties": {
              "Latitude": {
                "format": "double",
                "type": "number"
              },
              "Longitude": {
                "format": "double",
                "type": "number"
              }
            }
          }
        }
      },
      "order-cancel-request": {
        "type": "object",
        "properties": {
          "Message": {
            "description": "Reason why this order is being cancelled.",
            "type": "string"
          }
        },
        "example": {
          "Message": "Customer requested the order to be cancelled"
        }
      },
      "order-cancelled": {
        "type": "object",
        "properties": {
          "OrderId": {
            "type": "string"
          },
          "Event": {
            "type": "string"
          },
          "Reason": {
            "type": "string",
            "description": "The reason the order was cancelled.",
            "enum": [
              "cust_cancelled_changed_mind",
              "cust_cancelled_delivery_too_long",
              "cust_cancelled_made_mistake",
              "cust_cancelled_other",
              "delivery_partner_cancelled",
              "rest_cancelled_customer_absent",
              "rest_cancelled_customer_requested",
              "rest_cancelled_declined",
              "rest_cancelled_drivers_unavailable",
              "rest_cancelled_fake_order",
              "rest_cancelled_other",
              "rest_cancelled_out_of_stock",
              "rest_cancelled_too_busy",
              "system_cancelled_other",
              "system_cancelled_test_order"
            ]
          }
        },
        "example": {
          "OrderId": "ijdhpy7bdusgtc28bapspa",
          "Event": "OrderCancelled",
          "Reason": "system_cancelled_other"
        }
      },
      "order-due-date-request": {
        "type": "object",
        "properties": {
          "DueDate": {
            "description": "The updated ETA for the order",
            "format": "date-time",
            "type": "string"
          }
        },
        "example": {
          "DueDate": "2019-12-25T14:45:28Z"
        }
      },
      "order-item": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "Reference": {
              "type": "string"
            },
            "Name": {
              "type": "string"
            },
            "Quantity": {
              "type": "number"
            },
            "UnitPrice": {
              "format": "money",
              "type": "number"
            },
            "TotalPrice": {
              "format": "money",
              "type": "number"
            },
            "Items": {
              "$ref": "#/components/schemas/order-item"
            }
          }
        }
      },
      "order-reject-request": {
        "type": "object",
        "properties": {
          "Message": {
            "description": "Reason why this order is being rejected.",
            "type": "string"
          }
        },
        "example": {
          "Message": "Kitchen overloaded"
        }
      },
      "order-rejected": {
        "type": "object",
        "properties": {
          "RejectedAt": {
            "format": "date-time",
            "type": "string"
          },
          "RejectedBy": {
            "type": "string"
          },
          "RejectedReason": {
            "type": "string"
          },
          "Event": {
            "type": "string"
          }
        },
        "example": {
          "RejectedAt": "2018-03-10T14:45:28Z",
          "RejectedBy": "123456",
          "RejectedReason": "Kitchen overloaded",
          "Event": "OrderRejected"
        }
      },
      "order-status-request": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "string",
            "enum": [
              "InKitchen",
              "FailedToSendToKitchen",
              "Accepted",
              "Rejected"
            ],
            "description": "The requested new state of the order"
          },
          "TimeStamp": {
            "format": "date-time",
            "type": "string"
          },
          "Message": {
            "type": "string"
          },
          "Data": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "TimeAcceptedFor": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "Status",
          "TimeStamp"
        ],
        "example": {
          "Status": "Accepted",
          "TimeStamp": "2018-03-10T14:45:28Z"
        }
      },
      "eta-estimate": {
        "type": "object",
        "properties": {
          "estimatedAt": {
            "description": "This is the time at which you are doing the estimation",
            "type": "string",
            "format": "date-time"
          },
          "bestGuess": {
            "description": "This should represent the delivery partner's best guess at when the driver will arrive at the restaurant.",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ApproveCancellationQuery": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "fee": {
            "description": "Approved fee",
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "notes": {
            "description": "Notes about this cancellation",
            "type": "string",
            "nullable": true
          }
        }
      },
      "AppType": {
        "type": "string",
        "description": "Application type",
        "enum": [
          "Orderpad",
          "OrdertrackerDroid",
          "OrdertrackerTouch",
          "Orderbox",
          "OrderDeliveryService",
          "OrderpadDroid",
          "OrderpadTouch",
          "None"
        ]
      },
      "AttemptedDeliveryQuery": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "requestType": {
            "description": "Type of attempted delivery request",
            "type": "string",
            "nullable": true,
            "enum": [
              "problem_with_address",
              "no_answer"
            ]
          },
          "timeStamp": {
            "type": "string",
            "description": "DateTime that the query was created in ISO 8601 format",
            "format": "date-time"
          },
          "response": {
            "nullable": true,
            "description": "The customers reponse to the query",
            "$ref": "#/components/schemas/AttemptedDeliveryResponse"
          },
          "resolution": {
            "nullable": true,
            "description": "The restaurants resolution to the query",
            "$ref": "#/components/schemas/AttemptedDeliveryResolution"
          }
        }
      },
      "AttemptedDeliveryRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "reasonCode": {
            "type": "string",
            "description": "Reason for requesting attempted delivery",
            "enum": [
              "problem_with_address",
              "no_answer"
            ]
          }
        }
      },
      "AttemptedDeliveryResolution": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "redeliveryStatus": {
            "description": "Status of the redelivery request",
            "enum": [
              "driver_at_address",
              "repreparing"
            ],
            "type": "string",
            "nullable": true
          },
          "redeliveryTime": {
            "description": "Estimated redelivery time in ISO 8601 format",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "cancellationReason": {
            "description": "Reason for cancelling order",
            "enum": [
              "new_address_not_within_area",
              "unable_to_reprepare",
              "driver_not_available",
              "area_unsafe",
              "customer_doesnt_want_anymore"
            ],
            "type": "string",
            "nullable": true
          },
          "hasBeenMarkedAsOnItsWay": {
            "description": "Flag to indicate whether redelivery is on it's way",
            "type": "boolean"
          }
        }
      },
      "AttemptedDeliveryResolutionCancellationRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "reasonCode": {
            "type": "string",
            "description": "The reason the order has been cancelled",
            "enum": [
              "new_address_not_within_area",
              "unable_to_reprepare",
              "driver_not_available",
              "area_unsafe",
              "customer_doesnt_want_anymore"
            ]
          }
        }
      },
      "AttemptedDeliveryResolutionRedeliveryRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "status": {
            "type": "string",
            "description": "New status of attempted delivery",
            "nullable": true,
            "enum": [
              "driver_at_address",
              "repreparing"
            ]
          },
          "newDueDate": {
            "type": "string",
            "description": "New date and time in ISO 8601 format the order is due to be delivered",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "AttemptedDeliveryResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "responseType": {
            "description": "Response code from the customer for attempted delivery",
            "enum": [
              "response",
              "already_delivered"
            ],
            "type": "string",
            "nullable": true
          },
          "message": {
            "description": "Response message from customer",
            "type": "string",
            "nullable": true
          },
          "isViewed": {
            "description": "Has the response been viewed",
            "type": "boolean"
          }
        }
      },
      "BadItem": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the item",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity of bad items",
            "format": "int32"
          },
          "unitPrice": {
            "type": "number",
            "description": "Price of a single item in local currency",
            "format": "decimal"
          },
          "totalCost": {
            "type": "number",
            "description": "Total cost of all bad items",
            "format": "decimal"
          }
        }
      },
      "BadItemClaim": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the claim",
            "nullable": true
          },
          "status": {
            "description": "Current status of the claim",
            "$ref": "#/components/schemas/BadItemClaimStatus"
          },
          "issues": {
            "type": "array",
            "nullable": true,
            "description": "Bad item issues",
            "items": {
              "$ref": "#/components/schemas/BadItemsGroupedByIssue"
            }
          },
          "totalCost": {
            "description": "Total cost of the claim in local currency",
            "type": "number",
            "format": "decimal"
          },
          "refundRefusedReasonCode": {
            "description": "If claim is refused, the reason for refusal",
            "type": "string",
            "nullable": true
          }
        }
      },
      "BadItemClaimStatus": {
        "type": "string",
        "description": "Current status of a bad item claim",
        "enum": [
          "Pending",
          "Viewed",
          "RefundAccepted",
          "RefundRefused"
        ]
      },
      "BadItemClaimUpdate": {
        "type": "object",
        "properties": {
          "newStatus": {
            "description": "New status of claim",
            "$ref": "#/components/schemas/BadItemClaimStatus"
          },
          "refundRejectedReasonCode": {
            "description": "If claim is refused, the reason for refusal",
            "type": "string",
            "enum": [
              "AlreadyRefunded",
              "ItemReplaced",
              "PartialRefundRequired",
              "WasNotMissing",
              "WillRedeliver",
              "OrderWasHot",
              "OrderWasOnTime",
              "OrderWasPacked",
              "FoodWasIntact",
              "AddExtraItem",
              "Other"
            ]
          },
          "comment": {
            "description": "Additional comment",
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BadItemsGroupedByIssue": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "issue": {
            "enum": [
              "Missing",
              "Cold",
              "Damaged"
            ],
            "type": "string",
            "description": "Bad item issue type",
            "nullable": true
          },
          "items": {
            "type": "array",
            "nullable": true,
            "description": "Group of items which have the same issue type",
            "items": {
              "$ref": "#/components/schemas/BadItem"
            }
          }
        }
      },
      "BringOnlineRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "comment": {
            "description": "Any additional information",
            "type": "string",
            "nullable": true
          }
        }
      },
      "CancellationInfo": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "initiatedBy": {
            "description": "Whether cancellation has been initiated by restaurant or consumer",
            "$ref": "#/components/schemas/CancellationInitiatedBy"
          },
          "reason": {
            "nullable": true,
            "description": "Reason for cancellation",
            "$ref": "#/components/schemas/CancellationReason"
          },
          "restaurantTransaction": {
            "nullable": true,
            "description": "Potential compensation or fee applied to the restaurant for the cancellation",
            "$ref": "#/components/schemas/CancellationRestaurantTransaction"
          },
          "restaurantAware": {
            "description": "Is restaurant already aware of the cancellation",
            "type": "boolean"
          },
          "canRequestCompensation": {
            "description": "Can the restaurant claim compensation for this cancellation",
            "type": "boolean"
          },
          "hasRequestedCompensation": {
            "description": "Has the restaurant claimed compensation for this cancellation",
            "type": "boolean"
          }
        }
      },
      "CancellationInitiatedBy": {
        "type": "string",
        "description": "Who initiated the cancellation",
        "enum": [
          "Unknown",
          "Restaurant",
          "Customer",
          "System"
        ]
      },
      "CancellationQueryResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "orderId": {
            "description": "The id of the order",
            "type": "string",
            "nullable": true
          },
          "reasonCode": {
            "description": "Reason for order cancellation",
            "type": "string",
            "nullable": true,
            "enum": [
              "rest_cancelled_customer_requested",
              "rest_cancelled_customer_absent",
              "rest_cancelled_out_of_stock",
              "rest_cancelled_drivers_unavailable",
              "rest_cancelled_fake_order",
              "rest_cancelled_too_busy",
              "rest_cancelled_other"
            ]
          },
          "comments": {
            "type": "string",
            "description": "Additional comments",
            "nullable": true
          },
          "state": {
            "description": "Cancellation query outcome",
            "type": "string",
            "nullable": true,
            "enum": [
              "New",
              "Offered",
              "Declined",
              "Approved"
            ]
          },
          "createdAt": {
            "description": "Cancellation query creation date and time in ISO 8601 format",
            "type": "string",
            "format": "date-time"
          },
          "policyResult": {
            "description": "Result of the policy run",
            "$ref": "#/components/schemas/PolicyResult"
          },
          "resolution": {
            "description": "Resolution of this cancellation querry",
            "$ref": "#/components/schemas/CancellationResolution"
          }
        }
      },
      "CancellationReason": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "code": {
            "type": "string",
            "description": "Reason for order cancellation",
            "enum": [
              "rest_cancelled_out_of_stock",
              "rest_cancelled_drivers_unavailable",
              "rest_cancelled_customer_requested",
              "rest_cancelled_customer_absent",
              "rest_cancelled_fake_order",
              "rest_cancelled_other",
              "cust_cancelled_delivery_too_long",
              "cust_cancelled_made_mistake",
              "cust_cancelled_other",
              "cust_cancelled_changed_mind",
              "deleted_system_error",
              "deleted_test_order",
              "deleted_rejected_by_restaurant"
            ],
            "nullable": true
          },
          "description": {
            "description": "Any additional comments",
            "type": "string",
            "nullable": true
          }
        }
      },
      "CancellationResolution": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "by": {
            "description": "Role of cancellation requester",
            "type": "string",
            "nullable": true,
            "enum": [
              "Agent",
              "Restaurant",
              "System"
            ]
          },
          "userName": {
            "description": "User name who created this cancellation",
            "type": "string",
            "nullable": true
          },
          "at": {
            "description": "Creation date and time of the cancellation in ISO 8601 format",
            "type": "string",
            "format": "date-time"
          },
          "state": {
            "description": "State of the cancellation resolution",
            "type": "string",
            "nullable": true,
            "enum": [
              "Approved"
            ]
          },
          "feeApplied": {
            "description": "Approved amount",
            "type": "number",
            "format": "decimal"
          },
          "notes": {
            "description": "Additional notes",
            "type": "string",
            "nullable": true
          }
        }
      },
      "CancellationRestaurantTransaction": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "type": {
            "description": "The type of cancellation transaction",
            "$ref": "#/components/schemas/CancellationRestaurantTransactionType"
          },
          "amount": {
            "description": "The total amount of the transaction",
            "type": "number",
            "format": "decimal"
          },
          "percentage": {
            "description": "The percentage of the order value of the transaction",
            "type": "number",
            "format": "decimal"
          }
        }
      },
      "CancellationRestaurantTransactionType": {
        "type": "string",
        "description": "The transaction type",
        "enum": [
          "Unknown",
          "Compensation",
          "Fee"
        ]
      },
      "ClientOrderState": {
        "type": "string",
        "description": "The state of the client order",
        "enum": [
          "AtCounter",
          "InKitchen",
          "Ready",
          "Collected",
          "WithDriver",
          "Delivered",
          "RejectedTooBusy",
          "RejectedTooFar",
          "Cancelled",
          "Received",
          "RejectedNoDriverAvailable",
          "RejectedMenuItemsOutOfStock",
          "RejectedOther",
          "TestOrderDelete",
          "CancelledAcknowledged",
          "CancelledUnacknowledged",
          "CancelledDismissed",
          "Complete"
        ]
      },
      "CompensationReason": {
        "type": "object",
        "properties": {
          "code": {
            "description": "Compensation reason code",
            "$ref": "#/components/schemas/CompensationReasonCode"
          },
          "description": {
            "description": "Additional description",
            "type": "string",
            "nullable": true
          },
          "comments": {
            "description": "Additional comments",
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CompensationReasonCode": {
        "type": "string",
        "description": "Compensation reason code",
        "enum": [
          "Unknown",
          "NotSet",
          "BeingPrepared",
          "OnItsWay",
          "Delivered"
        ]
      },
      "CreateCancellationQuery": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "reasonCode": {
            "description": "Reason for order cancellation",
            "type": "string",
            "nullable": true,
            "enum": [
              "rest_cancelled_customer_requested",
              "rest_cancelled_customer_absent",
              "rest_cancelled_out_of_stock",
              "rest_cancelled_drivers_unavailable",
              "rest_cancelled_fake_order",
              "rest_cancelled_too_busy",
              "rest_cancelled_other"
            ]
          },
          "comments": {
            "type": "string",
            "description": "Additional comments",
            "nullable": true
          }
        }
      },
      "DeliveryDriverInfo": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "driverName": {
            "description": "The driver's first name",
            "type": "string",
            "nullable": true
          },
          "driverContactNumber": {
            "description": "The driver's contact telephone number",
            "type": "string",
            "nullable": true
          },
          "arrivalTimeAtRestaurant": {
            "description": "The ISO-8601 datetime arrival time of the driver",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "estimatedArrivalTime": {
            "description": "The ISO-8601 datetime estimated arrival of the driver",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dynamicArrivalEstimate": {
            "description": "The ISO-8601 datetime dynamic estimated arrival of the driver",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deliveryState": {
            "description": "Current state of the delivery",
            "enum": [
              "Accepted",
              "TransmissionFailed"
            ],
            "type": "string",
            "nullable": true
          }
        }
      },
      "DueTimeChange": {
        "type": "object",
        "properties": {
          "newTimeDue": {
            "description": "New DateTime of the order due in ISO 8601 format",
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "EposState": {
        "type": "string",
        "description": "Current state of sending Order to EPOS system",
        "enum": [
          "None",
          "Failed",
          "FailedAcknowledged",
          "FailedDismissed"
        ]
      },
      "GeoLocation": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "latitude": {
            "description": "The latitude component of the location",
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "longitude": {
            "description": "The longitude component of the location",
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "heading": {
            "description": "The direction of travel",
            "type": "number",
            "format": "double"
          },
          "speed": {
            "description": "The speed of travel",
            "type": "number",
            "format": "double"
          },
          "accuracy": {
            "description": "How accurate the location is",
            "type": "number",
            "format": "double"
          }
        }
      },
      "LateOrderCompensationOption": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "amount": {
            "description": "Cost of the option in local currency",
            "type": "number",
            "format": "decimal"
          },
          "isRecommended": {
            "description": "Whether this option is the recommended option",
            "type": "boolean"
          }
        }
      },
      "LateOrderCompensationQuery": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "queryId": {
            "type": "string",
            "nullable": true,
            "description": "The ID of the late order compensation query"
          },
          "compensationOptions": {
            "type": "array",
            "nullable": true,
            "description": "List of possible options for compensation",
            "items": {
              "$ref": "#/components/schemas/LateOrderCompensationOption"
            }
          },
          "isViewed": {
            "description": "Has this compensation query been viewed",
            "type": "boolean"
          },
          "response": {
            "nullable": true,
            "description": "The restaurants response to the late order compensation query",
            "$ref": "#/components/schemas/LateOrderCompensationResponse"
          }
        }
      },
      "LateOrderCompensationResolutionRequest": {
        "type": "object",
        "properties": {
          "isAccepted": {
            "description": "Is compensation accepted",
            "type": "boolean"
          },
          "acceptedAmount": {
            "description": "Accepted compensation amount",
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "rejectedReasonCode": {
            "description": "Reason code for rejection",
            "type": "string",
            "nullable": true,
            "enum": [
              "ExtraItem",
              "StuckInTraffic",
              "BusierThanExpected",
              "BadWeather",
              "UnexpectedProblems"
            ]
          }
        },
        "additionalProperties": false
      },
      "LateOrderCompensationResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "isAccepted": {
            "description": "Has the late order compensation request been accepted",
            "type": "boolean"
          },
          "acceptedAmount": {
            "description": "The amount of compensation if accepted",
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "rejectedReasonCode": {
            "description": "The rejection reason if not accepted",
            "enum": [
              "ExtraItem",
              "StuckInTraffic",
              "BusierThanExpected",
              "BadWeather",
              "UnexpectedProblems"
            ],
            "type": "string",
            "nullable": true
          }
        }
      },
      "LateOrderInfo": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "isLateOrder": {
            "description": "Is there a late order request",
            "type": "boolean"
          },
          "lateOrderProcessed": {
            "description": "Has the late order request been processed by the restaurant",
            "type": "boolean"
          }
        }
      },
      "LateOrderRequest": {
        "type": "object",
        "properties": {
          "lateOrderStatus": {
            "description": "Reason to adding minutes",
            "type": "string",
            "nullable": true,
            "enum": [
              "None",
              "Preparing",
              "OnItsWay",
              "Delivered"
            ]
          },
          "additionalMinutesToAdd": {
            "description": "Amount of minutes added",
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MenuCategory": {
        "type": "object",
        "properties": {
          "productGroups": {
            "description": "Product group",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductGroup"
            },
            "nullable": true,
            "readOnly": true
          },
          "name": {
            "description": "Name of category",
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "description": {
            "description": "Description of category",
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "MergedMenuCard": {
        "type": "object",
        "properties": {
          "categories": {
            "type": "object",
            "description": "Menu items of the restaurant with offline/online statuses grouped by category",
            "additionalProperties": {
              "$ref": "#/components/schemas/MenuCategory"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MergedMenuResponse": {
        "type": "object",
        "properties": {
          "menuCard": {
            "description": "Menu items of the restaurant with offline/online statuses grouped by category",
            "$ref": "#/components/schemas/MergedMenuCard"
          }
        },
        "additionalProperties": false
      },
      "MergedProduct": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Product name",
            "type": "string",
            "nullable": true
          },
          "ids": {
            "description": "Deprecated, not in use",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true,
            "deprecated": true
          },
          "id": {
            "description": "The id of the product",
            "type": "string",
            "nullable": true
          },
          "isOffline": {
            "description": "Is this product offline?",
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "MissingItem": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "description": "Name of the missing item",
            "type": "string",
            "nullable": true
          },
          "refundAmount": {
            "description": "Total cost of missing item",
            "type": "number",
            "format": "decimal"
          },
          "quantity": {
            "description": "Number of items missing",
            "type": "integer",
            "format": "int32"
          },
          "itemReference": {
            "description": "Product reference of missing item",
            "type": "string",
            "nullable": true
          }
        }
      },
      "MissingItemClaim": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "description": "Id of the missing item claim",
            "type": "string",
            "nullable": true
          },
          "missingItems": {
            "type": "array",
            "description": "Items that are missing",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/MissingItem"
            }
          },
          "totalAmount": {
            "description": "Total cost of the claim",
            "type": "number",
            "format": "decimal"
          },
          "status": {
            "description": "Current status of the missing item claim",
            "$ref": "#/components/schemas/MissingItemClaimStatus"
          },
          "refundRefusedReasonCode": {
            "description": "Reason for refusing if status is refused",
            "type": "string",
            "nullable": true
          },
          "totalNumberItems": {
            "description": "Total quantity of items in the claim",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "MissingItemClaimStatus": {
        "type": "string",
        "description": "Status of missing item claim",
        "enum": [
          "Unknown",
          "Pending",
          "Viewed",
          "RefundAccepted",
          "RefundRefused"
        ]
      },
      "OfflineProductsResponse": {
        "type": "object",
        "properties": {
          "offlineProducts": {
            "description": "Array of men items which are offline currently",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderpadOfflineProduct"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OptimizelyData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "dataFileRevision": {
            "description": "The index of the Optimizely revision",
            "type": "integer",
            "format": "int32"
          },
          "cdnUrl": {
            "description": "Location of the Optimizely data file",
            "type": "string",
            "nullable": true
          }
        }
      },
      "OrderHistoryItem": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "orderState": {
            "description": "State order was set to",
            "$ref": "#/components/schemas/ClientOrderState"
          },
          "detail": {
            "description": "Additional information about status update",
            "type": "string",
            "nullable": true
          },
          "occurredAt": {
            "description": "ISO 8601 Date/Time of status update",
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "description": "User who made the status update",
            "type": "string",
            "nullable": true
          }
        }
      },
      "OrderItem": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "description": "Basket Id of the order item",
            "type": "string",
            "nullable": true
          },
          "basketIds": {
            "description": "Array of basket id's that make up the item. Can be multiple due to Zeus' grouping of items",
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "itemReference": {
            "description": "Item reference uniquely identifying a product on the menu but not basket instance of a product",
            "type": "string",
            "nullable": true
          },
          "quantity": {
            "description": "Quantity of the item",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name of the item",
            "type": "string",
            "nullable": true
          },
          "menuIdentifier": {
            "description": "Just Eat menu identifier",
            "type": "string",
            "nullable": true
          },
          "menuNumber": {
            "description": "Just Eat menu number",
            "type": "string",
            "nullable": true
          },
          "totalPrice": {
            "description": "Total price of this item",
            "type": "number",
            "format": "decimal"
          },
          "comment": {
            "description": "Additional comments",
            "type": "string",
            "nullable": true
          },
          "orderItemAccessories": {
            "description": "Array of accessories for this item",
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/OrderItemAccessory"
            }
          },
          "orderItems": {
            "description": "Array of sub items for this item",
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            }
          },
          "productTypeId": {
            "description": "Just Eat product type id",
            "type": "integer",
            "format": "int32"
          },
          "productCategory": {
            "description": "Just Eat product category",
            "type": "string",
            "nullable": true
          }
        }
      },
      "OrderItemAccessory": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "description": "Id of the accessory",
            "type": "string",
            "nullable": true
          },
          "itemReference": {
            "description": "Item reference uniquely identifying a product on the menu but not basket instance of a product",
            "type": "string",
            "nullable": true
          },
          "name": {
            "description": "Name of the accessory",
            "type": "string",
            "nullable": true
          },
          "accessoryName": {
            "description": "Name of the accessory",
            "type": "string",
            "nullable": true
          },
          "totalPrice": {
            "description": "Total price of the accessory",
            "type": "number",
            "format": "decimal"
          },
          "quantity": {
            "description": "Quantity of accessories",
            "type": "integer",
            "format": "int32"
          },
          "groupId": {
            "description": "Group id of the accessory",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "OrderPadClientOrder": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "sourcePartner": {
            "description": "Information about the source of the order (Just Eat, Third Party etc.)",
            "nullable": true,
            "$ref": "#/components/schemas/PartnerInfo"
          },
          "id": {
            "description": "Id used to identify the order in Zeus",
            "type": "string",
            "nullable": true
          },
          "modernId": {
            "description": "Just Eat modern order id",
            "type": "string",
            "nullable": true
          },
          "restaurantId": {
            "description": "Restaurant Id of the order",
            "type": "string",
            "nullable": true
          },
          "orderType": {
            "description": "Type of order (collection or delivery)",
            "$ref": "#/components/schemas/OrderType"
          },
          "orderState": {
            "description": "Current state of the order",
            "$ref": "#/components/schemas/ClientOrderState"
          },
          "restaurantInformation": {
            "description": "Restaurant information for the order",
            "nullable": true,
            "$ref": "#/components/schemas/RestaurantInfo"
          },
          "customerId": {
            "description": "Platform customer id",
            "type": "string",
            "nullable": true
          },
          "externalCustomerId": {
            "description": "Customer id restaurants can use to identify customer",
            "type": "string",
            "nullable": true
          },
          "phoneMaskingCode": {
            "description": "Code to use when calling customer phone masking number about this order",
            "type": "string",
            "nullable": true
          },
          "name": {
            "description": "Customer name",
            "type": "string",
            "nullable": true
          },
          "phone": {
            "description": "Customer phone number (will be phone masking number in markets when enabled)",
            "type": "string",
            "nullable": true
          },
          "addressLines": {
            "description": "Customer address",
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "city": {
            "description": "Customer city",
            "type": "string",
            "nullable": true
          },
          "postcode": {
            "description": "Customer postcode",
            "type": "string",
            "nullable": true
          },
          "notes": {
            "description": "General order notes",
            "type": "string",
            "nullable": true
          },
          "customerNote": {
            "description": "Customer added notes",
            "type": "string",
            "nullable": true
          },
          "deliveryNote": {
            "description": "Delivery specific notes",
            "type": "string",
            "nullable": true
          },
          "previousOrdersToRestaurant": {
            "description": "Number of previous orders by the customer to this restaurant",
            "type": "string",
            "nullable": true
          },
          "previousOrders": {
            "description": "Number of previous Just Eat orders by the customer",
            "type": "string",
            "nullable": true
          },
          "location": {
            "description": "Geo location of the customers address",
            "nullable": true,
            "$ref": "#/components/schemas/GeoLocation"
          },
          "paymentInfo": {
            "description": "Payment details for the order",
            "nullable": true,
            "$ref": "#/components/schemas/PaymentInfo"
          },
          "timeDue": {
            "description": "Current agreed delivery time of the order",
            "type": "string",
            "format": "date-time"
          },
          "preferredTimeDue": {
            "description": "Current agreed delivery time of the order",
            "type": "string",
            "format": "date-time"
          },
          "asSoonAsPossible": {
            "description": "Will be false if order was a preorder",
            "type": "boolean"
          },
          "receivedAt": {
            "description": "ISO 8601 Date/Time order was paid",
            "type": "string",
            "format": "date-time"
          },
          "acceptedAt": {
            "description": "ISO 8601 Date/Time order was accepted by the restaurant",
            "type": "string",
            "format": "date-time"
          },
          "acceptedFor": {
            "description": "ISO 8601 Date/Time time due at the point of acceptance",
            "type": "string",
            "format": "date-time"
          },
          "cancelledAt": {
            "description": "ISO 8601 Date/Time order was cancelled",
            "type": "string",
            "format": "date-time"
          },
          "estimatedHandoverTimeInSeconds": {
            "description": "How long until order needs to be handed over to driver in seconds (RDS only)",
            "type": "integer",
            "format": "int32"
          },
          "estimatedDeliveryTimeInSeconds": {
            "description": "How long until order will be delivered in seconds (RDS only)",
            "type": "integer",
            "format": "int32"
          },
          "deliveryDriverUsername": {
            "description": "Delivery drivers user name (usually their phone number)",
            "type": "string",
            "nullable": true
          },
          "isRdsOrder": {
            "description": "Will be true if delivery is being arranged by Just Eat",
            "type": "boolean"
          },
          "startOrderPreparationAt": {
            "description": "ISO 8601 Date/Time for restaurant to start preparing the order",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "eposState": {
            "description": "Current state of sending the order to the restaurants EPOS system",
            "$ref": "#/components/schemas/EposState"
          },
          "isPreorder": {
            "description": "Whether order is a preorder",
            "type": "boolean"
          },
          "withDriverAt": {
            "description": "ISO 8601 Date/Time order was handed over to driver",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deliveredAt": {
            "description": "ISO 8601 Date/Time order was delivered",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "prepareOrderFor": {
            "description": "ISO 8601 Date/Time when order should be prepared for",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "rdsPickupTime": {
            "description": "ISO 8601 Date/Time when order will be picked up by RDS partner",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deliveryDriverInfo": {
            "description": "Delivery driver information",
            "nullable": true,
            "$ref": "#/components/schemas/DeliveryDriverInfo"
          },
          "orderHistory": {
            "description": "Ordered history of status updates to the order and when they happened",
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/OrderHistoryItem"
            }
          },
          "orderItems": {
            "description": "A list of order items",
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            }
          },
          "missingItemClaims": {
            "description": "A list of missing item claims attached to the order",
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/MissingItemClaim"
            }
          },
          "badItemClaims": {
            "description": "A list of bad item claims attached to the order",
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/BadItemClaim"
            }
          },
          "lateOrderInfo": {
            "description": "Details of any late order query attached to the order",
            "nullable": true,
            "$ref": "#/components/schemas/LateOrderInfo"
          },
          "attemptedDeliveryQuery": {
            "description": "Details of any attempted delivery query attached to the order",
            "nullable": true,
            "$ref": "#/components/schemas/AttemptedDeliveryQuery"
          },
          "cancellationInfo": {
            "description": "Details of any cancellation attached to the order",
            "nullable": true,
            "$ref": "#/components/schemas/CancellationInfo"
          },
          "lateOrderCompensationQuery": {
            "description": "Details of any late order compensation query attached to the order",
            "nullable": true,
            "$ref": "#/components/schemas/LateOrderCompensationQuery"
          }
        }
      },
      "OrderpadMenuItem": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The id of the menu item",
            "type": "string",
            "nullable": true
          },
          "name": {
            "description": "Name of the menu item",
            "type": "string",
            "nullable": true
          },
          "isOutOfStock": {
            "description": "Is this menu item out of stock",
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "OrderpadOfflineProduct": {
        "type": "object",
        "properties": {
          "restaurantId": {
            "description": "The Id of the restaurant",
            "type": "integer",
            "format": "int32"
          },
          "productId": {
            "description": "The id of the menu item",
            "type": "string",
            "nullable": true
          },
          "createdOn": {
            "description": "Date and time in ISO 8601 format taken offline",
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "description": "Application which requested operation e.g. Orderpad, RestaurantApp",
            "type": "string",
            "nullable": true
          },
          "nextAvailableAt": {
            "description": "Date and time in ISO 8601 format when item will be brought back online",
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrderpadSetupType": {
        "type": "string",
        "description": "Type of order pad set up",
        "enum": [
          "Unknown",
          "SignUp",
          "Upgrade",
          "Swap"
        ]
      },
      "OrdersData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "unreceivedOrders": {
            "description": "List of all changed orders for a restaurant",
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "OrderStateChange": {
        "required": [
          "newState"
        ],
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "newState": {
            "description": "New order state",
            "$ref": "#/components/schemas/ClientOrderState"
          },
          "timeAcceptedFor": {
            "description": "If accepting order what date time (with offset) are you accepting it for",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "OrderType": {
        "type": "string",
        "description": "Type of order",
        "enum": [
          "Collection",
          "Delivery",
          "Unknown"
        ]
      },
      "PartnerInfo": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "source": {
            "description": "Where did the order originate (Just Eat, third party etc.)",
            "type": "string",
            "nullable": true
          },
          "partnerId": {
            "description": "Partner id of the source",
            "type": "string",
            "nullable": true
          },
          "partnerName": {
            "description": "Partner name of the source",
            "type": "string",
            "nullable": true
          },
          "orderReference": {
            "description": "Reference that partner uses to identify the order",
            "type": "string",
            "nullable": true
          },
          "friendlyOrderReference": {
            "description": "Friendly order reference",
            "type": "string",
            "nullable": true
          }
        }
      },
      "PaymentInfo": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "currency": {
            "description": "Name of the currency used for the order",
            "type": "string",
            "nullable": true
          },
          "isCashPayment": {
            "description": "Is it a cash order",
            "type": "boolean"
          },
          "deliveryCharge": {
            "description": "Amount of cost that comes from delivery",
            "type": "number",
            "format": "decimal"
          },
          "voucherAmount": {
            "description": "Total amount paid for with a voucher",
            "type": "number",
            "format": "decimal"
          },
          "accountCreditAmount": {
            "description": "Total amount paid for with account credit",
            "type": "number",
            "format": "decimal"
          },
          "cardAmount": {
            "description": "Amount paid by card",
            "type": "number",
            "format": "decimal"
          },
          "leftToPay": {
            "description": "Amount left for customer to pay in cash after all vouchers and discounts removed from total",
            "type": "number",
            "format": "decimal"
          },
          "totalPrice": {
            "description": "Total price of the order",
            "type": "number",
            "format": "decimal"
          },
          "cardFee": {
            "description": "Card fee for the order",
            "type": "number",
            "format": "decimal"
          },
          "feeText": {
            "description": "Type of fee (`spanner`, `card`, `servicecharge`)",
            "type": "string",
            "nullable": true
          },
          "discount": {
            "description": "Total amount of discount",
            "type": "number",
            "format": "decimal"
          },
          "discountSource": {
            "description": "Source of discount (i.e. Just Eat or restaurant funded)",
            "type": "string",
            "nullable": true
          },
          "cardNumberLast4Digits": {
            "description": "Last 4 digits of the payment card",
            "type": "string",
            "nullable": true
          },
          "taxes": {
            "description": "Tax information for the order",
            "type": "object",
            "nullable": true,
            "additionalProperties": {
              "type": "number",
              "format": "decimal"
            }
          }
        }
      },
      "PolicyEligibility": {
        "type": "object",
        "properties": {
          "code": {
            "description": "Policy rule name",
            "type": "string",
            "nullable": true,
            "enum": [
              "BlockBlacklistedRestaurants",
              "BlockCashCancellationBlacklistedRestaurants",
              "BlockCashOrders",
              "CashCancellationsAreWithinAllowedThreshold",
              "CashOrderInTheWindowAfterAcceptance",
              "MaxCancellationsPerCustomer",
              "MaxCancellationsPerRestaurant",
              "EvaluateMaxOrderValue",
              "NotInTheWindowAfterAcceptance",
              "OrderCancelledStatePolicy",
              "IsRestaurantCancellationCapable"
            ]
          },
          "passed": {
            "description": "Passed or not",
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "PolicyFee": {
        "type": "object",
        "properties": {
          "amount": {
            "description": "Amount to be returned in local currency",
            "type": "number",
            "format": "decimal"
          },
          "percentage": {
            "description": "Percentage to be returned",
            "type": "number",
            "format": "decimal"
          },
          "justificationCode": {
            "description": "Justification code",
            "type": "string",
            "nullable": true,
            "enum": [
              "CancellationOutsideWindow",
              "UnChargeableReason",
              "EmptyAcceptedAt",
              "CancellationInsideWindow"
            ]
          }
        },
        "additionalProperties": false
      },
      "PolicyOutcome": {
        "type": "object",
        "properties": {
          "fee": {
            "description": "Fee details after the policy run",
            "$ref": "#/components/schemas/PolicyFee"
          },
          "decision": {
            "description": "Decision after policy run",
            "type": "string",
            "nullable": true,
            "enum": [
              "Offered",
              "Declined"
            ]
          }
        },
        "additionalProperties": false
      },
      "PolicyResult": {
        "type": "object",
        "properties": {
          "outcome": {
            "description": "Result of the policy run",
            "$ref": "#/components/schemas/PolicyOutcome"
          },
          "eligibility": {
            "description": "Eligibility details",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyEligibility"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductGroup": {
        "type": "object",
        "properties": {
          "products": {
            "description": "List of products",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MergedProduct"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PushNotificationRegistrationUpdate": {
        "type": "object",
        "properties": {
          "pushNotificationToken": {
            "description": "Push notification token",
            "type": "string",
            "nullable": true
          },
          "appType": {
            "description": "Application type",
            "$ref": "#/components/schemas/AppType"
          }
        },
        "additionalProperties": false
      },
      "PutProductBackOnTheMenuCommand": {
        "type": "object",
        "properties": {
          "deletedBy": {
            "description": "Application which requested operation e.g. Orderpad, RestaurantApp",
            "type": "string",
            "nullable": true
          },
          "productIds": {
            "description": "List of product Ids to be brought back online",
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "requestedAt": {
            "description": "Request date and time in ISO 8601 format",
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RegistrationRequest": {
        "type": "object",
        "properties": {
          "username": {
            "description": "Username",
            "type": "string",
            "nullable": true
          },
          "password": {
            "description": "Password",
            "type": "string",
            "nullable": true
          },
          "pushNotificationId": {
            "description": "The id used in push notification registration",
            "type": "string",
            "nullable": true
          },
          "appType": {
            "description": "Application type",
            "$ref": "#/components/schemas/AppType"
          }
        },
        "additionalProperties": false
      },
      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "token": {
            "description": "Created authentication token",
            "type": "string",
            "nullable": true
          },
          "restaurantId": {
            "description": "The Id of the restaurant",
            "type": "string",
            "nullable": true
          },
          "appType": {
            "description": "Application type",
            "type": "string",
            "nullable": true
          },
          "userId": {
            "description": "The Id of the user",
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RestaurantConfiguration": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the restaurant",
            "type": "string",
            "nullable": true
          },
          "postalCode": {
            "description": "Post code of the restaurant",
            "type": "string",
            "nullable": true
          },
          "website": {
            "description": "Web site address of the restaurant",
            "type": "string",
            "nullable": true
          },
          "addressLine1": {
            "description": "Address line 1",
            "type": "string",
            "nullable": true
          },
          "addressCity": {
            "description": "Address city",
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "description": "Phone number",
            "type": "string",
            "nullable": true
          },
          "logoUrl": {
            "description": "Logo URL",
            "type": "string",
            "nullable": true
          },
          "geoLocation": {
            "description": "Geo location details",
            "$ref": "#/components/schemas/GeoLocation"
          },
          "brandName": {
            "description": "Name of the brand this restaurant belongs to",
            "type": "string",
            "nullable": true
          },
          "isFlypayEposEnabled": {
            "description": "Is Flypay enabled",
            "type": "boolean"
          },
          "isRdsRestaurant": {
            "description": "Is it RDS restaurant",
            "type": "boolean"
          },
          "isDmsEnabled": {
            "description": "Is DMS enabled",
            "type": "boolean"
          },
          "supportDetails": {
            "description": "Restaurant support details",
            "$ref": "#/components/schemas/RestaurantSupportDetails"
          },
          "financeDetails": {
            "description": "Restaurant finance details",
            "$ref": "#/components/schemas/RestaurantFinanceDetails"
          },
          "tempOffline": {
            "description": "Details of temp offline",
            "$ref": "#/components/schemas/RestaurantTempOffline"
          }
        },
        "additionalProperties": false
      },
      "RestaurantFinanceDetails": {
        "type": "object",
        "properties": {
          "paymentMode": {
            "description": "Current payment mode",
            "type": "string",
            "nullable": true,
            "enum": [
              "CardOnly",
              "CardAndCash"
            ]
          }
        },
        "additionalProperties": false
      },
      "RestaurantInfo": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "description": "Restaurant name",
            "type": "string",
            "nullable": true
          },
          "postalCode": {
            "description": "Restaurant name",
            "type": "string",
            "nullable": true
          },
          "website": {
            "description": "Restaurant website",
            "type": "string",
            "nullable": true
          },
          "addressLine1": {
            "description": "Restaurant address line 1",
            "type": "string",
            "nullable": true
          },
          "addressCity": {
            "description": "Restaurant address city",
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "description": "Restaurant phone number",
            "type": "string",
            "nullable": true
          },
          "vatRegistrationNumber": {
            "description": "Restaurant VAT registration number",
            "type": "string",
            "nullable": true
          },
          "geoLocation": {
            "description": "Restaurant geolocation",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/GeoLocation"
              }
            ]
          }
        }
      },
      "RestaurantSupportDetails": {
        "type": "object",
        "properties": {
          "phoneNumber": {
            "description": "Phone number of the restaurant",
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RestaurantTempOffline": {
        "type": "object",
        "properties": {
          "type": {
            "description": "Temp offline type",
            "type": "string",
            "nullable": true,
            "enum": [
              "CancellationOutsideWindow",
              "Unset",
              "TempOffline",
              "ClosedToday",
              "ClosedDueTo",
              "OnVacationOpens",
              "OnVacationClosed",
              "None",
              "ClosedDueToEvent",
              "ClosedDueToEmergency",
              "FailedJctConnection",
              "NoTrOverride",
              "IgnoredOrders",
              "ClosedByTempOfflineTool"
            ]
          },
          "categories": {
            "description": "List of current temp offline categories",
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RestaurantUpdateResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "optimizelyData": {
            "description": "Details of current Optimizely data file and location",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/OptimizelyData"
              }
            ]
          },
          "ordersData": {
            "description": "Data containing all changed orders for a restaurant since last call",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/OrdersData"
              }
            ]
          }
        }
      },
      "SecretsResponse": {
        "type": "object",
        "properties": {
          "secrets": {
            "description": "Dictionary of secrets providers available",
            "type": "object",
            "additionalProperties": {
              "description": "Key of a single secret",
              "type": "object",
              "additionalProperties": {
                "description": "Secret value",
                "type": "string"
              }
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SendSmsRequest": {
        "type": "object",
        "properties": {
          "message": {
            "description": "Message to send",
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SendSmsResponse": {
        "type": "object",
        "properties": {
          "mobileNumberUsed": {
            "description": "Mobile number to which message were sent",
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SetPaymentModeRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "paymentMode": {
            "description": "New payment mode",
            "type": "string",
            "nullable": true,
            "enum": [
              "CardOnly",
              "CardAndCash"
            ]
          }
        }
      },
      "SetupOrderpadRequest": {
        "type": "object",
        "properties": {
          "setupType": {
            "description": "Orderpad set up type",
            "$ref": "#/components/schemas/OrderpadSetupType"
          },
          "postCode": {
            "description": "Set up postcode",
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "description": "Callback phone number",
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TakeOfflineRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "tempOfflineType": {
            "description": "Identifier of the reason for taking the restaurant offline",
            "enum": [
              "TempOffline",
              "ClosedToday"
            ],
            "type": "string",
            "nullable": true
          },
          "comment": {
            "description": "Any additional information",
            "type": "string",
            "nullable": true
          }
        }
      },
      "TakeProductOffTheMenuCommand": {
        "type": "object",
        "properties": {
          "createdBy": {
            "description": "Application which requested operation e.g. Orderpad, RestaurantApp",
            "type": "string",
            "nullable": true
          },
          "productIds": {
            "description": "List of product Ids to be taken offline",
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "requestedAt": {
            "description": "Request date and time in ISO 8601 format",
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "address": {
        "type": "object",
        "properties": {
          "AddressLines": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "City": {
            "type": "string"
          },
          "Postcode": {
            "type": "string"
          }
        }
      },
      "customer": {
        "type": "object",
        "properties": {
          "CustomerReference": {
            "type": "string"
          },
          "Email": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Address": {
            "$ref": "#/components/schemas/address"
          },
          "PhoneNumber": {
            "type": "string"
          },
          "Location": {
            "$ref": "#/components/schemas/location"
          }
        }
      },
      "fee": {
        "type": "object",
        "properties": {
          "Value": {
            "format": "money",
            "type": "number"
          },
          "Type": {
            "type": "string"
          }
        }
      },
      "fulfillment": {
        "type": "object",
        "properties": {
          "PickupTime": {
            "type": "string",
            "format": "date-time"
          },
          "Method": {
            "type": "string"
          },
          "Table": {
            "type": "string"
          }
        }
      },
      "order-request": {
        "type": "object",
        "properties": {
          "OrderReference": {
            "type": "string"
          },
          "FriendlyOrderReference": {
            "type": "string"
          },
          "EventUpdateUri": {
            "type": "string"
          },
          "Fulfillment": {
            "$ref": "#/components/schemas/fulfillment"
          },
          "RestaurantReference": {
            "type": "string"
          },
          "Payment": {
            "$ref": "#/components/schemas/payment"
          },
          "Customer": {
            "$ref": "#/components/schemas/customer"
          },
          "Basket": {
            "type": "string"
          },
          "CustomerNote": {
            "type": "string"
          },
          "PlacedDate": {
            "type": "string",
            "format": "date-time"
          },
          "DueDate": {
            "type": "string",
            "format": "date-time"
          },
          "TimeStampAccepted": {
            "type": "string",
            "format": "date-time"
          },
          "IsRds": {
            "type": "boolean"
          },
          "RestaurantDetails": {
            "$ref": "#/components/schemas/restaurant-details"
          },
          "PartnerName": {
            "type": "string"
          },
          "PartnerSubscriptionId": {
            "type": "integer"
          }
        },
        "required": [
          "PlacedDate",
          "DueDate",
          "OrderReference",
          "Payment",
          "Customer",
          "Basket",
          "RestaurantDetails",
          "PartnerSubscriptionId"
        ]
      },
      "payment": {
        "type": "object",
        "properties": {
          "DriverTipValue": {
            "format": "money",
            "type": "number"
          },
          "Total": {
            "format": "money",
            "type": "number"
          },
          "CashOnDelivery": {
            "type": "boolean"
          },
          "RestaurantTipValue": {
            "format": "money",
            "type": "number"
          },
          "DeliveryCharge": {
            "format": "money",
            "type": "number"
          },
          "CardCharges": {
            "format": "money",
            "type": "number"
          },
          "Fees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/fee"
            }
          }
        }
      },
      "restaurant-details": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer"
          },
          "Email": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Address": {
            "type": "string"
          },
          "City": {
            "type": "string"
          },
          "Postcode": {
            "type": "string"
          },
          "PhoneNumber": {
            "type": "string"
          },
          "Location": {
            "$ref": "#/components/schemas/location"
          }
        },
        "required": [
          "Id",
          "Email",
          "Name",
          "Address",
          "Location"
        ]
      },
      "address-v2": {
        "type": "object",
        "properties": {
          "Lines": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "City": {
            "type": "string"
          },
          "PostalCode": {
            "type": "string"
          },
          "GeoLocation": {
            "$ref": "#/components/schemas/location-v2"
          }
        },
        "required": [
          "Lines",
          "City",
          "PostalCode",
          "Geolocation"
        ]
      },
      "customer-v2": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Email": {
            "type": "string"
          },
          "PhoneNumber": {
            "type": "string",
            "description": "The customer's real phone number"
          },
          "DisplayPhoneNumber": {
            "type": "string",
            "description": "If you implement phone masking provide a masked number here"
          },
          "Address": {
            "$ref": "#/components/schemas/address-v2"
          }
        },
        "required": [
          "Name",
          "PhoneNumber",
          "Address"
        ]
      },
      "fulfilment-v2": {
        "type": "object",
        "properties": {
          "Method": {
            "type": "string",
            "enum": [
              "Delivery",
              "Collection"
            ]
          },
          "DueDate": {
            "type": "string",
            "format": "date-time",
            "description": "The time the customer expects the food. Time must be in the future"
          },
          "DueAsap": {
            "type": "boolean",
            "description": "If food should be delivered ASAP"
          }
        },
        "required": [
          "Method",
          "DueDate"
        ],
        "example": {
          "Method": "Delivery",
          "DueDate": "2020-01-01T09:00:00.000Z",
          "DueAsap": false
        }
      },
      "item-v2": {
        "type": "object",
        "properties": {
          "Reference": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Quantity": {
            "type": "integer"
          },
          "UnitPrice": {
            "format": "money",
            "type": "integer"
          },
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/item-v2"
            }
          }
        }
      },
      "items-v2": {
        "type": "object",
        "properties": {
          "TotalPrice": {
            "format": "money",
            "type": "number",
            "description": "Price of this item x quantity and all sub items"
          },
          "Reference": {
            "type": "string",
            "description": "The item's ID that you hold"
          },
          "Name": {
            "type": "string"
          },
          "Quantity": {
            "type": "integer",
            "minimum": 1
          },
          "UnitPrice": {
            "format": "money",
            "type": "integer"
          },
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/item-v2"
            }
          }
        },
        "required": [
          "TotalPrice",
          "Reference",
          "Name",
          "Quantity"
        ]
      },
      "lines-v2": {
        "type": "object",
        "properties": {
          "Type": {
            "type": "string",
            "enum": [
              "Cash",
              "Card",
              "AccountCredit",
              "Voucher"
            ]
          },
          "Value": {
            "format": "money",
            "type": "number"
          },
          "Paid": {
            "type": "boolean"
          },
          "LastCardDigits": {
            "type": "string"
          },
          "ServiceFee": {
            "format": "double",
            "type": "number"
          }
        },
        "required": [
          "Type"
        ]
      },
      "location-v2": {
        "type": "object",
        "properties": {
          "Latitude": {
            "format": "double",
            "type": "number"
          },
          "Longitude": {
            "format": "double",
            "type": "number"
          }
        },
        "required": [
          "Latitude",
          "Longitude"
        ],
        "example": {
          "Latitude": 51.51641,
          "Longitude": -0.103198
        }
      },
      "order-request-v2": {
        "type": "object",
        "properties": {
          "OrderReference": {
            "type": "string"
          },
          "FriendlyOrderReference": {
            "type": "string"
          },
          "CustomerNotes": {
            "type": "object",
            "properties": {
              "NoteForRestaurant": {
                "type": "string"
              },
              "NoteForDelivery": {
                "type": "string"
              }
            },
            "example": {
              "NoteForRestaurant": "Make it spicy",
              "NoteForDelivery": "Red door"
            }
          },
          "IsTest": {
            "type": "boolean"
          },
          "TotalPrice": {
            "format": "double",
            "type": "number"
          },
          "Restaurant": {
            "$ref": "#/components/schemas/restaurant-v2"
          },
          "Customer": {
            "$ref": "#/components/schemas/customer-v2"
          },
          "Fulfilment": {
            "$ref": "#/components/schemas/fulfilment-v2"
          },
          "Payment": {
            "$ref": "#/components/schemas/payment-v2"
          },
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/items-v2"
            }
          }
        },
        "required": [
          "OrderReference",
          "TotalPrice",
          "Restaurant",
          "Customer",
          "Fulfilment",
          "Payment",
          "Items"
        ]
      },
      "payment-v2": {
        "type": "object",
        "properties": {
          "PaidDate": {
            "type": "string",
            "format": "date-time"
          },
          "Tips": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/fee"
            }
          },
          "Fees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/fee"
            }
          },
          "Taxes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tax-v2"
            }
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/lines-v2"
            }
          }
        },
        "required": [
          "Lines"
        ],
        "example": {
          "Lines": [
            {
              "Type": "Card",
              "Value": 19.95,
              "Paid": true,
              "LastCardDigits": "1234",
              "ServiceFee": 0
            }
          ],
          "Tips": [
            {
              "Type": "driver",
              "Value": 2.5
            }
          ],
          "Fees": [
            {
              "Type": "card",
              "Value": 0.25
            },
            {
              "Type": "delivery",
              "Value": 3.5
            }
          ]
        }
      },
      "restaurant-v2": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "Id": {
                "type": "integer",
                "description": "Our restaurant ID"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "Reference": {
                "type": "string",
                "description": "If we hold a mapping for your restaurant IDs to ours - use your ID here"
              }
            }
          }
        ]
      },
      "tax-v2": {
        "type": "object",
        "properties": {
          "Value": {
            "format": "money",
            "type": "number"
          },
          "Type": {
            "type": "string"
          },
          "Percentage": {
            "format": "double",
            "type": "number"
          }
        },
        "required": [
          "Value",
          "Type",
          "Percentage"
        ]
      },
      "item": {
        "type": "object",
        "properties": {
          "Reference": {
            "type": "string"
          },
          "OptionReference": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Quantity": {
            "type": "number",
            "format": "int32"
          },
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/item"
            }
          }
        }
      },
      "order-ready-for-preparation": {
        "type": "object",
        "properties": {
          "OrderId": {
            "type": "string"
          },
          "Currency": {
            "type": "string"
          },
          "TotalPrice": {
            "format": "money",
            "type": "number"
          },
          "Fulfilment": {
            "type": "object",
            "properties": {
              "Method": {
                "type": "string",
                "enum": [
                  "Delivery",
                  "Collection"
                ]
              },
              "CustomerDueDate": {
                "type": "string",
                "format": "date-time"
              },
              "CustomerDueAsap": {
                "type": "boolean"
              },
              "PrepareFor": {
                "type": "string",
                "format": "date-time"
              },
              "PreparationTime": {
                "type": "string",
                "format": "timespan"
              },
              "Address": {
                "type": "object",
                "properties": {
                  "Lines": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "City": {
                    "type": "string"
                  },
                  "PostalCode": {
                    "type": "string"
                  },
                  "Geolocation": {
                    "$ref": "#/components/schemas/location"
                  }
                }
              },
              "PhoneNumber": {
                "type": "string"
              }
            }
          },
          "Payment": {
            "type": "object",
            "properties": {
              "Lines": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "Type": {
                      "type": "string",
                      "enum": [
                        "card",
                        "cash",
                        "credit",
                        "other"
                      ]
                    },
                    "Value": {
                      "type": "number",
                      "format": "money"
                    },
                    "Paid": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "Customer": {
            "type": "object",
            "properties": {
              "Id": {
                "type": "string"
              },
              "Name": {
                "type": "string"
              }
            }
          },
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/item-v2"
            }
          },
          "PriceBreakdown": {
            "type": "object",
            "properties": {
              "Discount": {
                "format": "money",
                "type": "number"
              },
              "Tips": {
                "format": "money",
                "type": "number"
              },
              "Taxes": {
                "format": "money",
                "type": "number"
              },
              "Items": {
                "format": "money",
                "type": "number"
              },
              "Fees": {
                "type": "object",
                "properties": {
                  "Delivery": {
                    "format": "money",
                    "type": "number"
                  },
                  "ServiceCharge": {
                    "format": "money",
                    "type": "number"
                  },
                  "Other": {
                    "format": "money",
                    "type": "number"
                  }
                }
              }
            }
          },
          "CustomerNotes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "PlacedDate": {
            "type": "string",
            "format": "date-time"
          },
          "Restaurant": {
            "type": "object",
            "properties": {
              "Id": {
                "type": "string"
              },
              "Reference": {
                "type": "string"
              },
              "Name": {
                "type": "string"
              },
              "Address": {
                "type": "object",
                "properties": {
                  "Lines": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "City": {
                    "type": "string"
                  },
                  "PostalCode": {
                    "type": "string"
                  },
                  "Geolocation": {
                    "$ref": "#/components/schemas/location"
                  }
                }
              },
              "PhoneNumber": {
                "type": "string"
              }
            }
          },
          "IsTest": {
            "type": "boolean"
          }
        },
        "example": {
          "OrderId": "XYZ123456",
          "Currency": "GBP",
          "TotalPrice": 19.25,
          "Fulfilment": {
            "Method": "Delivery",
            "CustomerDueDate": "2018-03-10T14:45:28Z",
            "CustomerDueAsap": false,
            "Address": {
              "Lines": [
                "Fleet Place House",
                "Fleet Pl"
              ],
              "City": "London",
              "PostalCode": "EC4M 7RD",
              "Geolocation": {
                "Latitude": 51.51641,
                "Longitude": -0.103198
              }
            },
            "PhoneNumber": "+441234567890"
          },
          "Payment": {
            "Lines": [
              {
                "Type": "card",
                "Value": 19.25,
                "Paid": false
              }
            ]
          },
          "Customer": {
            "Id": "Batman",
            "Name": "Bruce Wayne"
          },
          "Items": [
            {
              "Reference": "1234",
              "Name": "Chicken Box Meal",
              "Synonym": "",
              "Quantity": 2,
              "UnitPrice": 5,
              "TotalPrice": 10,
              "Items": [
                {
                  "Reference": "9876",
                  "Name": "Fries",
                  "Synonym": "Regular",
                  "Quantity": 1,
                  "UnitPrice": 0,
                  "Items": []
                },
                {
                  "Reference": "6789",
                  "Name": "Pepsi",
                  "Synonym": "330ml",
                  "Quantity": 2,
                  "UnitPrice": 0,
                  "Items": []
                }
              ]
            },
            {
              "Reference": "4321",
              "Name": "Milkshake",
              "Synonym": "",
              "Quantity": 1,
              "UnitPrice": 7.25,
              "TotalPrice": 7.25,
              "Items": []
            }
          ],
          "PriceBreakdown": {
            "Discount": 0,
            "Tips": 0.5,
            "Taxes": 3.85,
            "Items": 17.25,
            "Fees": {
              "Delivery": 1,
              "ServiceCharge": 0.5,
              "Other": 0
            }
          },
          "CustomerNotes": [
            {
              "Key": "Floor",
              "Value": "5th floor"
            },
            {
              "Key": "Code",
              "Value": "Code 1234"
            }
          ],
          "PlacedDate": "2018-03-10T14:45:28Z",
          "Restaurant": {
            "Id": "99999",
            "Name": "Just Eat Test Restaurant",
            "Address": {
              "Lines": [
                "Oldridge Road"
              ],
              "City": "London",
              "PostalCode": "SW12 8PW",
              "Geolocation": {
                "Latitude": 51.4484,
                "Longitude": -0.1504
              }
            },
            "PhoneNumber": "+441200000000",
            "Refererence": "R99999"
          },
          "IsTest": true
        }
      },
      "send-to-pos-failed": {
        "type": "object",
        "properties": {
          "OrderId": {
            "type": "string"
          }
        }
      },
      "PagedAfterOnlyCursorResponse": {
        "type": "object",
        "properties": {
          "paging": {
            "type": "object",
            "description": "Consists of pagination information.",
            "properties": {
              "cursors": {
                "type": "object",
                "description": "Consists of cursors markers used in forward only pagination.",
                "properties": {
                  "after": {
                    "type": "string",
                    "description": "Cursor parameter to use in the next request to the resource to fetch the next page of data."
                  }
                }
              }
            }
          }
        },
        "example": {
          "paging": {
            "cursors": {
              "after": "NDMyNzQyODI3OTQw"
            }
          }
        }
      },
      "DeliveryFee": {
        "type": "object",
        "properties": {
          "zoneId": {
            "type": "string",
            "description": "Id of assigned zone"
          },
          "zoneName": {
            "type": "string",
            "description": "Name of assigned zone"
          },
          "deliveryCharge": {
            "type": "object",
            "description": "base delivery charge for a given zone",
            "properties": {
              "currency": {
                "type": "string",
                "description": "Currency code in ISO 4217 format"
              },
              "value": {
                "type": "integer",
                "format": "int32",
                "description": "Smallest unit of local currency"
              }
            }
          },
          "minimumOrder": {
            "type": "object",
            "description": "Minimum order value",
            "properties": {
              "currency": {
                "type": "string",
                "description": "Currency code in ISO 4217 format"
              },
              "value": {
                "type": "integer",
                "format": "int32",
                "description": "Smallest unit of local currency"
              }
            }
          },
          "freeDelivery": {
            "type": "object",
            "description": "Free delivery over order price",
            "properties": {
              "currency": {
                "type": "string",
                "description": "Currency code in ISO 4217 format"
              },
              "value": {
                "type": "integer",
                "format": "int32",
                "description": "Smallest unit of local currency"
              }
            }
          },
          "smallOrderCharge": {
            "type": "object",
            "description": "delivery charge for orders that has order value less then `minimumOrder`",
            "properties": {
              "currency": {
                "type": "string",
                "description": "Currency code in ISO 4217 format"
              },
              "value": {
                "type": "integer",
                "format": "int32",
                "description": "Smallest unit of local currency"
              }
            }
          }
        }
      },
      "DeliveryZone": {
        "type": "object",
        "properties": {
          "zoneId": {
            "type": "string",
            "description": "id of the zone"
          },
          "deliveryMinutes": {
            "type": "integer",
            "format": "int32",
            "description": "geographical zone generated by SKIP, based on delivery minutes."
          },
          "unboundedZone": {
            "type": "object",
            "description": "json representation of delivery zone",
            "properties": {
              "coordinates": {
                "type": "array",
                "description": "geographical polygon https://tools.ietf.org/html/rfc7946#section-3.1.4. It might consist from multiple linear rings",
                "items": {
                  "type": "object",
                  "properties": {
                    "coordinates": {
                      "description": "geographical coordinates of linear ring",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "longitude": {
                            "description": "geographical point longitude",
                            "type": "number",
                            "format": "decimal"
                          },
                          "latitude": {
                            "description": "geographical point latitude",
                            "type": "number",
                            "format": "decimal"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "example": {
          "zoneId": "1",
          "deliveryMinutes": 5,
          "unboundedZone": {
            "items": [
              {
                "coordinates": null,
                "items": [
                  {
                    "longitude": -2.08593559299993,
                    "latitude": 57.159200668
                  },
                  {
                    "longitude": -2.18593559299993,
                    "latitude": 57.459200668
                  },
                  {
                    "longitude": -2.28593559299993,
                    "latitude": 57.159200668
                  },
                  {
                    "longitude": -2.08593559299993,
                    "latitude": 57.159200668
                  }
                ]
              }
            ]
          }
        }
      },
      "GetDeliveryFeesResponse": {
        "type": "object",
        "properties": {
          "deliveryFees": {
            "type": "array",
            "description": "restaurant delivery fees",
            "nullable": false,
            "items": {
              "$ref": "#/components/schemas/DeliveryFee"
            }
          }
        },
        "example": {
          "deliveryFees": [
            {
              "zoneId": "1",
              "zoneName": "Zone 1",
              "deliveryCharge": {
                "currency": "GBP",
                "value": 100
              },
              "minimumOrder": {
                "currency": "GBP",
                "value": 500
              },
              "freeDelivery": {
                "currency": "GBP",
                "value": 1000
              },
              "smallOrderCharge": {
                "currency": "GBP",
                "value": 200
              }
            },
            {
              "zoneId": "2",
              "zoneName": "Zone 2",
              "deliveryCharge": {
                "currency": "GBP",
                "value": 200
              },
              "minimumOrder": {
                "currency": "GBP",
                "value": 500
              },
              "freeDelivery": {
                "currency": "GBP",
                "value": 2000
              },
              "smallOrderCharge": {
                "currency": "GBP",
                "value": 300
              }
            }
          ]
        }
      },
      "GetDeliveryZonesResponse": {
        "type": "object",
        "properties": {
          "deliveryZones": {
            "type": "array",
            "description": "restaurant delivery zones. Maximum `deliveryZones` response size should be less than 20KB",
            "nullable": false,
            "maxItems": 5,
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/DeliveryZone"
            }
          }
        },
        "example": {
          "deliveryZones": [
            {
              "zoneId": "1",
              "deliveryMinutes": 5,
              "unboundedZone": {
                "items": [
                  {
                    "coordinates": null,
                    "items": [
                      {
                        "longitude": -2.08593559299993,
                        "latitude": 57.159200668
                      },
                      {
                        "longitude": -2.18593559299993,
                        "latitude": 57.459200668
                      },
                      {
                        "longitude": -2.28593559299993,
                        "latitude": 57.159200668
                      },
                      {
                        "longitude": -2.08593559299993,
                        "latitude": 57.159200668
                      }
                    ]
                  }
                ]
              }
            },
            {
              "zoneId": "2",
              "deliveryMinutes": 7,
              "unboundedZone": {
                "items": [
                  {
                    "coordinates": null,
                    "items": [
                      {
                        "longitude": -2.08593559299993,
                        "latitude": 57.159200668
                      },
                      {
                        "longitude": -2.18593559299993,
                        "latitude": 57.459200668
                      },
                      {
                        "longitude": -2.28593559299993,
                        "latitude": 57.159200668
                      },
                      {
                        "longitude": -2.08593559299993,
                        "latitude": 57.159200668
                      }
                    ]
                  }
                ]
              }
            }
          ]
        }
      },
      "GetSettingsResponse": {
        "type": "object",
        "properties": {
          "deliveryFeesFeatureState": {
            "type": "string",
            "description": "Delivery fees feature state.",
            "nullable": false,
            "enum": [
              "Unreleased",
              "Disabled",
              "Enabled"
            ]
          },
          "deliveryAreaFeatureState": {
            "type": "string",
            "description": "Delivery area feature state.",
            "nullable": false,
            "enum": [
              "Unreleased",
              "Disabled",
              "Enabled"
            ]
          },
          "isRestaurantWhiteListed": {
            "type": "boolean",
            "description": "We are going to use smooth 'delivery fees' feature rollout. So, in the first iteration feature will be available for a several restaurants."
          }
        },
        "example": {
          "deliveryFeesFeatureState": "Unreleased",
          "deliveryAreaFeatureState": "Enabled",
          "isRestaurantWhiteListed": true
        }
      },
      "ChangeRestaurantContactsRequest": {
        "type": "object",
        "description": "Request containing new restaurant and owner contact details",
        "properties": {
          "restaurantPhoneNumber": {
            "type": "string",
            "description": "Restaurant phone number in E.164 format."
          },
          "ownerMobileNumber": {
            "type": "string",
            "description": "Restaurant owner mobile phone number in E.164 format."
          },
          "restaurantEmailAddress": {
            "type": "string",
            "description": "Restaurant email address"
          }
        },
        "example": {
          "restaurantPhoneNumber": "+14151231234",
          "ownerMobileNumber": "+14151231234",
          "restaurantEmailAddress": "super-kebab@gmail.com"
        }
      },
      "ChangeRestaurantLogoRequest": {
        "type": "object",
        "description": "Request containing path to new logo file that was  uploaded to AWS S3 bucket",
        "properties": {
          "fileKey": {
            "type": "string",
            "description": "Path to the file that was uploaded to the AWS S3 bucket"
          }
        },
        "example": {
          "fileKey": "ASIASJNB7IVSWQWRLQEQ_logo.jpeg"
        }
      },
      "ChangeRestaurantMenuItemsRequest": {
        "type": "object",
        "description": "Request containing information about what to change in the restaurant menu (item/section/category)",
        "properties": {
          "message": {
            "type": "string",
            "description": "The message with the details of what needs to be changed in the menu (item/section/category)"
          },
          "containsAllergensInfomation": {
            "description": "The value indicating whether request has changes of allergen information",
            "type": "boolean"
          }
        },
        "example": {
          "message": "Change name from \"Meat burger\" to \"Vegan burger\"",
          "containsAllergensInfomation": true
        }
      },
      "ChangeRestaurantMenuPricesRequest": {
        "type": "object",
        "description": "Request containing information about restaurant menu price changes",
        "properties": {
          "message": {
            "type": "string",
            "description": "The message with the details of what prices need to be changed"
          },
          "fileKeys": {
            "description": "Array of paths to the updated menu files that Were uploaded to the AWS S3 bucket",
            "type": "array",
            "maxLength": 10,
            "items": {
              "type": "string",
              "description": "Path to the file that was uploaded to the certain AWS S3 bucket"
            }
          }
        },
        "example": {
          "message": "Change the price of \"Meat burger\" from 5$ to 7$",
          "fileKeys": [
            "3c81dq0k9bhj1bn_menu_1.pdf",
            "1rhj7qhr6fhjgbm_menu_2.pdf"
          ]
        }
      },
      "CreateSupportTicketRequest": {
        "type": "object",
        "description": "Request containing support ticket information",
        "properties": {
          "message": {
            "type": "string",
            "description": "The message with the support details"
          },
          "type": {
            "type": "string",
            "description": "Type the ticket belongs to"
          },
          "subject": {
            "type": "string",
            "description": "Subject of the ticket"
          }
        },
        "example": {
          "message": "Change weekly budget",
          "type": "top_placement__interest",
          "subject": "Top Placement - Interest"
        }
      },
      "GeneratePresignedFIleUploadUrlRequest": {
        "type": "object",
        "description": "Request that contains information about file that will be uploaded to an AWS S3 bucket",
        "properties": {
          "fileName": {
            "type": "string",
            "description": "The name of file that will be uploaded to the AWS S3 bucket"
          },
          "fileSizeInBytes": {
            "type": "number",
            "format": "int32",
            "description": "The size of file that will be uploaded to the AWS S3 bucket, in bytes"
          }
        },
        "example": {
          "fileName": "menu.pdf",
          "fileSizeInBytes": 4574745
        }
      },
      "GeneratePresignedFIleUploadUrlResponse": {
        "type": "object",
        "description": "Response that provides all needed metadata to build signed request to upload file to AWS S3 bucket from a client application",
        "properties": {
          "url": {
            "type": "string",
            "description": "The URL of the bucket in which file will be uploaded"
          },
          "fields": {
            "type": "object",
            "description": "Request metadata to make upload to S3 bucket",
            "properties": {
              "Content-Type": {
                "type": "string",
                "description": "Content-Type of uploaded file"
              },
              "key": {
                "type": "string",
                "description": "File name that will be obtained after uploading"
              },
              "bucket": {
                "type": "string",
                "description": "Name of the bucket in which file will be uploaded"
              },
              "X-Amz-Algorithm": {
                "type": "string",
                "description": "The signing algorithm that you used to calculate the signature."
              },
              "X-Amz-Credential": {
                "type": "string",
                "description": "a string of the following form `<aws-access-key-id>/<date>/<aws-region>/<aws-service>/aws4_request`"
              },
              "X-Amz-Date": {
                "type": "string",
                "description": "The date value specified in the ISO8601 formatted string."
              },
              "X-Amz-Security-Token": {
                "type": "string",
                "description": "AWS account token"
              },
              "Policy": {
                "type": "string",
                "description": "The Base64 encoded security policy that describes what is permitted in the request"
              },
              "X-Amz-Signature": {
                "type": "string",
                "description": "The HMACSHA256 hash of the security policy"
              }
            }
          }
        },
        "example": {
          "url": "https://s3.eu-west-1.amazonaws.com/qa28-presigned-post-data",
          "fields": {
            "Content-Type": "application/pdf",
            "key": "3c816agk9cpvahl_menu.pdf",
            "bucket": "qa28-presigned-post-data",
            "X-Amz-Algorithm": "AWS4-HMAC-SHA256",
            "X-Amz-Credential": "...redacted...",
            "X-Amz-Date": "20200423T120247Z",
            "X-Amz-Security-Token": "...redacted...",
            "Policy": "...redacted...",
            "X-Amz-Signature": "...redacted..."
          }
        }
      },
      "GetSupportRequestsResponse": {
        "type": "object",
        "description": "Response representing support requests from restaurant",
        "properties": {
          "requests": {
            "type": "array",
            "description": "List of restaurant support requests",
            "items": {
              "$ref": "#/components/schemas/SupportRequest"
            }
          },
          "paging": {
            "type": "object",
            "description": "Consists of pagination information",
            "properties": {
              "count": {
                "type": "integer",
                "description": "The total number of results",
                "format": "int64"
              }
            }
          }
        },
        "example": {
          "requests": [
            {
              "id": "5646645",
              "submittedDate": "2020-01-01T09:30:00.000Z",
              "status": "open",
              "subject": "Top Placement"
            },
            {
              "id": "235253",
              "submittedDate": "2020-01-01T09:30:00.000Z",
              "status": "closed",
              "subject": "Change Logo Request"
            }
          ],
          "paging": {
            "count": 35
          }
        }
      },
      "GetSupportRequestTypesResponse": {
        "type": "array",
        "description": "Array of types request belongs to",
        "minLength": 1,
        "items": {
          "$ref": "#/components/schemas/SupportRequestType"
        },
        "example": [
          {
            "name": "Top Placement",
            "value": "top_placement",
            "subtype": [
              {
                "name": "Interest",
                "value": "top_placement__interest",
                "subtype": []
              },
              {
                "name": "Issue",
                "value": "top_placement__issue",
                "subtype": []
              }
            ]
          },
          {
            "name": "Menu update",
            "value": "menu_update",
            "subtypes": []
          }
        ]
      },
      "ReplaceRestaurantMenuRequest": {
        "type": "object",
        "description": "request containing links in s3 to new menu files",
        "properties": {
          "fileKeys": {
            "description": "Array of paths to the new menu files that were uploaded to the certain AWS s3 bucket",
            "type": "array",
            "maxLength": 10,
            "items": {
              "type": "string",
              "description": "path to the new menu file that Was uploaded to the certain AWS s3 bucket"
            }
          }
        },
        "example": {
          "fileKeys": [
            "3c81dq0k9bhj1bn_menu_1.pdf",
            "1rhj7qhr6fhjgbm_menu_2.pdf"
          ]
        }
      },
      "SupportRequest": {
        "type": "object",
        "description": "Object that represents support request",
        "properties": {
          "id": {
            "type": "string",
            "description": "The Id of the request"
          },
          "submittedDate": {
            "type": "string",
            "format": "date-time",
            "description": "Request placed date"
          },
          "status": {
            "enum": [
              "new",
              "open",
              "closed",
              "pending",
              "solved",
              "hold",
              "deleted"
            ],
            "description": "Request status"
          },
          "subject": {
            "type": "string",
            "description": "Request subject"
          }
        }
      },
      "SupportRequestType": {
        "type": "object",
        "description": "Object that represents type/sub-type of request",
        "properties": {
          "name": {
            "type": "string",
            "description": "Human readable name"
          },
          "value": {
            "type": "string",
            "description": "Type value which will be used for Zendesk ticket as a tag"
          },
          "subTypes": {
            "type": "array",
            "description": "Possible sub-types of request",
            "items": {
              "$ref": "#/components/schemas/SupportRequestType"
            }
          }
        }
      },
      "RestaurantInvoiceDownloadInformation": {
        "type": "object",
        "properties": {
          "downloadUrl": {
            "type": "string",
            "description": "The URL to download invoice content"
          },
          "expires": {
            "type": "string",
            "format": "date-time",
            "description": "The time when the download URL expires and becomes invalid to download invoice content"
          }
        },
        "description": "An information to download invoice content",
        "example": {
          "downloadUrl": "https://invoicesbucket.s3.eu-west-1.amazonaws.com/123456.html?X-Amz-Expires=60&x-amz-security-token=qw12qw12&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ABABABABAB/20201007/eu-west-1/s3/aws4_request&X-Amz-Date=20201007T162255Z&X-Amz-SignedHeaders=host;x-amz-security-token&X-Amz-Signature=34rt34rt",
          "expires": "2020-10-07T16:23:55.000Z"
        }
      },
      "RestaurantInvoices": {
        "type": "object",
        "properties": {
          "invoices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RestaurantInvoiceSummary"
            },
            "description": "List of restaurant invoice summaries"
          },
          "paging": {
            "type": "object",
            "description": "Consists of pagination information",
            "properties": {
              "cursors": {
                "type": "object",
                "description": "Consists of cursor markers used in pagination",
                "properties": {
                  "after": {
                    "type": "string",
                    "description": "The value should be used in the query parameter named after. It is used as a cursor of the last returned record in the previous request, from which next offset going to be fetched. A missing or empty value indicates that the end of the result set has been reached"
                  }
                }
              }
            }
          }
        },
        "example": {
          "invoices": [
            {
              "id": "i9999999",
              "createdDate": "2020-09-29T09:26:09.930Z",
              "startDate": "2020-09-21",
              "endDate": "2020-09-27",
              "currencyCode": "GBP",
              "invoiceAmount": 5421,
              "accountBalance": 123540
            },
            {
              "id": "i8888888",
              "createdDate": "2020-09-22T11:00:32.800Z",
              "startDate": "2020-09-14",
              "endDate": "2020-09-20",
              "currencyCode": "GBP",
              "invoiceAmount": 6798,
              "accountBalance": 167980
            }
          ],
          "paging": {
            "cursors": {
              "after": "fewyNzQyOGI3OHYt"
            }
          }
        }
      },
      "RestaurantInvoiceSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The Id of the invoice"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "description": "The invoice created date"
          },
          "startDate": {
            "type": "string",
            "format": "date",
            "description": "The start date of the invoice period"
          },
          "endDate": {
            "type": "string",
            "format": "date",
            "description": "The end date of the invoice period"
          },
          "currencyCode": {
            "type": "string",
            "description": "The ISO-4217 currency code associated with the invoice"
          },
          "invoiceAmount": {
            "type": "number",
            "format": "integer",
            "description": "Invoice amount for the invoice period in smallest unit of relevant currency"
          },
          "accountBalance": {
            "type": "number",
            "format": "integer",
            "description": "Restaurant account balance at the end of the invoice period in smallest unit of relevant currency"
          }
        },
        "description": "An invoice summary for the invoice period"
      },
      "AvailableTimeSlotsResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "available": {
            "type": "array",
            "description": "The collection of available time slots in restaurant local time",
            "nullable": false,
            "items": {
              "type": "object",
              "description": "Pair of start and end time of available period to create offer",
              "properties": {
                "from": {
                  "type": "string",
                  "format": "time",
                  "description": "The available offer start time",
                  "nullable": false
                },
                "to": {
                  "type": "string",
                  "format": "time",
                  "description": "The available offer end time",
                  "nullable": false
                }
              }
            }
          },
          "overlappingOfferIds": {
            "type": "array",
            "description": "The collection of overlapped offer ids for same date",
            "nullable": false,
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "available": [
            {
              "from": "12:00:00",
              "to": "12:30:00"
            },
            {
              "from": "12:30:00",
              "to": "13:00:00"
            }
          ],
          "overlappingOfferIds": [
            "1",
            "2"
          ]
        }
      },
      "campaignId": {
        "type": "object",
        "properties": {
          "campaignId": {
            "type": "string",
            "description": "Id of the campaign"
          }
        }
      },
      "CreateOffersRequest": {
        "type": "object",
        "description": "The request object for creating of new offer group.",
        "properties": {
          "daysOfWeek": {
            "uniqueItems": true,
            "type": "array",
            "description": "Days of week to run the offer",
            "items": {
              "enum": [
                "Sunday",
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday"
              ],
              "type": "string"
            }
          },
          "qualifyingValue": {
            "type": "object",
            "description": "Minimum qualifying value for offer to be applied",
            "nullable": true,
            "properties": {
              "currency": {
                "type": "string",
                "description": "Currency code in ISO 4217 format",
                "nullable": false
              },
              "value": {
                "type": "integer",
                "format": "int32",
                "description": "Smallest unit of local currency",
                "nullable": false
              }
            }
          },
          "offerTemplateId": {
            "format": "int32",
            "type": "integer",
            "nullable": false,
            "description": "Internal id of offer template"
          },
          "freeProducts": {
            "description": "The product that gets 100% discount applied",
            "type": "array",
            "nullable": true,
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The unique identifier of the product.",
                  "nullable": false
                },
                "modifiers": {
                  "type": "array",
                  "description": "The collection of preselected modifiers for the item.",
                  "nullable": true,
                  "items": {
                    "type": "object",
                    "properties": {
                      "modifierId": {
                        "type": "string",
                        "description": "The unique identifier of the modifier.",
                        "nullable": false
                      },
                      "quantity": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The required quantity of the modifier.",
                        "nullable": false
                      }
                    }
                  }
                }
              }
            }
          },
          "qualifyingProductIds": {
            "description": "One of those products needed to be included in the collection of products to make offer applicable",
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "offerDescription": {
            "type": "string",
            "description": "The description of the offer.",
            "nullable": true
          },
          "startDate": {
            "format": "date",
            "type": "string",
            "description": "The date when offer starts",
            "nullable": true
          },
          "endDate": {
            "format": "date",
            "type": "string",
            "description": "The date when offer ends",
            "nullable": true
          },
          "startTime": {
            "format": "time",
            "type": "string",
            "description": "Timestamp when offer starts during the day",
            "nullable": true
          },
          "endTime": {
            "format": "time",
            "type": "string",
            "description": "Timestamp when offer ends during the day",
            "nullable": true
          }
        },
        "example": {
          "daysOfWeek": [
            "Monday",
            "Friday"
          ],
          "qualifyingValue": {
            "currency": "GBP",
            "value": 1000
          },
          "offerTemplateId": 333,
          "offerDescription": "This is offer description",
          "startDate": "2019-08-06",
          "endDate": "2019-09-03",
          "startTime": "12:00:00",
          "endTime": "13:00:00"
        }
      },
      "Offer": {
        "type": "object",
        "description": "The object representing offer entry",
        "properties": {
          "id": {
            "type": "string",
            "description": "Internal id of the offer",
            "nullable": false
          },
          "campaignId": {
            "type": "string",
            "description": "Campaign id",
            "nullable": true
          },
          "qualifyingValue": {
            "type": "object",
            "description": "Minimum qualifying value for offer to be applied",
            "nullable": true,
            "properties": {
              "currency": {
                "type": "string",
                "description": "Currency code in ISO 4217 format",
                "nullable": false
              },
              "value": {
                "type": "integer",
                "format": "int32",
                "description": "Smallest unit of local currency",
                "nullable": false
              }
            }
          },
          "validFrom": {
            "format": "date-time",
            "type": "string",
            "description": "The date when offer starts",
            "nullable": false
          },
          "validTo": {
            "format": "date-time",
            "type": "string",
            "description": "The date when offer ends",
            "nullable": true
          },
          "startTime": {
            "format": "time",
            "type": "string",
            "description": "Timestamp when offer starts during the day",
            "nullable": true
          },
          "endTime": {
            "format": "time",
            "type": "string",
            "description": "Timestamp when offer ends during the day",
            "nullable": true
          },
          "discountAmount": {
            "format": "double",
            "type": "number",
            "description": "Amount of the discount",
            "nullable": false
          },
          "offerType": {
            "$ref": "#/components/schemas/PartnerOfferType",
            "description": "Type of the offer",
            "nullable": false
          },
          "consumerSegment": {
            "$ref": "#/components/schemas/PartnerConsumerSegment",
            "description": "Consumer Segment to which offer applies",
            "nullable": false
          },
          "dayOfWeek": {
            "enum": [
              "Sunday",
              "Monday",
              "Tuesday",
              "Wednesday",
              "Thursday",
              "Friday",
              "Saturday"
            ],
            "type": "string",
            "description": "Day of week to run the offer",
            "nullable": false
          },
          "offerDescription": {
            "type": "string",
            "description": "The description of the offer.",
            "nullable": true
          },
          "qualifyingProductIds": {
            "description": "One of those products needed to be included in the collection of products to make offer applicable",
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "freeProducts": {
            "description": "The product that gets 100% discount applied",
            "type": "array",
            "nullable": true,
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The unique identifier of the product.",
                  "nullable": false
                },
                "modifiers": {
                  "type": "array",
                  "description": "The collection of preselected modifiers for the item.",
                  "nullable": true,
                  "items": {
                    "type": "object",
                    "properties": {
                      "modifierId": {
                        "type": "string",
                        "description": "The unique identifier of the modifier.",
                        "nullable": false
                      },
                      "quantity": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The required quantity of the modifier.",
                        "nullable": false
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "example": {
          "id": "1",
          "qualifyingValue": {
            "currency": "GBP",
            "value": 1000
          },
          "validFrom": "2019-08-06T09:01:12.970Z",
          "validTo": "2019-09-03T00:00:00.000Z",
          "startTime": "06:00:00",
          "endTime": "09:00:00",
          "discountAmount": 15,
          "discountType": "Percent",
          "offerType": "Percent",
          "consumerSegment": "All",
          "dayOfWeek": "Monday"
        }
      },
      "OfferCampaign": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Internal id of the offer campaign"
          },
          "type": {
            "enum": [
              "CheekyCampaign",
              "DonationCampaign",
              "FastMovingGoodsCampaign"
            ],
            "type": "string",
            "description": "Type of the offer campaign",
            "nullable": false
          },
          "start": {
            "format": "date-time",
            "type": "string",
            "readOnly": false,
            "description": "The date when offer campaign starts",
            "nullable": true
          },
          "end": {
            "format": "date-time",
            "type": "string",
            "readOnly": false,
            "description": "The date when offer campaign ends",
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "readOnly": false,
            "description": "Is the offer campaign allowed to be active",
            "nullable": false
          },
          "active": {
            "type": "boolean",
            "readOnly": true,
            "description": "Calculated, is the campaign enabled and within start and end date"
          },
          "subscribed": {
            "type": "boolean",
            "readOnly": true,
            "description": "Is restaurant subscribed to this campaign",
            "nullable": false
          },
          "discountAmount": {
            "format": "double",
            "type": "number",
            "description": "Amount of the discount",
            "nullable": false
          },
          "qualifyingValue": {
            "type": "object",
            "description": "qualifying value for a given offer template",
            "nullable": false,
            "properties": {
              "currency": {
                "type": "string",
                "description": "Currency code in ISO 4217 format",
                "nullable": false
              },
              "value": {
                "type": "integer",
                "format": "int32",
                "description": "Smallest unit of local currency",
                "nullable": false
              }
            }
          },
          "daysOfWeek": {
            "uniqueItems": true,
            "type": "array",
            "description": "Days of week to run the campaign",
            "nullable": false,
            "items": {
              "enum": [
                "Sunday",
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday"
              ],
              "type": "string"
            }
          }
        },
        "example": {
          "id": "1",
          "type": "CheekyCampaign",
          "start": "2019-08-06T09:01:12.970Z",
          "end": "2019-09-03T00:00:00.000Z",
          "enabled": true,
          "active": true,
          "subscribed": true,
          "discountAmount": 15,
          "qualifyingValue": {
            "currency": "GBP",
            "value": 5000
          },
          "daysOfWeek": [
            "Monday",
            "Friday"
          ]
        }
      },
      "OfferTemplate": {
        "type": "object",
        "properties": {
          "id": {
            "format": "int32",
            "type": "integer",
            "description": "Internal id of the offer template",
            "nullable": false
          },
          "discountValue": {
            "format": "double",
            "type": "number",
            "description": "Amount of the discount",
            "nullable": false
          },
          "offerType": {
            "$ref": "#/components/schemas/PartnerOfferType",
            "description": "Type of the offer",
            "nullable": false
          },
          "consumerSegment": {
            "$ref": "#/components/schemas/PartnerConsumerSegment",
            "description": "Consumer Segment that offer applies",
            "nullable": false
          },
          "maxQualifyingValue": {
            "type": "object",
            "description": "Maximum qualifying value for a given offer template",
            "nullable": false,
            "properties": {
              "currency": {
                "type": "string",
                "description": "Currency code in ISO 4217 format"
              },
              "value": {
                "type": "integer",
                "format": "int32",
                "description": "Smallest unit of local currency"
              }
            }
          }
        },
        "example": {
          "id": 333,
          "discountValue": 15,
          "offerType": "Percent",
          "consumerSegment": "All",
          "maxQualifyingValue": {
            "currency": "GBP",
            "value": 5000
          }
        }
      },
      "PartnerConsumerSegment": {
        "type": "string",
        "enum": [
          "All",
          "NewToRestaurant"
        ]
      },
      "PartnerOfferType": {
        "type": "string",
        "enum": [
          "Percent",
          "FreeItem",
          "Bogof",
          "StampCard"
        ]
      },
      "RestaurantOrderAppliedDiscount": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "Percent",
              "FirstTimeCustomer",
              "StampCard"
            ],
            "description": "The type of discount"
          },
          "discountAmount": {
            "type": "number",
            "format": "integer",
            "description": "The discount value in smallest unit of relevant currency"
          }
        },
        "description": "A discount item in an order"
      },
      "RestaurantOrderCustomerInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The customer name",
            "nullable": true
          },
          "deliveryAddress": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The address line"
            },
            "nullable": true,
            "description": "The delivery address of the order"
          }
        },
        "description": "Information about a customer"
      },
      "RestaurantOrderDetails": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The Id of the order"
          },
          "friendlyId": {
            "type": "string",
            "description": "The friendly order Id"
          },
          "placedDate": {
            "type": "string",
            "format": "date-time",
            "description": "The order placed date"
          },
          "dueDate": {
            "type": "string",
            "format": "date-time",
            "description": "The due date of the order"
          },
          "serviceType": {
            "enum": [
              "Delivery",
              "Collection",
              "DineIn"
            ],
            "description": "Type of service (collection, delivery or dine-in)"
          },
          "orderStatus": {
            "enum": [
              "Completed",
              "Cancelled"
            ],
            "description": "Status of completed order"
          },
          "statusReason": {
            "enum": [
              "TooFar",
              "FakeDelivered",
              "FakeNotDelivered",
              "FaxNotReceived",
              "IncorrectOrder",
              "NoAnswerFromRestaurant",
              "MissedByRestaurant",
              "FakeNotCollected",
              "RestaurantCannotDeliver",
              "RejectedByRestaurant",
              "NewTimeRejected",
              "SystemError",
              "RestaurantIsBusy",
              "TestOrder"
            ],
            "description": "The reason for the order's status, if known"
          },
          "paymentType": {
            "enum": [
              "Card",
              "Cash"
            ],
            "description": "The payment type (cash or card)"
          },
          "transactionReference": {
            "type": "string",
            "description": "The payment transaction reference, if known"
          },
          "currencyCode": {
            "type": "string",
            "description": "The ISO-4217 currency code associated with the all prices and money amounts in order details"
          },
          "orderPrice": {
            "type": "number",
            "format": "integer",
            "description": "The order price in smallest unit of relevant currency"
          },
          "deliveryPrice": {
            "type": "number",
            "format": "integer",
            "description": "The order delivery price in smallest unit of relevant currency"
          },
          "orderNote": {
            "type": "string",
            "description": "The customer note to the order",
            "nullable": true
          },
          "previousRestaurantOrderCount": {
            "type": "number",
            "description": "The customer's previous total number of orders made to this restaurant"
          },
          "previousTotalOrderCount": {
            "type": "number",
            "description": "The customer's previous total number of orders made to all restaurants"
          },
          "promptAsap": {
            "type": "boolean",
            "description": "The flag that shows whether the customer awaits an order as soon as possible"
          },
          "paymentInfo": {
            "$ref": "#/components/schemas/RestaurantOrderPaymentInfo",
            "description": "Information about a payment"
          },
          "customerInfo": {
            "$ref": "#/components/schemas/RestaurantOrderCustomerInfo",
            "description": "Information about a customer"
          },
          "orderPriceBreakdown": {
            "$ref": "#/components/schemas/RestaurantOrderPriceBreakdown",
            "description": "The order price breakdown (all amounts in smallest unit of relevant currency)"
          },
          "orderItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RestaurantOrderItem"
            },
            "description": "List of restaurant order items"
          },
          "appliedDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RestaurantOrderAppliedDiscount"
            },
            "description": "List of restaurant applied discounts"
          }
        },
        "description": "An order details",
        "example": {
          "id": "rtvtgo0wwugmiiikdpzvsg",
          "friendlyId": 821367535,
          "placedDate": "2020-01-01T09:30:00.000Z",
          "dueDate": "2020-01-01T10:15:00.000Z",
          "serviceType": "Delivery",
          "orderStatus": "Cancelled",
          "statusReason": "RejectedByRestaurant",
          "paymentType": "Card",
          "transactionReference": 123334567667989,
          "currencyCode": "GBP",
          "orderPrice": 2099,
          "deliveryPrice": 200,
          "previousRestaurantOrderCount": 1,
          "previousJustEatOrderCount": 3,
          "orderNote": "Contact-free delivery",
          "promptAsap": false,
          "paymentInfo": {
            "paidDate": "2020-01-01T09:31:00.000Z",
            "paymentLines": [
              {
                "paymentMethod": "AccountCredit",
                "value": 500,
                "fee": 0
              },
              {
                "paymentMethod": "Card",
                "value": 1549,
                "fee": 50
              }
            ],
            "fees": [
              {
                "type": "Card",
                "value": 50
              },
              {
                "type": "Delivery",
                "value": 200
              }
            ]
          },
          "customerInfo": {
            "name": "Simon Moon",
            "deliveryAddress": [
              "13 Moon road",
              "Mars",
              "BS5 1KG",
              "Bristol"
            ]
          },
          "orderPriceBreakdown": {
            "items": 2066,
            "accountCredits": 500,
            "fees": 250,
            "discounts": 207,
            "vouchers": 0
          },
          "orderItems": [
            {
              "itemId": "p1",
              "name": "Pizza and drink",
              "synonym": "Medium",
              "description": "one pizza and one drink from choices",
              "itemType": "Product",
              "quantity": 1,
              "unitPrice": 999,
              "subItems": [
                {
                  "itemId": "mp1",
                  "name": "Margherita",
                  "synonym": "Medium",
                  "description": "classic pizza Margherita",
                  "itemType": "MealPart",
                  "quantity": 1,
                  "unitPrice": 0,
                  "subItems": []
                },
                {
                  "itemId": "mp2",
                  "name": "Coca-Cola",
                  "synonym": "1L",
                  "description": "",
                  "itemType": "MealPart",
                  "quantity": 1,
                  "unitPrice": 0,
                  "subItems": []
                },
                {
                  "itemId": "a1",
                  "name": "Double Cheese",
                  "synonym": "",
                  "itemType": "Accessory",
                  "quantity": 1,
                  "unitPrice": 100,
                  "subItems": []
                }
              ]
            },
            {
              "itemId": "p2",
              "name": "Cesar Salad",
              "synonym": "",
              "description": "Romaine lettuce, croutons, Parmesan cheese, lemon juice, olive oil, egg, Worcestershire sauce, anchovies, Dijon mustard, black pepper",
              "itemType": "Product",
              "quantity": 2,
              "unitPrice": 533,
              "subItems": []
            }
          ],
          "appliedDiscounts": [
            {
              "type": "StampCard",
              "discountAmount": 2550
            }
          ]
        }
      },
      "RestaurantOrderHistory": {
        "type": "object",
        "properties": {
          "orders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RestaurantOrderSummary"
            },
            "description": "List of restaurant order summaries"
          },
          "paging": {
            "type": "object",
            "description": "Consists of pagination information",
            "properties": {
              "cursors": {
                "type": "object",
                "description": "Consists of cursors markers used in pagination",
                "properties": {
                  "after": {
                    "type": "string",
                    "description": "The value should be used in the query parameter named after. It is used as a cursor of the last returned record in the previous request, from which next offset going to be fetched. A missing or empty value indicates that the end of the result set has been reached"
                  }
                }
              }
            }
          }
        },
        "example": {
          "orders": [
            {
              "id": "rtvtgo0wwugmiiikdpzvsg",
              "friendlyId": "821367535",
              "placedDate": "2020-01-01T09:30:00.000Z",
              "serviceType": "Delivery",
              "orderStatus": "Completed",
              "paymentType": "Card",
              "currencyCode": "GBP",
              "orderPrice": 2099,
              "deliveryPrice": 200
            },
            {
              "id": "uerbbymdfkxdecduuerbby",
              "friendlyId": "829022736",
              "placedDate": "2020-01-02T19:20:00.000Z",
              "serviceType": "Collection",
              "orderStatus": "Cancelled",
              "paymentType": "Cash",
              "currencyCode": "GBP",
              "orderPrice": 99900,
              "deliveryPrice": 0
            },
            {
              "id": "dfssd3efsferr4rgfdgf",
              "friendlyId": "829022737",
              "placedDate": "2020-01-02T20:45:00.000Z",
              "serviceType": "DineIn",
              "orderStatus": "Completed",
              "paymentType": "Cash",
              "currencyCode": "GBP",
              "orderPrice": 54400,
              "deliveryPrice": 0
            }
          ],
          "paging": {
            "cursors": {
              "after": "NDMyNzQyODI3OTQw"
            }
          }
        }
      },
      "RestaurantOrderItem": {
        "type": "object",
        "properties": {
          "itemId": {
            "type": "string",
            "description": "The Id of the item"
          },
          "name": {
            "type": "string",
            "description": "The name of the item"
          },
          "synonym": {
            "type": "string",
            "description": "The synonym of the item"
          },
          "description": {
            "type": "string",
            "description": "The description for the item"
          },
          "itemType": {
            "enum": [
              "Product",
              "MealPart",
              "Accessory"
            ],
            "description": "The type of item"
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "description": "The quantity of the item"
          },
          "unitPrice": {
            "type": "number",
            "format": "integer",
            "description": "The unit price for the item"
          },
          "subItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RestaurantOrderItem"
            },
            "description": "The sub items of item, such as meal parts of the meal or accessories"
          }
        },
        "description": "An item in an order"
      },
      "RestaurantOrderPaymentInfo": {
        "type": "object",
        "properties": {
          "paidDate": {
            "type": "string",
            "description": "The date and time the order was paid for, if known",
            "format": "date-time",
            "nullable": true
          },
          "paymentLines": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "paymentMethod": {
                  "type": "string",
                  "description": "The payment method, such as cash or card"
                },
                "value": {
                  "type": "number",
                  "format": "integer",
                  "description": "The payment value in smallest unit of relevant currency"
                },
                "fee": {
                  "type": "number",
                  "format": "integer",
                  "description": "The payment fee in smallest unit of relevant currency"
                }
              },
              "description": "An individual payment line"
            },
            "description": "The payment lines"
          },
          "fees": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The type of fee, such as delivery or card"
                },
                "value": {
                  "type": "number",
                  "format": "integer",
                  "description": "The fee value in smallest unit of relevant currency"
                }
              }
            },
            "description": "The fees applied to the order"
          }
        },
        "description": "Information about a payment"
      },
      "RestaurantOrderPriceBreakdown": {
        "type": "object",
        "properties": {
          "items": {
            "type": "number",
            "format": "integer",
            "description": "The total amount of order items"
          },
          "accountCredits": {
            "type": "number",
            "format": "integer",
            "description": "The total amount of account credit(s) applied to the order"
          },
          "fees": {
            "type": "number",
            "format": "integer",
            "description": "The total amount of fees applied to the order"
          },
          "discounts": {
            "type": "number",
            "format": "integer",
            "description": "The total amount of discount(s) applied to the order"
          },
          "vouchers": {
            "type": "number",
            "format": "integer",
            "description": "The total amount of voucher(s) applied to the order"
          }
        },
        "description": "The order price breakdown (all amounts in smallest unit of relevant currency)"
      },
      "RestaurantOrderSummaries": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of all orders for date range"
          },
          "totalOrderValue": {
            "type": "number",
            "format": "int32",
            "description": "Total value of all orders for date range"
          },
          "totalCollectionOrderValue": {
            "type": "number",
            "format": "int32",
            "description": "Total value of collection orders for date range"
          },
          "totalDeliveryOrderValue": {
            "type": "number",
            "format": "int32",
            "description": "Total value of delivery orders for date range"
          },
          "totalDineInOrderValue": {
            "type": "number",
            "format": "int32",
            "description": "Total value of dine-in orders for date range"
          },
          "totalCardOrderValue": {
            "type": "number",
            "format": "int32",
            "description": "Total value of card orders for date range"
          },
          "totalCashOrderValue": {
            "type": "number",
            "format": "int32",
            "description": "Total value of cash orders for date range"
          },
          "totalDeliveryPriceValue": {
            "type": "number",
            "format": "int32",
            "description": "Total delivery price value for date range"
          },
          "currencyCode": {
            "type": "string",
            "description": "The ISO-4217 currency code associated with the total values"
          }
        },
        "description": "An orders summary for date range (all total values in smallest unit of relevant currency)",
        "example": {
          "count": 27,
          "totalOrderValue": 99993,
          "totalCollectionOrderValue": 22241,
          "totalDeliveryOrderValue": 66621,
          "totalDineInOrderValue": 11131,
          "totalCardOrderValue": 92059,
          "totalCashOrderValue": 7934,
          "totalDeliveryPriceValue": 70,
          "currencyCode": "GBP"
        }
      },
      "RestaurantOrderSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The Id of the order"
          },
          "friendlyId": {
            "type": "string",
            "description": "The friendly order Id"
          },
          "placedDate": {
            "type": "string",
            "format": "date-time",
            "description": "The order placed date"
          },
          "serviceType": {
            "enum": [
              "Collection",
              "Delivery",
              "DineIn"
            ],
            "description": "Type of service (collection, delivery or dine-in)"
          },
          "orderStatus": {
            "enum": [
              "Completed",
              "Cancelled"
            ],
            "description": "Status of completed order"
          },
          "paymentType": {
            "enum": [
              "Card",
              "Cash"
            ],
            "description": "The payment type (cash or card)"
          },
          "currencyCode": {
            "type": "string",
            "description": "The ISO-4217 currency code associated with the order price"
          },
          "orderPrice": {
            "type": "number",
            "format": "integer",
            "description": "The order price in smallest unit of relevant currency"
          },
          "deliveryPrice": {
            "type": "number",
            "format": "integer",
            "description": "The order delivery price in smallest unit of relevant currency"
          }
        },
        "description": "An order summary"
      },
      "RestaurantCommentsOnReview": {
        "type": "object",
        "properties": {
          "restaurantComments": {
            "description": "Restaurant comments in response on the customer review",
            "type": "string",
            "nullable": false
          }
        },
        "example": {
          "restaurantComments": "Thank you very much for positive feedback"
        }
      },
      "RestaurantReviews": {
        "type": "object",
        "properties": {
          "reviews": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The Id of the review",
                  "nullable": false,
                  "format": "int32"
                },
                "friendlyOrderId": {
                  "type": "string",
                  "description": "The friendly order Id the review is associated with",
                  "nullable": false
                },
                "rateDate": {
                  "description": "The date and time on which the order was made",
                  "format": "date-time",
                  "type": "string",
                  "nullable": false
                },
                "customerName": {
                  "description": "The (first) name of the customer who left the review",
                  "type": "string",
                  "nullable": false
                },
                "customerComments": {
                  "description": "Any comments left by the customer in their review",
                  "type": "string",
                  "nullable": true
                },
                "ratingAverage": {
                  "description": "The average score left by the customer",
                  "format": "double",
                  "type": "number",
                  "nullable": false
                },
                "restaurantComments": {
                  "description": "Any comments left by the restaurant in response to the review",
                  "type": "string",
                  "nullable": true
                },
                "approvedRestaurantComments": {
                  "description": "Any comments left by the restaurant in response to the review approved by a moderator",
                  "type": "string",
                  "nullable": true
                }
              }
            },
            "description": "List of restaurant reviews"
          }
        },
        "example": {
          "reviews": [
            {
              "id": "uimpewidbrjyxcweiqtoe",
              "friendlyOrderId": "123456789",
              "rateDate": "2020-10-18T17:42:38.000Z",
              "customerName": "Steve",
              "customerComments": "Extremely good food and service",
              "ratingAverage": 5.66,
              "restaurantComments": "Thank u very much for positive feedback",
              "approvedRestaurantComments": "Thank you very much for positive feedback"
            },
            {
              "id": "tytyhjdbrhgjfxcweigfht",
              "friendlyOrderId": "123456790",
              "rateDate": "2020-10-19T18:00:45.000Z",
              "customerName": "Lucy",
              "customerComments": "Coffee poured all over my food",
              "ratingAverage": 2.33,
              "restaurantComments": "We are sorry, but it is your fault",
              "approvedRestaurantComments": "We are sorry"
            }
          ]
        }
      },
      "RestaurantReviewsRatingBreakdown": {
        "type": "object",
        "properties": {
          "goodRatingsCount": {
            "description": "The count of good (5,6 stars) ratings across all reviews",
            "type": "integer",
            "format": "int32",
            "nullable": false
          },
          "neutralRatingsCount": {
            "description": "The count of neutral (3,4 stars) ratings across all reviews",
            "type": "integer",
            "format": "int32",
            "nullable": false
          },
          "badRatingsCount": {
            "description": "The count of bad (1,2 stars) ratings across all reviews",
            "type": "integer",
            "format": "int32",
            "nullable": false
          }
        }
      },
      "RestaurantReviewsSummary": {
        "type": "object",
        "properties": {
          "reviewsCount": {
            "description": "The count of all reviews",
            "type": "integer",
            "format": "int32",
            "nullable": false
          },
          "ratingAverage": {
            "description": "The average score of all reviews",
            "type": "number",
            "format": "double",
            "nullable": false
          },
          "ratingsBreakdown": {
            "description": "The breakdown of good/neutral/bad reviews for different types of ratings",
            "type": "object",
            "nullable": false,
            "properties": {
              "service": {
                "$ref": "#/components/schemas/RestaurantReviewsRatingBreakdown",
                "description": "The breakdown of good/neutral/bad service experience ratings across all reviews"
              },
              "quality": {
                "$ref": "#/components/schemas/RestaurantReviewsRatingBreakdown",
                "description": "The breakdown of good/neutral/bad quality experience ratings across all reviews"
              },
              "delivery": {
                "$ref": "#/components/schemas/RestaurantReviewsRatingBreakdown",
                "description": "The breakdown of good/neutral/bad delivery experience ratings across all reviews"
              },
              "overall": {
                "$ref": "#/components/schemas/RestaurantReviewsRatingBreakdown",
                "description": "The breakdown of good/neutral/bad overall experience ratings across all reviews"
              }
            }
          }
        },
        "example": {
          "reviewsCount": 66,
          "ratingAverage": 4.7,
          "ratingsBreakdown": {
            "service": {
              "goodRatingsCount": 45,
              "neutralRatingsCount": 6,
              "badRatingsCount": 15
            },
            "quality": {
              "goodRatingsCount": 44,
              "neutralRatingsCount": 12,
              "badRatingsCount": 10
            },
            "delivery": {
              "goodRatingsCount": 46,
              "neutralRatingsCount": 10,
              "badRatingsCount": 10
            },
            "overall": {
              "goodRatingsCount": 44,
              "neutralRatingsCount": 14,
              "badRatingsCount": 8
            }
          }
        }
      },
      "emailaddress": {
        "type": "object",
        "properties": {
          "EmailAddress": {
            "type": "string",
            "description": "An email address for an account."
          }
        }
      },
      "password": {
        "type": "object",
        "properties": {
          "Password": {
            "type": "string",
            "description": "A password for a consumers account."
          }
        }
      },
      "TwilioIncomingMessageCallbackRequest": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "The number of the sender in E.164 format"
          },
          "body": {
            "type": "string",
            "description": "The body of the text message being sent"
          }
        }
      },
      "TwilioIncomingVoiceCallbackRequest": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "The number of the caller in E.164 format"
          },
          "digits": {
            "type": "string",
            "description": "Any digits the caller has entered on their phone"
          }
        }
      },
      "TwilioProxyOutOfSessionCallbackRequest": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "The number the call or text message is from in E.164 format"
          },
          "callSid": {
            "type": "string",
            "description": "A unique identifier for the call, generated by Twilio"
          },
          "smsSid": {
            "type": "string",
            "description": "A unique identifier for the sms, generated by Twilio"
          },
          "sessionSid": {
            "type": "string",
            "description": "A unique identifier for the proxy session, generated by Twilio"
          },
          "sessionDateEnded": {
            "type": "string",
            "description": "The date and time in which the proxy session ended",
            "nullable": true
          }
        }
      },
      "TwilioInteractionCallbackRequest": {
        "type": "object",
        "properties": {
          "inboundParticipantSid": {
            "type": "string",
            "description": "The SID of the inbound Participant resource"
          },
          "inboundResourceSid": {
            "type": "string",
            "description": "The SID of the inbound resource"
          },
          "inboundResourceStatus": {
            "type": "string",
            "description": "The inbound resource status of the Interaction"
          },
          "inboundResourceType": {
            "type": "string",
            "description": "The inbound resource type"
          },
          "inboundResourceUrl": {
            "type": "string",
            "description": "The URL of the Twilio inbound resource"
          },
          "interactionAccountSid": {
            "type": "string",
            "description": "The SID of the Account that created the Interaction resource"
          },
          "interactionData": {
            "type": "string",
            "description": "A JSON string that includes the message body of message interactions"
          },
          "interactionDateCreated": {
            "type": "string",
            "description": "The date and time when the resource was created"
          },
          "interactionDateUpdated": {
            "type": "string",
            "description": "The date and time when the resource was last updated"
          },
          "interactionServiceSid": {
            "type": "string",
            "description": "The SID of the parent Service resource"
          },
          "interactionSessionSid": {
            "type": "string",
            "description": "The SID of the parent Session resource"
          },
          "interactionSid": {
            "type": "string",
            "description": "The unique string to identify the Interaction resource"
          },
          "interactionType": {
            "type": "string",
            "description": "The Type of the Interaction"
          },
          "outboundParticipantSid": {
            "type": "string",
            "description": "The SID of the outbound Participant"
          },
          "outboundResourceSid": {
            "type": "string",
            "description": "The SID of the outbound resource"
          },
          "outboundResourceStatus": {
            "type": "string",
            "description": "The outbound resource status of the Interaction"
          },
          "outboundResourceType": {
            "type": "string",
            "description": "The outbound resource type"
          },
          "outboundResourceUrl": {
            "type": "string",
            "description": "The URL of the Twilio outbound resource"
          }
        }
      },
      "CategoriesResponse": {
        "type": "array",
        "description": "Categories of products for given restaurant.",
        "items": {
          "type": "object",
          "properties": {
            "Id": {
              "type": "string",
              "description": "Category identifier."
            },
            "Name": {
              "type": "string",
              "description": "Category name."
            },
            "Description": {
              "type": "string",
              "description": "Category description."
            }
          }
        }
      },
      "ProductsResponse": {
        "type": "object",
        "properties": {
          "Products": {
            "type": "array",
            "description": "List of products for a given restaurant.",
            "items": {
              "$ref": "#/components/schemas/ProductWithOfflineStatus"
            }
          },
          "Paging": {
            "type": "object",
            "description": "Consists of pagination information.",
            "properties": {
              "Cursors": {
                "type": "object",
                "description": "Consists of cursors markers used in pagination.",
                "properties": {
                  "After": {
                    "type": "string",
                    "description": "The value should be used in the query parameter named after. It is used as a cursor of the last returned record in the previous request, from which next offset going to be fetched. A missing or empty value indicates that the end of the result set has been reached."
                  }
                }
              }
            }
          }
        },
        "example": {
          "Products": [
            {
              "Name": "Coca-Cola 0.33L",
              "Description": "",
              "Id": "111",
              "IsOffline": false,
              "Price": {
                "Value": 99,
                "CurrencyCode": "GBP"
              },
              "NextAvailableAt": null,
              "CategoryIds": [
                "1"
              ]
            },
            {
              "Name": "Coca-Cola 1.5L",
              "Description": "",
              "Id": "112",
              "IsOffline": false,
              "Price": {
                "Value": 199,
                "CurrencyCode": "GBP"
              },
              "NextAvailableAt": null,
              "CategoryIds": [
                "1"
              ]
            },
            {
              "Name": "Chicken & Sweetcorn Soup",
              "Description": "",
              "Id": "222",
              "IsOffline": true,
              "Price": {
                "Value": 299,
                "CurrencyCode": "GBP"
              },
              "NextAvailableAt": "2019-11-23T11:00:00+01:00",
              "CategoryIds": [
                "2"
              ]
            }
          ],
          "Paging": {
            "Cursors": {
              "After": "NDMyNzQyODI3OTQw"
            }
          }
        }
      },
      "ProductWithOfflineStatus": {
        "type": "object",
        "description": "Product.",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Product name."
          },
          "Description": {
            "type": "string",
            "description": "Product description."
          },
          "Id": {
            "type": "string",
            "description": "Product identifier."
          },
          "IsOffline": {
            "type": "boolean",
            "description": "True if this Product is not available to purchase."
          },
          "NextAvailableAt": {
            "type": "string",
            "description": "Time when product will be brought back online.",
            "format": "date-time",
            "nullable": true
          },
          "Price": {
            "type": "object",
            "description": "The price of this Product.",
            "properties": {
              "Value": {
                "type": "number",
                "format": "integer",
                "description": "The value of this Price in the minor unit of the currency."
              },
              "CurrencyCode": {
                "type": "string",
                "description": "The currency of this Price in ISO 4217 format."
              }
            }
          },
          "CategoryIds": {
            "type": "array",
            "description": "List of Category IDs this product belongs to.",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "Name": "Coca-Cola 0.33L",
          "Description": "",
          "Id": "111",
          "IsOffline": false,
          "Price": {
            "Value": 99,
            "CurrencyCode": "GBP"
          },
          "NextAvailableAt": null,
          "CategoryIds": [
            "1"
          ]
        }
      },
      "SetProductsOfflineRequest": {
        "required": [
          "ProductIds",
          "RequestedBy",
          "NextAvailableAt"
        ],
        "type": "object",
        "properties": {
          "ProductIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Product ids to set offline."
          },
          "RequestedBy": {
            "type": "string",
            "description": "Consists of information about who requested changes."
          },
          "NextAvailableAt": {
            "format": "date-time",
            "type": "string",
            "description": "The time when products should be brought back online. This may be delayed by up to 5 minutes. There is no upper time limit."
          }
        }
      },
      "SetProductsOnlineRequest": {
        "required": [
          "ProductIds",
          "RequestedBy"
        ],
        "type": "object",
        "properties": {
          "ProductIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Product IDs to set online."
          },
          "RequestedBy": {
            "type": "string",
            "description": "Consists of information about who requested changes."
          }
        }
      },
      "PromotedPlacementActivePlacement": {
        "type": "object",
        "nullable": false,
        "required": [
          "placementId",
          "deliveryArea",
          "purchaseDate",
          "weeklyBudget",
          "status"
        ],
        "properties": {
          "placementId": {
            "type": "string",
            "description": "The unique identifier of the placement.",
            "nullable": false
          },
          "deliveryArea": {
            "type": "string",
            "description": "The postcode or location that the placement applies to.",
            "nullable": false
          },
          "purchaseDate": {
            "type": "string",
            "format": "date-time",
            "description": "The UTC date and time at which this placement was purchased.",
            "nullable": false
          },
          "weeklyBudget": {
            "type": "object",
            "description": "Contains information about the weekly budget for this placement.",
            "nullable": false,
            "required": [
              "remaining",
              "total",
              "maximumAllowable",
              "minimumAllowable",
              "recommended"
            ],
            "properties": {
              "remaining": {
                "type": "integer",
                "format": "int32",
                "description": "The remaining budget for this week in the smallest unit of local currency (e.g., pence).",
                "nullable": false
              },
              "total": {
                "type": "integer",
                "format": "int32",
                "description": "The total budget for this week in the smallest unit of local currency (e.g., pence).",
                "nullable": false
              },
              "maximumAllowable": {
                "type": "integer",
                "format": "int32",
                "description": "The maximum allowable budget for this week in the smallest unit of local currency (e.g., pence). It will not be possible to set a budget that exceeds this amount.",
                "nullable": false
              },
              "minimumAllowable": {
                "type": "integer",
                "format": "int32",
                "description": "The minimum allowable budget for this week in the smallest unit of local currency (e.g., pence). It will not be possible to set a budget lower than this amount.",
                "nullable": false
              },
              "recommended": {
                "type": "integer",
                "format": "int32",
                "description": "The recommended budget for this week so that the budget does not run out in the smallest unit of local currency (e.g., pence).",
                "nullable": false
              }
            }
          },
          "status": {
            "type": "object",
            "description": "Contains status information for different aspects of this placement. 'normal' status is assumed if no additional status information is available.",
            "properties": {
              "contract": {
                "type": "object",
                "description": "The status of this placement's contract.",
                "nullable": false,
                "required": [
                  "code"
                ],
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "The status code that describes this placement's contract status.",
                    "nullable": false,
                    "enum": [
                      "inNonCancellablePeriod",
                      "cancelled"
                    ]
                  },
                  "endDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The UTC date and time at which this placement will end. Available if the status code is \"cancelled\".",
                    "nullable": false
                  },
                  "cancellableAfterDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The UTC date and time after which this placement may be cancelled. Available if the status code is `inNonCancellablePeriod`.",
                    "nullable": false
                  }
                },
                "additionalProperties": true
              },
              "pause": {
                "description": "The pause status of this placement.",
                "nullable": false,
                "required": [
                  "code"
                ],
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "The status code that describes this placement's pause status.",
                    "nullable": false,
                    "enum": [
                      "paused"
                    ]
                  },
                  "pauseDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The UTC date and time at which this placement was paused as a result of a manual action. Available if the status code is \"paused\".",
                    "nullable": false
                  },
                  "resumeDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The UTC date and time at which this placement is scheduled to be resumed. Available if the status code is \"paused\" and a resume date was specified.",
                    "nullable": false
                  }
                },
                "additionalProperties": true
              },
              "budget": {
                "description": "The budget status of this placement.",
                "nullable": false,
                "required": [
                  "code"
                ],
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "The status code that describes this placement's current budget status.",
                    "nullable": false,
                    "enum": [
                      "budgetLow",
                      "budgetExhausted"
                    ]
                  }
                },
                "additionalProperties": true
              }
            }
          },
          "availableActions": {
            "type": "array",
            "description": "A list of the currently supported actions for this placement.",
            "items": {
              "type": "string",
              "enum": [
                "adjustBudget",
                "cancel",
                "pause",
                "resume",
                "undoCancel"
              ]
            }
          }
        },
        "additionalProperties": true,
        "example": {
          "placementId": "100005",
          "deliveryArea": "NW6",
          "purchaseDate": "2021-01-01T14:45:00Z",
          "weeklyBudget": {
            "remaining": 5000,
            "total": 13000,
            "maximumAllowable": 100000,
            "minimumAllowable": 500,
            "recommended": 13000
          },
          "status": {
            "pause": {
              "code": "paused",
              "pauseDate": "2021-01-14T12:02:32Z",
              "resumeDate": "2021-02-12T00:00:00Z"
            }
          },
          "availableActions": [
            "adjustBudget",
            "resume",
            "cancel"
          ]
        }
      },
      "PromotedPlacementActivePlacementsForRestaurantResponse": {
        "type": "object",
        "required": [
          "placements"
        ],
        "properties": {
          "metadata": {
            "type": "object",
            "description": "Additional metadata that may assist the rendering of the response.",
            "properties": {
              "currency": {
                "type": "string",
                "description": "The currency used for the budget data in ISO 4217 format, e.g., GBP, EUR or AUD.",
                "nullable": false
              },
              "effectiveDate": {
                "type": "string",
                "format": "date-time",
                "description": "The UTC time at which the request was processed for relative time calculations.",
                "nullable": false
              }
            },
            "additionalProperties": true
          },
          "contract": {
            "type": "object",
            "description": "Information about the contract for this restaurant.",
            "properties": {
              "nonCancellablePeriodEndDate": {
                "type": "string",
                "format": "date-date",
                "description": "The UTC time after which the non-cancellable period ends for this restaurant. If not specified, this restaurant has week-by-week rolling contracts."
              }
            }
          },
          "placements": {
            "type": "array",
            "description": "List of promoted placements active for a given restaurant.",
            "items": {
              "$ref": "#/components/schemas/PromotedPlacementActivePlacement"
            }
          }
        },
        "additionalProperties": true,
        "example": {
          "metadata": {
            "currency": "GBP",
            "effectiveDate": "2021-01-14T17:30:00Z"
          },
          "placements": [
            {
              "placementId": "100001",
              "deliveryArea": "NW6",
              "purchaseDate": "2021-01-01T14:45:00Z",
              "weeklyBudget": {
                "remaining": 5000,
                "total": 13000,
                "maximumAllowable": 100000,
                "minimumAllowable": 500,
                "recommended": 13000
              },
              "status": {
                "pause": {
                  "code": "paused",
                  "pauseDate": "2021-01-14T12:02:32Z",
                  "resumeDate": "2021-02-12T00:00:00Z"
                },
                "placement": {
                  "code": "cancelled",
                  "endDate": "2021-01-17T23:59:59Z"
                }
              },
              "availableActions": [
                "adjustBudget",
                "resume",
                "cancel"
              ]
            },
            {
              "placementId": "100002",
              "deliveryArea": "NW5",
              "purchaseDate": "2021-01-01T14:47:34Z",
              "weeklyBudget": {
                "remaining": 210,
                "total": 13000,
                "maximumAllowable": 110000,
                "minimumAllowable": 500,
                "recommended": 14000
              },
              "status": {
                "budget": {
                  "code": "budgetLow"
                }
              },
              "availableActions": [
                "adjustBudget",
                "pause",
                "cancel"
              ]
            },
            {
              "placementId": "100003",
              "deliveryArea": "NW4",
              "purchaseDate": "2021-01-01T14:51:12Z",
              "weeklyBudget": {
                "remaining": 3200,
                "total": 13000,
                "maximumAllowable": 100000,
                "minimumAllowable": 500,
                "recommended": 14000
              },
              "status": {
                "placement": {
                  "code": "cancelled",
                  "endDate": "2021-01-17T23:59:59Z"
                }
              },
              "availableActions": [
                "adjustBudget",
                "undoCancel"
              ]
            },
            {
              "placementId": "100004",
              "deliveryArea": "NW3",
              "purchaseDate": "2021-01-01T14:51:12Z",
              "weeklyBudget": {
                "remaining": 0,
                "total": 13000,
                "maximumAllowable": 100000,
                "minimumAllowable": 500,
                "recommended": 14000
              },
              "status": {
                "budget": {
                  "code": "budgetExhausted"
                }
              },
              "availableActions": [
                "adjustBudget",
                "pause",
                "cancel"
              ]
            }
          ]
        }
      },
      "PromotedPlacementAvailablePlacement": {
        "type": "object",
        "nullable": false,
        "required": [
          "deliveryArea",
          "weeklyBudget"
        ],
        "properties": {
          "deliveryArea": {
            "type": "string",
            "description": "The postcode or location that is available for starting a placement.",
            "nullable": false
          },
          "weeklyBudget": {
            "type": "object",
            "description": "Contains information about the required weekly budget for this placement location.",
            "nullable": false,
            "required": [
              "maximumAllowable",
              "minimumAllowable",
              "recommended"
            ],
            "properties": {
              "maximumAllowable": {
                "type": "integer",
                "format": "int32",
                "description": "The maximum allowable budget for this week in the smallest unit of local currency (e.g., pence). It will not be possible to set a budget that exceeds this amount.",
                "nullable": false
              },
              "minimumAllowable": {
                "type": "integer",
                "format": "int32",
                "description": "The minimum allowable budget for this week in the smallest unit of local currency (e.g., pence). It will not be possible to set a budget lower than this amount.",
                "nullable": false
              },
              "recommended": {
                "type": "integer",
                "format": "int32",
                "description": "The recommended budget for this week so that the budget does not run out in the smallest unit of local currency (e.g., pence).",
                "nullable": false
              }
            },
            "additionalProperties": true
          },
          "inAllowList": {
            "type": "boolean",
            "description": "Indicates whether this placement is in the allow list for self-service purchase by the restaurant partner.",
            "nullable": false
          }
        },
        "additionalProperties": true,
        "example": {
          "deliveryArea": "NW6",
          "weeklyBudget": {
            "maximumAllowable": 100000,
            "minimumAllowable": 500,
            "recommended": 13000
          },
          "inAllowList": true
        }
      },
      "PromotedPlacementAvailablePlacementsForRestaurantResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "object",
            "description": "Additional metadata that may assist the rendering of the response.",
            "properties": {
              "currency": {
                "type": "string",
                "description": "The currency used for the budget data in ISO 4217 format, e.g., GBP, EUR or AUD.",
                "nullable": false
              },
              "timeZone": {
                "type": "string",
                "description": "The restaurant's timezone in IANA format, e.g., Europe/London."
              },
              "effectiveDate": {
                "type": "string",
                "format": "date-time",
                "description": "The UTC time at which the request was processed for relative time calculations.",
                "nullable": false
              }
            },
            "additionalProperties": true
          },
          "placements": {
            "type": "array",
            "description": "List of promoted placements available for purchase for a given restaurant.",
            "items": {
              "$ref": "#/components/schemas/PromotedPlacementAvailablePlacement"
            }
          }
        },
        "additionalProperties": true,
        "example": {
          "metadata": {
            "currency": "GBP",
            "effectiveDate": "2021-01-14T17:30:00Z"
          },
          "placements": [
            {
              "deliveryArea": "NW6",
              "weeklyBudget": {
                "maximumAllowable": 100000,
                "minimumAllowable": 500,
                "minimumRecommended": 1000,
                "recommended": 13000
              }
            },
            {
              "deliveryArea": "NW5",
              "weeklyBudget": {
                "maximumAllowable": 100000,
                "minimumAllowable": 500,
                "minimumRecommended": 1000,
                "recommended": 14000
              }
            },
            {
              "deliveryArea": "NW4",
              "weeklyBudget": {
                "maximumAllowable": 100000,
                "minimumAllowable": 500,
                "minimumRecommended": 1000,
                "recommended": 14000
              }
            },
            {
              "deliveryArea": "NW3",
              "weeklyBudget": {
                "maximumAllowable": 100000,
                "minimumAllowable": 500,
                "minimumRecommended": 1000,
                "recommended": 14000
              }
            }
          ]
        }
      },
      "PromotedPlacementCancelPlacementRequest": {
        "oneOf": [
          {
            "type": "object",
            "nullable": false,
            "required": [
              "cancellationEffective"
            ],
            "properties": {
              "cancellationEffective": {
                "type": "string",
                "description": "When the cancellation should take effect.",
                "enum": [
                  "atEndOfWeek"
                ]
              }
            },
            "additionalProperties": true
          },
          {
            "type": "object",
            "nullable": false,
            "required": [
              "cancellationEffective",
              "cancellationTime"
            ],
            "properties": {
              "cancellationEffective": {
                "type": "string",
                "description": "When the cancellation should take effect.",
                "enum": [
                  "atSpecifiedTime"
                ]
              },
              "cancellationTime": {
                "type": "string",
                "description": "The UTC time at which the cancellation should take effect.",
                "format": "date-time"
              }
            },
            "additionalProperties": true
          }
        ],
        "example": {
          "cancellationEffective": "atEndOfWeek"
        }
      },
      "PromotedPlacementCandidateRestaurant": {
        "type": "object",
        "properties": {
          "restaurantId": {
            "type": "string",
            "description": "The unique identifier of the candidate restaurant."
          },
          "rank": {
            "type": "number",
            "description": "The relative rank of this candidate restaurant in relation to others in the response. A smaller number indicates that this restaurant should be shown closer to the beginning of the list."
          }
        },
        "additionalProperties": true,
        "example": {
          "restaurantId": "1234",
          "rank": 1,
          "metadata": {
            "key": "value"
          }
        }
      },
      "PromotedPlacementCandidateRestaurantsResponse": {
        "type": "object",
        "properties": {
          "candidateRestaurants": {
            "type": "array",
            "description": "An array of candidate restaurants that are available for Promoted Placement.",
            "items": {
              "$ref": "#/components/schemas/PromotedPlacementCandidateRestaurant"
            }
          },
          "metadata": {
            "type": "object",
            "description": "Contains additional metadata that may affect the rendering of Promoted Placement candidate restaurants.",
            "properties": {
              "availableUnfilteredPositions": {
                "type": "number",
                "description": "The number of Promoted Placement positions available in this location when displaying the full list of restaurants."
              },
              "availableFilteredPositions": {
                "type": "number",
                "description": "The number of Promoted Placement positions available in this location when displaying a filtered list of restaurants."
              }
            },
            "additionalProperties": true
          }
        },
        "additionalProperties": false,
        "example": {
          "candidateRestaurants": [
            {
              "restaurantId": "1234",
              "rank": 1
            },
            {
              "restaurantId": "4567",
              "rank": 2
            },
            {
              "restaurantId": "3245",
              "rank": 3
            }
          ],
          "metadata": {
            "availableUnfilteredPositions": 5,
            "availableFilteredPositions": 2
          }
        }
      },
      "PromotedPlacementPlacementInsights": {
        "type": "object",
        "required": [
          "reports"
        ],
        "properties": {
          "metadata": {
            "type": "object",
            "description": "Additional metadata that may assist the rendering of the response.",
            "properties": {
              "currency": {
                "type": "string",
                "description": "The currency used in the reports in ISO 4217 format, e.g., GBP, EUR or AUD.",
                "nullable": false
              }
            },
            "additionalProperties": true
          },
          "reports": {
            "type": "object",
            "description": "Reports keyed by the name of specific time periods.",
            "additionalProperties": {
              "type": "object",
              "description": "A report for a given time period.",
              "required": [
                "period",
                "data"
              ],
              "properties": {
                "period": {
                  "type": "object",
                  "description": "Describes the time period for this report.",
                  "required": [
                    "createdAt",
                    "startDate",
                    "endDate"
                  ],
                  "properties": {
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The UTC time at which this report was generated.",
                      "nullable": false
                    },
                    "startDate": {
                      "type": "string",
                      "format": "date",
                      "description": "The start date of this report period.",
                      "nullable": false
                    },
                    "endDate": {
                      "type": "string",
                      "format": "date",
                      "description": "The end date of this report period.",
                      "nullable": false
                    }
                  }
                },
                "data": {
                  "type": "object",
                  "description": "The placement insights data for this report period.",
                  "properties": {
                    "overall": {
                      "type": "object",
                      "description": "Total values for this period.",
                      "required": [
                        "newCustomers",
                        "menuViews",
                        "orders",
                        "orderValue"
                      ],
                      "properties": {
                        "newCustomers": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The total number of new customers."
                        },
                        "menuViews": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The total number of menu views."
                        },
                        "orders": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The total number of orders."
                        },
                        "orderValue": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The total order value in the smallest unit of local currency (e.g., pence)."
                        }
                      },
                      "additionalProperties": true
                    },
                    "promotedPlacement": {
                      "type": "object",
                      "description": "Total values for promoted placement in this period.",
                      "required": [
                        "newCustomers",
                        "menuViews",
                        "orders",
                        "orderValue",
                        "placementSpend"
                      ],
                      "properties": {
                        "newCustomers": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The total number of new customers as a result of promoted placement."
                        },
                        "menuViews": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The total number of promoted menu views."
                        },
                        "orders": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The total number of orders resulting from promoted placement menu views."
                        },
                        "orderValue": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The total order value resulting from promoted placement orders in the smallest unit of local currency (e.g., pence)."
                        },
                        "placementSpend": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The total amount spent on promoted placement in the smallest unit of local currency (e.g., pence)."
                        }
                      },
                      "additionalProperties": true
                    }
                  },
                  "additionalProperties": true
                }
              },
              "additionalProperties": true
            }
          }
        },
        "additionalProperties": true,
        "example": {
          "metadata": {
            "currency": "GBP"
          },
          "reports": {
            "last-7-days": {
              "period": {
                "createdAt": "2021-01-22T08:06:14.199Z",
                "startDate": "2021-01-15",
                "endDate": "2021-01-21"
              },
              "data": {
                "overall": {
                  "newCustomers": 50,
                  "menuViews": 309,
                  "orders": 165,
                  "orderValue": 315910
                },
                "promotedPlacement": {
                  "newCustomers": 17,
                  "menuViews": 225,
                  "orders": 48,
                  "orderValue": 96090,
                  "placementSpend": 14190
                }
              }
            },
            "last-28-days": {
              "period": {
                "createdAt": "2021-01-22T08:06:14.278Z",
                "startDate": "2020-12-25",
                "endDate": "2021-01-21"
              },
              "data": {
                "overall": {
                  "newCustomers": 198,
                  "menuViews": 1236,
                  "orders": 660,
                  "orderValue": 1137241
                },
                "promotedPlacement": {
                  "newCustomers": 67,
                  "menuViews": 922,
                  "orders": 250,
                  "orderValue": 403212,
                  "placementSpend": 60630
                }
              }
            }
          }
        }
      },
      "RestaurantPromotedPlacementInfo": {
        "type": "object",
        "nullable": false,
        "properties": {
          "restaurantId": {
            "type": "string",
            "description": "Id of the restaurant"
          },
          "defaultPromoted": {
            "type": "boolean",
            "description": "Should be promoted by default"
          }
        },
        "example": {
          "restaurantId": "84335",
          "defaultPromoted": true
        }
      },
      "BasketProductsRequest": {
        "required": [
          "productIds",
          "restaurantId",
          "userExperimentValues"
        ],
        "type": "object",
        "description": "Describes a request for product recommendations based on products in a user's basket.",
        "properties": {
          "restaurantId": {
            "type": "string",
            "description": "The id of the restaurant that the recommendations are for."
          },
          "productIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of product ids that are in the user's basket."
          },
          "userExperimentValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExperimentValue"
            },
            "description": "An array of experiment name/variant values that the user is part of.\r\nIf none of these match the experiment names that the Cross Sell API\r\nknows about, an error will be thrown."
          }
        }
      },
      "ExperimentValue": {
        "required": [
          "name",
          "variant"
        ],
        "type": "object",
        "description": "Defines data related to an experiment.",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the experiment."
          },
          "variant": {
            "type": "string",
            "description": "The value that the user has been bucketed into, also known as the variant. For\r\nexample in an A/B test, this would be \"A\" or \"B\"."
          }
        }
      },
      "MenuRecommendationsRequest": {
        "required": [
          "restaurantId",
          "orderRequestDetails"
        ],
        "type": "object",
        "description": "Describes a request for dish recommendations for a particular restaurant menu.",
        "properties": {
          "restaurantId": {
            "type": "string",
            "description": "The id of the restaurant that the recommendations are for."
          },
          "orderRequestDetails": {
            "type": "object",
            "description": "Defines the time and service type for which the order is requested.",
            "properties": {
              "orderedForTime": {
                "type": "string",
                "format": "time",
                "description": "The time, local to restaurant, in ISO 8601 format, that the order is requested for. If the ordered for time is not known at the point of this request then the time should be the current local time.\n"
              },
              "dayOfWeek": {
                "type": "string",
                "description": "The day of the week that the order is placed for.",
                "enum": [
                  "sunday",
                  "monday",
                  "tuesday",
                  "wednesday",
                  "thursday",
                  "friday",
                  "saturday"
                ]
              },
              "serviceType": {
                "type": "string",
                "description": "The service type, \"collection\" or \"delivery\".",
                "enum": [
                  "collection",
                  "delivery"
                ]
              }
            }
          }
        }
      },
      "MenuRecommendationsResponse": {
        "required": [
          "themes"
        ],
        "type": "object",
        "description": "Contains menu dish recommendations.",
        "properties": {
          "themes": {
            "type": "array",
            "description": "List of the themes of the recommendations, i.e. personal favourites, most popular, etc.",
            "minItems": 0,
            "maxItems": 10,
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique identifier for the theme."
                },
                "recommendations": {
                  "type": "array",
                  "description": "List of dish recommendations for the theme.",
                  "minItems": 0,
                  "maxItems": 20,
                  "items": {
                    "type": "object",
                    "properties": {
                      "productId": {
                        "type": "string",
                        "description": "ID of a product/dish being recommended."
                      },
                      "confidence": {
                        "type": "number",
                        "format": "double",
                        "description": "Recommendation confidence score."
                      },
                      "type": {
                        "type": "string",
                        "description": "Describes the type of recommendation, i.e. popular, healthy."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ProductRecommendationsResponse": {
        "type": "object",
        "description": "Contains all recommendations for a product.",
        "properties": {
          "restaurantId": {
            "type": "string",
            "description": "Gets or sets the restaurant id"
          },
          "renderWithView": {
            "type": "string",
            "description": "Gets or sets the name of the UI component that the client should use to display the recommendations,\r\nwhich is taken from the experiment data for the user."
          },
          "recommendations": {
            "type": "array",
            "description": "Gets or sets an array of products that are recommended for the source product.",
            "items": {
              "type": "object",
              "description": "Contains information for a single recommended product.",
              "properties": {
                "productId": {
                  "type": "string",
                  "description": "Gets or sets the id of the product that is being recommended."
                },
                "confidence": {
                  "type": "number",
                  "description": "Gets or sets the confidence level of this recommendation (between 0 and 1).",
                  "format": "double"
                },
                "imageUrl": {
                  "type": "string",
                  "description": "The URL of the image, if available, to display with the view"
                }
              }
            }
          }
        }
      },
      "partner-restaurant-temporary-offline-status": {
        "type": "object",
        "properties": {
          "Status": {
            "enum": [
              "TempOffline",
              "ClosedToday",
              "None"
            ],
            "type": "string"
          },
          "Message": {
            "type": "string"
          }
        },
        "example": {
          "Status": "TempOffline",
          "Message": "Too busy"
        }
      },
      "restaurant-details-updated": {
        "type": "object",
        "properties": {
          "event": {
            "type": "string",
            "format": "enum",
            "enum": [
              "RestaurantUpdated"
            ]
          },
          "restaurants": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "format": "integer",
                  "description": "The JUST EAT restaurant id"
                },
                "name": {
                  "type": "string"
                },
                "firstLine": {
                  "type": "string"
                },
                "city": {
                  "type": "string"
                },
                "postcode": {
                  "type": "string"
                },
                "latitude": {
                  "type": "number",
                  "format": "float"
                },
                "longitude": {
                  "type": "number",
                  "format": "float"
                }
              }
            }
          },
          "tenant": {
            "type": "string",
            "description": "The country the restaurant(s) exists in"
          }
        }
      },
      "restaurant-hours-changed": {
        "type": "object",
        "properties": {
          "Event": {
            "type": "string",
            "format": "enum",
            "enum": [
              "OpenHoursForRestaurantChanged"
            ]
          },
          "RestaurantReference": {
            "type": "string",
            "description": "The JUST EAT Restaurant Id"
          },
          "OpenHours": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "DayOfWeek": {
                  "type": "string",
                  "format": "enum",
                  "enum": [
                    "Sunday",
                    "Monday",
                    "Tuesday",
                    "Wednesday",
                    "Thursday",
                    "Friday",
                    "Saturday"
                  ],
                  "description": "The day of the week the times are for."
                },
                "OpenTime": {
                  "type": "string",
                  "description": "The open time (HH:mm)"
                },
                "CloseTime": {
                  "type": "string",
                  "description": "The close time (HH:mm) (Wide clock, i.e. if before start it is following day)"
                },
                "Closed": {
                  "type": "boolean",
                  "description": "The restaurant is closed for the day"
                }
              }
            }
          },
          "Tenant": {
            "type": "string",
            "description": "The country the restaurant exists in"
          }
        }
      },
      "restaurant-information-updated": {
        "type": "object",
        "properties": {
          "event": {
            "type": "string",
            "format": "enum",
            "enum": [
              "RestaurantInformationUpdated"
            ]
          },
          "RestaurantInformationUpdated": {
            "type": "object",
            "properties": {
              "RestaurantId": {
                "type": "string",
                "description": "The JUST EAT Restaurant Id"
              },
              "Tenant": {
                "type": "string",
                "description": "The country the restaurant exists in"
              },
              "RestaurantInfo": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer"
                  },
                  "name": {
                    "type": "string"
                  },
                  "brandName": {
                    "type": "string"
                  },
                  "seoName": {
                    "type": "string"
                  },
                  "address": {
                    "type": "object",
                    "properties": {
                      "firstLine": {
                        "type": "string"
                      },
                      "city": {
                        "type": "string"
                      },
                      "postcode": {
                        "type": "string"
                      },
                      "location": {
                        "type": "object",
                        "properties": {
                          "lat": {
                            "type": "number",
                            "format": "double"
                          },
                          "lng": {
                            "type": "number",
                            "format": "double"
                          }
                        }
                      }
                    }
                  },
                  "phoneNumber": {
                    "type": "string"
                  },
                  "allergenPhoneNumber": {
                    "type": "string"
                  },
                  "allergenUrl": {
                    "type": "string"
                  },
                  "mobileNumber": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "ownerName": {
                    "type": "string"
                  },
                  "alternativeOwnerName": {
                    "type": "string"
                  },
                  "alternativeOwnerNumber": {
                    "type": "string"
                  },
                  "legalName": {
                    "type": "string"
                  },
                  "companyNo": {
                    "type": "string"
                  },
                  "logoUrl": {
                    "type": "string"
                  },
                  "openingClosingTimes": {
                    "type": "object",
                    "properties": {
                      "mondayClosed": {
                        "type": "boolean"
                      },
                      "tuesdayClosed": {
                        "type": "boolean"
                      },
                      "wednesdayClosed": {
                        "type": "boolean"
                      },
                      "thursdayClosed": {
                        "type": "boolean"
                      },
                      "fridayClosed": {
                        "type": "boolean"
                      },
                      "saturdayClosed": {
                        "type": "boolean"
                      },
                      "sundayClosed": {
                        "type": "boolean"
                      },
                      "mondayOpeningTimeOfDay": {
                        "type": "string"
                      },
                      "tuesdayOpeningTimeOfDay": {
                        "type": "string"
                      },
                      "wednesdayOpeningTimeOfDay": {
                        "type": "string"
                      },
                      "thursdayOpeningTimeOfDay": {
                        "type": "string"
                      },
                      "fridayOpeningTimeOfDay": {
                        "type": "string"
                      },
                      "saturdayOpeningTimeOfDay": {
                        "type": "string"
                      },
                      "sundayOpeningTimeOfDay": {
                        "type": "string"
                      },
                      "mondayClosingTimeOfDay": {
                        "type": "string"
                      },
                      "tuesdayClosingTimeOfDay": {
                        "type": "string"
                      },
                      "wednesdayClosingTimeOfDay": {
                        "type": "string"
                      },
                      "thursdayClosingTimeOfDay": {
                        "type": "string"
                      },
                      "fridayClosingTimeOfDay": {
                        "type": "string"
                      },
                      "saturdayClosingTimeOfDay": {
                        "type": "string"
                      },
                      "sundayClosingTimeOfDay": {
                        "type": "string"
                      }
                    }
                  },
                  "signupReference": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "restaurant-offline-status": {
        "type": "object",
        "properties": {
          "Event": {
            "type": "string",
            "format": "enum",
            "enum": [
              "RestaurantOfflineStatus"
            ]
          },
          "RestaurantReference": {
            "type": "string",
            "description": "The JUST EAT Restaurant Id"
          },
          "RestaurantOfflineStatus": {
            "$ref": "#/components/schemas/RestaurantOfflineStatus"
          }
        }
      },
      "restaurant-status": {
        "type": "object",
        "properties": {
          "Event": {
            "type": "string",
            "format": "enum",
            "enum": [
              "RestaurantStatusChange"
            ]
          },
          "RestaurantReference": {
            "type": "string",
            "description": "The JUST EAT Restaurant Id"
          },
          "Status": {
            "type": "string",
            "format": "enum",
            "enum": [
              "online",
              "offline"
            ]
          },
          "Message": {
            "type": "string",
            "deprecated": true,
            "description": "This field should not be used but has been left in the callback for backwards compatibility purposes"
          }
        }
      },
      "ListOfOfflineItemsResponse": {
        "type": "object",
        "properties": {
          "offlineItems": {
            "type": "array",
            "description": "List of offline items for a given restaurant.",
            "items": {
              "$ref": "#/components/schemas/OfflineItemsResponse"
            }
          },
          "paging": {
            "type": "object",
            "description": "Consists of pagination information.",
            "properties": {
              "cursors": {
                "type": "object",
                "description": "Consists of cursors markers used in pagination.",
                "properties": {
                  "after": {
                    "type": "string",
                    "description": "The value should be used in the query parameter named after. It is used as a cursor of the last returned record in the previous request, from which next offset going to be fetched. A missing or empty value indicates that the end of the result set has been reached."
                  }
                }
              }
            }
          }
        },
        "example": {
          "offlineItems": [
            {
              "id": "111",
              "type": "variation",
              "nextAvailableAt": "2021-01-01T05:00:00.0000000Z"
            },
            {
              "id": "222",
              "type": "variation",
              "nextAvailableAt": "2021-01-01T05:00:00.0000000Z"
            },
            {
              "id": "888",
              "type": "modifier",
              "nextAvailableAt": "2021-01-01T05:00:00.0000000Z"
            },
            {
              "id": "999",
              "type": "modifier",
              "nextAvailableAt": "2021-01-01T05:00:00.0000000Z"
            }
          ],
          "paging": {
            "cursors": {
              "after": "NDMyNzQyODI3OTQw"
            }
          }
        }
      },
      "OfflineItemsRequest": {
        "type": "object",
        "properties": {
          "variationIds": {
            "type": "array",
            "description": "Variation identifiers. Maximum sum of 25 Variation and Modifier IDs.",
            "maxItems": 25,
            "minItems": 0,
            "items": {
              "type": "string"
            }
          },
          "modifierIds": {
            "type": "array",
            "description": "Modifier identifiers. Maximum sum of 25 Variation and Modifier IDs.",
            "maxItems": 25,
            "minItems": 0,
            "items": {
              "type": "string"
            }
          },
          "nextAvailableAt": {
            "type": "string",
            "description": "Time when items will be brought back online (ISO-8601 Date Time UTC).",
            "format": "date-time"
          }
        },
        "example": {
          "variationIds": [
            "111",
            "222",
            "333"
          ],
          "modifierIds": [
            "777",
            "888",
            "999"
          ],
          "nextAvailableAt": "2021-01-01T05:00:00.0000000Z"
        }
      },
      "OfflineItemsResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Item identifier.",
            "items": {
              "type": "string"
            }
          },
          "type": {
            "type": "string",
            "description": "Item type identifier.",
            "items": {
              "type": "string"
            }
          },
          "nextAvailableAt": {
            "type": "string",
            "description": "Time when item(s) will be brought back online (ISO-8601 Date Time UTC).",
            "format": "date-time"
          }
        },
        "example": {
          "id": "111",
          "type": "variation",
          "nextAvailableAt": "2021-01-01T05:00:00.0000000Z"
        }
      },
      "OnlineItemsRequest": {
        "type": "object",
        "properties": {
          "variationIds": {
            "type": "array",
            "description": "Variation identifiers. Maximum sum of 25 Variation and Modifier IDs.",
            "maxItems": 25,
            "minItems": 0,
            "items": {
              "type": "string"
            }
          },
          "modifierIds": {
            "type": "array",
            "description": "Modifier identifiers. Maximum sum of 25 Variation and Modifier IDs.",
            "maxItems": 25,
            "minItems": 0,
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "variationIds": [
            "111",
            "222",
            "333"
          ],
          "modifierIds": [
            "777",
            "888",
            "999"
          ]
        }
      },
      "restaurantEmailAddress": {
        "type": "object",
        "properties": {
          "emailAddress": {
            "description": "The email address of the restaurant that the login link will be sent to",
            "type": "string"
          }
        }
      },
      "RestaurantErrorResponse": {
        "type": "object",
        "properties": {
          "errorId": {
            "type": "string",
            "description": "A value that helps identify this response back to logs, so we can easily find this specific fault"
          },
          "requestId": {
            "type": "string",
            "description": "A value that helps identify the trace back to logs, so that we can easily find what was happening on our system when the fault was generated"
          },
          "statusCode": {
            "type": "string",
            "description": "Http response status code"
          },
          "errorCode": {
            "type": "string",
            "description": "A code that identifies the problem type. It will be supported by human-readable documentation that identifies how to resolve the error"
          },
          "message": {
            "type": "string",
            "description": "Specific details about the error that may assist the you in resolving the issue"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Date-time when this request was processed"
          }
        },
        "example": {
          "errorId": "6947c692-ca24-434d-8166-d4d54ef8d74e",
          "requestId": "8000324e-0000-f400-b63f-84710c7967bb",
          "statusCode": "400",
          "errorCode": "InvalidCountryCode",
          "message": "The country code 'zzz' is not supported.",
          "timestamp": "2019-10-02T12:34:53.1214447+00:00"
        }
      },
      "VariationReorderDeal": {
        "title": "VariationReorderDeal",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "Type": {
            "type": "string",
            "description": "The type of the object. This will always be 'deal'."
          },
          "Id": {
            "type": "string",
            "description": "The unique identifier for the deal."
          },
          "Attributes": {
            "type": "object",
            "description": "An object containing all the attributes of a Deal",
            "additionalProperties": false,
            "properties": {
              "Rank": {
                "type": "integer",
                "description": "The position in the deal in the list. The data list is ordered by this ascending."
              },
              "Quantity": {
                "type": "integer",
                "description": "How many of the deal were previously ordered. When re-adding to basket this is the number that should be added."
              },
              "DealGroups": {
                "type": "array",
                "description": "A list of all the deal groups attached to a deal. 20 items maximum.",
                "items": {
                  "$ref": "#/components/schemas/VariationReorderDealGroup"
                }
              }
            }
          }
        }
      },
      "VariationReorderDealGroup": {
        "title": "VariationReorderDealGroup",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "The unique identifier for a deal group."
          },
          "Variations": {
            "type": "array",
            "description": "A list of variations in the deal group. 20 items maximum.",
            "items": {
              "$ref": "#/components/schemas/VariationReorderVariation"
            }
          }
        }
      },
      "VariationReorderModifier": {
        "title": "VariationReorderModifier",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "A unique identifier for the variation modifier."
          },
          "Quantity": {
            "type": "integer",
            "description": "How many of the modifier were previously added to the variation."
          }
        }
      },
      "VariationReorderModifierGroup": {
        "title": "VariationReorderModifierGroup",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "The unique identifier for a modifier group."
          },
          "Modifiers": {
            "type": "array",
            "description": "A list of modifiers applied in this modifier group. 20 items maximum.",
            "items": {
              "$ref": "#/components/schemas/VariationReorderModifier"
            }
          }
        }
      },
      "VariationReorderRankedVariation": {
        "title": "VariationReorderRankedVariation",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "Type": {
            "type": "string",
            "description": "The type of the object. This will always be 'variation'."
          },
          "Id": {
            "type": "string",
            "description": "The unique identifier for the variation."
          },
          "Attributes": {
            "type": "object",
            "description": "An object containing all the attributes of a Deal",
            "additionalProperties": false,
            "properties": {
              "Rank": {
                "type": "integer",
                "description": "The position in the variation in the array. The data array is ordered by this ascending."
              },
              "Quantity": {
                "type": "integer",
                "description": "How many of the variation were previously ordered. When re-adding to basket, this is the number that should be added."
              },
              "ModifierGroups": {
                "type": "array",
                "description": "A list of all the modifiers previously applied to the variation. 20 items maximum.",
                "items": {
                  "$ref": "#/components/schemas/VariationReorderModifierGroup"
                }
              }
            }
          }
        }
      },
      "VariationReorderVariation": {
        "title": "VariationReorderVariation",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "The unique identifier for the variation."
          },
          "Quantity": {
            "type": "integer",
            "description": "How many of the variation were previously ordered."
          },
          "ModifierGroups": {
            "type": "array",
            "description": "A list of all the modifiers previously applied to the variation. 20 items maximum.",
            "items": {
              "$ref": "#/components/schemas/VariationReorderModifierGroup"
            }
          }
        }
      },
      "RestaurantCapabilitiesPaymentTypeItem": {
        "type": "object",
        "properties": {
          "paymentType": {
            "type": "string",
            "description": "The payment type",
            "enum": [
              "ApplePay",
              "Card",
              "Cash",
              "GooglePay",
              "PayPal",
              "VCO"
            ]
          },
          "selected": {
            "type": "boolean",
            "description": "Flag to indicate if the payment type has been selected"
          },
          "voucherAvailable": {
            "type": "boolean",
            "description": "Flag to indicate if vouchers are available for the payment type"
          },
          "token": {
            "type": "string",
            "description": "Token to be used with the payment type (only applies to `PayPal` payment type)"
          },
          "maxOrderValueCents": {
            "type": "number",
            "format": "integer",
            "description": "Max order value in smallest unit of relevant currency (only applies to `Cash` payment type)"
          },
          "cardTypes": {
            "type": "array",
            "description": "List of card types (only applies to `Card` payment type)",
            "items": {
              "type": "string",
              "format": "enum",
              "enum": [
                "AMEX",
                "DK",
                "MASTERCARD",
                "VISA",
                "VISADK"
              ]
            }
          }
        },
        "example": {
          "paymentType": "Card",
          "selected": false,
          "cardTypes": [
            "VISA",
            "MASTERCARD",
            "AMEX"
          ]
        }
      },
      "RestaurantCapabilitiesResponse": {
        "type": "object",
        "properties": {
          "availablePaymentTypes": {
            "type": "array",
            "description": "List of available payment types",
            "items": {
              "$ref": "#/components/schemas/RestaurantCapabilitiesPaymentTypeItem"
            }
          },
          "feeConfig": {
            "type": "object",
            "description": "Details of any additional fees",
            "properties": {
              "amountCents": {
                "type": "number",
                "format": "integer",
                "description": "The fee amount in smallest unit of relevant currency"
              }
            }
          }
        },
        "example": {
          "availablePaymentTypes": [
            {
              "paymentType": "ApplePay",
              "selected": true,
              "voucherAvailable": true
            },
            {
              "paymentType": "GooglePay",
              "selected": false
            },
            {
              "paymentType": "PayPal",
              "selected": false,
              "token": "token123"
            },
            {
              "paymentType": "VCO",
              "selected": false
            },
            {
              "paymentType": "Cash",
              "selected": false,
              "maxOrderValueCents": 5000
            },
            {
              "paymentType": "Card",
              "selected": false,
              "cardTypes": [
                "VISA",
                "MASTERCARD",
                "AMEX"
              ]
            }
          ],
          "feeConfig": {
            "amountCents": 1000
          }
        }
      },
      "ClaimResolution": {
        "type": "object",
        "nullable": true,
        "description": "Representation of the decision made about a claim",
        "properties": {
          "decision": {
            "type": "string",
            "description": "Indicates whether the claim is accepted, partially accepted or rejected - claim is partially accepted if at least one of the claimed items is accepted",
            "enum": [
              "Accepted",
              "PartiallyAccepted",
              "Rejected"
            ]
          },
          "totalClaimedAccepted": {
            "type": "number",
            "description": "Total claimed money accepted by the restaurant in smallest unit of relevant currency"
          },
          "resolvedDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date when decision on the claim was submitted"
          },
          "resolvedChannel": {
            "type": "string",
            "description": "Channel which was used to resolved the claim"
          }
        },
        "example": {
          "decision": "Accepted",
          "totalClaimedAccepted": 1900,
          "resolvedDate": "2020-05-28T06:40:48.1053368+00:00",
          "resolvedChannel": "PartnerCentre"
        }
      },
      "ClaimResponse": {
        "type": "object",
        "description": "Response containing a single claim",
        "$ref": "#/components/schemas/OrderClaim",
        "example": {
          "id": "2f749442-a62a-abcd-8623-04202878e034",
          "orderId": "r23tqoxdoeupdx9w8evorw",
          "friendlyOrderReference": "451226580",
          "issueType": "Damaged",
          "submittedDate": "2020-05-20T14:22:11.1053368+00:00",
          "expirationDate": "2020-05-22T14:22:11.1053368+00:00",
          "currency": "GBP",
          "totalClaimed": 3800,
          "state": "Closed",
          "resolution": {
            "decision": "PartiallyAccepted",
            "totalClaimedAccepted": 1900,
            "resolvedDate": "2020-05-28T06:40:48.1053368+00:00",
            "resolvedChannel": "PartnerCentre"
          },
          "restaurantResponse": {
            "items": [
              {
                "id": "NJ7iYXNrZXRJdGVtLTM2NTc0GTk2LTMwNDY2LXMzOWJxb3hkb2V1cGR4OXc4ZXZvcnc1",
                "decision": "Rejected"
              },
              {
                "id": "123iYXNrZXRJdGVtLTM2NTc0GTk2LTMwNDY2LXMzOWJxb3hkb2V1cGR4OXc4ZXZvcnc1",
                "decision": "Accepted"
              }
            ],
            "justification": {
              "reason": "Other",
              "comments": "Not our fault at all"
            }
          },
          "affectedItems": [
            {
              "id": "NJ7iYXNrZXRJdGVtLTM2NTc0GTk2LTMwNDY2LXMzOWJxb3hkb2V1cGR4OXc4ZXZvcnc1",
              "reference": "productid%4t56574596",
              "name": "Potato skin",
              "quantity": 1,
              "totalClaimed": 1900,
              "unitPrice": 2000,
              "additionalContext": "Potato skin was damaged",
              "decision": "Rejected"
            },
            {
              "id": "123iYXNrZXRJdGVtLTM2NTc0GTk2LTMwNDY2LXMzOWJxb3hkb2V1cGR4OXc4ZXZvcnc1",
              "reference": "productid%t5y6574596",
              "name": "Pizza",
              "quantity": 1,
              "totalClaimed": 1900,
              "unitPrice": 2000,
              "additionalContext": "Pizza was damaged too",
              "decision": "Accepted"
            }
          ]
        }
      },
      "ClaimsResponse": {
        "type": "object",
        "description": "Response containing claims for a restaurant which match the given filter",
        "properties": {
          "claims": {
            "type": "array",
            "description": "Array with claims",
            "items": {
              "$ref": "#/components/schemas/OrderClaim"
            }
          }
        },
        "example": {
          "claims": [
            {
              "id": "z2749442-a62a-abcd-8623-04202878e034",
              "orderId": "z27tqoxdoeupdx9w8evorw",
              "friendlyOrderReference": "954226580",
              "issueType": "LateOrder",
              "submittedDate": "2020-05-20T14:22:11.1053368+00:00",
              "expirationDate": "2020-05-22T14:22:11.1053368+00:00",
              "currency": "GBP",
              "totalClaimed": 4000,
              "state": "Closed",
              "resolution": {
                "decision": "Accepted",
                "totalClaimedAccepted": 4000,
                "resolvedDate": "2020-05-28T06:40:48.1053368+00:00",
                "resolvedChannel": "OrderPad"
              },
              "restaurantResponse": {
                "decision": "Accepted",
                "justification": null
              }
            },
            {
              "id": "2f749442-a62a-abcd-8623-04202878e034",
              "orderId": "r23tqoxdoeupdx9w8evorw",
              "friendlyOrderReference": "451226580",
              "issueType": "Damaged",
              "submittedDate": "2020-05-20T14:22:11.1053368+00:00",
              "expirationDate": "2020-05-22T14:22:11.1053368+00:00",
              "currency": "GBP",
              "totalClaimed": 3800,
              "state": "Open",
              "resolution": null,
              "restaurantResponse": null,
              "affectedItems": [
                {
                  "id": "NJ7iYXNrZXRJdGVtLTM2NTc0GTk2LTMwNDY2LXMzOWJxb3hkb2V1cGR4OXc4ZXZvcnc1",
                  "reference": "productid%4t56574596",
                  "name": "Potato skin",
                  "quantity": 1,
                  "totalClaimed": 1900,
                  "unitPrice": 2000,
                  "additionalContext": null,
                  "decision": "NotDecided"
                },
                {
                  "id": "123iYXNrZXRJdGVtLTM2NTc0GTk2LTMwNDY2LXMzOWJxb3hkb2V1cGR4OXc4ZXZvcnc1",
                  "reference": "productid%t5y6574596",
                  "name": "Pizza",
                  "quantity": 1,
                  "totalClaimed": 1900,
                  "unitPrice": 2000,
                  "additionalContext": null,
                  "decision": "NotDecided"
                }
              ]
            },
            {
              "id": "1f749442-a62a-abcd-8623-04202878e034",
              "orderId": "a23tqoxdoeupdx9w8evorw",
              "friendlyOrderReference": "151226580",
              "issueType": "Cold",
              "submittedDate": "2020-05-20T14:22:11.1053368+00:00",
              "expirationDate": "2020-05-22T14:22:11.1053368+00:00",
              "currency": "GBP",
              "totalClaimed": 1900,
              "state": "Closed",
              "resolution": {
                "decision": "Rejected",
                "totalClaimedAccepted": 0,
                "resolvedDate": "2020-05-28T06:40:48.1053368+00:00",
                "resolvedChannel": "PartnerCentre"
              },
              "restaurantResponse": {
                "items": [
                  {
                    "id": "NJ7iYXNrZXRJdGVtLTM2NTc0GTk2LTMwNDY2LXMzOWJxb3hkb2V1cGR4OXc4ZXZvcnc1",
                    "decision": "Rejected"
                  }
                ],
                "justification": {
                  "reason": "OrderWasHot",
                  "comments": null
                }
              },
              "affectedItems": [
                {
                  "id": "NJ7iYXNrZXRJdGVtLTM2NTc0GTk2LTMwNDY2LXMzOWJxb3hkb2V1cGR4OXc4ZXZvcnc1",
                  "reference": "productid%4t56574596",
                  "name": "Potato skin",
                  "quantity": 1,
                  "totalClaimed": 1900,
                  "unitPrice": 2000,
                  "additionalContext": "Potato skin was cold",
                  "decision": "Rejected"
                }
              ]
            },
            {
              "id": "zf749442-a62a-abcd-8623-04202878e034",
              "orderId": "z23tqoxdoeupdx9w8evorw",
              "friendlyOrderReference": "951226580",
              "issueType": "Cold",
              "submittedDate": "2020-05-20T14:22:11.1053368+00:00",
              "expirationDate": "2020-05-22T14:22:11.1053368+00:00",
              "currency": "GBP",
              "totalClaimed": 1900,
              "state": "Closed",
              "resolution": {
                "decision": "Accepted",
                "totalClaimedAccepted": 1900,
                "resolvedDate": "2020-05-28T06:40:48.1053368+00:00",
                "resolvedChannel": "OrderPad"
              },
              "restaurantResponse": {
                "items": [
                  {
                    "id": "NJ7iYXNrZXRJdGVtLTM2NTc0GTk2LTMwNDY2LXMzOWJxb3hkb2V1cGR4OXc4ZXZvcnc1",
                    "decision": "Accepted"
                  }
                ],
                "justification": null
              },
              "affectedItems": [
                {
                  "id": "NJ7iYXNrZXRJdGVtLTM2NTc0GTk2LTMwNDY2LXMzOWJxb3hkb2V1cGR4OXc4ZXZvcnc1",
                  "reference": "productid%4t56574596",
                  "name": "Potato skin",
                  "quantity": 1,
                  "totalClaimed": 1900,
                  "unitPrice": 2000,
                  "additionalContext": "Potato skin was cold",
                  "decision": "Accepted"
                }
              ]
            },
            {
              "id": "zf749442-a62a-abcd-8623-04202878e038",
              "orderId": "z23tqoxdoeupdx9w8evorz",
              "friendlyOrderReference": "951226588",
              "issueType": "Cold",
              "submittedDate": "2020-05-20T14:22:11.1053368+00:00",
              "expirationDate": "2020-05-22T14:22:11.1053368+00:00",
              "currency": "GBP",
              "totalClaimed": 1900,
              "state": "Closed",
              "resolution": {
                "decision": "PartiallyAccepted",
                "totalClaimedAccepted": 1900,
                "resolvedDate": "2020-05-28T06:40:48.1053368+00:00",
                "resolvedChannel": "OrderPad"
              },
              "restaurantResponse": {
                "items": [
                  {
                    "id": "NJ7iYXNrZXRJdGVtLTM2NTc0GTk2LTMwNDY2LXMzOWJxb3hkb2V1cGR4OXc4ZXZvcnc1",
                    "decision": "Accepted"
                  },
                  {
                    "id": "NJ7iYXNrZXRJdGVtLTM2NTc0GTk2LTMwNDY2LXMzOWJxb3hkb2V1cGR4OXc4ZXZvcnc3",
                    "decision": "Rejected"
                  }
                ],
                "justification": null
              },
              "affectedItems": [
                {
                  "id": "NJ7iYXNrZXRJdGVtLTM2NTc0GTk2LTMwNDY2LXMzOWJxb3hkb2V1cGR4OXc4ZXZvcnc1",
                  "reference": "productid%4t56574596",
                  "name": "Potato skin",
                  "quantity": 1,
                  "totalClaimed": 1900,
                  "unitPrice": 2000,
                  "additionalContext": "Potato skin was cold",
                  "decision": "Accepted"
                },
                {
                  "id": "NJ7iYXNrZXRJdGVtLTM2NTc0GTk2LTMwNDY2LXMzOWJxb3hkb2V1cGR4OXc4ZXZvcnc3",
                  "reference": "productid%4t56574593",
                  "name": "Meat",
                  "quantity": 1,
                  "totalClaimed": 2900,
                  "unitPrice": 3000,
                  "additionalContext": "Meat was terribly cold",
                  "decision": "Rejected"
                }
              ]
            }
          ]
        }
      },
      "Item": {
        "type": "object",
        "description": "Information about an item in the claim",
        "properties": {
          "id": {
            "type": "string",
            "description": "Item identifier"
          },
          "name": {
            "type": "string",
            "description": "Item name"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity of items"
          },
          "totalClaimed": {
            "type": "number",
            "description": "Total claimed money in smallest unit of relevant currency"
          },
          "unitPrice": {
            "type": "number",
            "description": "Price of a single unit in smallest unit of relevant currency"
          },
          "additionalContext": {
            "type": "string",
            "description": "Comment giving additional context",
            "nullable": true
          },
          "decision": {
            "type": "string",
            "description": "Indicates whether decision on the claimed item was made and what was that decision",
            "enum": [
              "NotDecided",
              "Accepted",
              "Rejected"
            ]
          }
        },
        "example": {
          "id": "NJ7iYXNrZXRJdGVtLTM2NTc0GTk2LTMwNDY2LXMzOWJxb3hkb2V1cGR4OXc4ZXZvcnc1",
          "name": "Potato skin",
          "quantity": 1,
          "totalClaimed": 1900,
          "unitPrice": 2000,
          "additionalContext": "Potato skin was damaged",
          "decision": "Rejected"
        }
      },
      "ItemDecision": {
        "type": "object",
        "description": "Decision on the item",
        "properties": {
          "id": {
            "type": "string",
            "description": "Item identifier"
          },
          "decision": {
            "type": "string",
            "description": "Decision made about the item",
            "enum": [
              "Accepted",
              "Rejected"
            ]
          }
        },
        "example": {
          "id": "NJ7iYXNrZXRJdGVtLTM2NTc0GTk2LTMwNDY2LXMzOWJxb3hkb2V1cGR4OXc4ZXZvcnc1",
          "decision": "Accepted"
        }
      },
      "Justification": {
        "type": "object",
        "nullable": true,
        "description": "The reason of the claim rejection and optional comments from the restaurant",
        "properties": {
          "reason": {
            "type": "string",
            "description": "One of the predefined reasons",
            "enum": [
              "AlreadyRefunded",
              "ItemReplaced",
              "PartialRefundRequired",
              "WasNotMissing",
              "WillRedeliver",
              "OrderWasHot",
              "OrderWasOnTime",
              "OrderWasPacked",
              "FoodWasIntact",
              "AddExtraItem",
              "Other"
            ]
          },
          "comments": {
            "type": "string",
            "description": "Comment from the restaurant owner in case they rejected at least one of the items and want to type their own rejection reason",
            "nullable": true
          }
        },
        "example": {
          "reason": "Other",
          "comments": "The food was packed properly"
        }
      },
      "OrderClaim": {
        "type": "object",
        "description": "Claim information",
        "properties": {
          "id": {
            "type": "string",
            "description": "Claim identifier"
          },
          "orderId": {
            "type": "string",
            "description": "Just Eat order identifier"
          },
          "friendlyOrderReference": {
            "type": "string",
            "description": "Just Eat friendly order reference"
          },
          "issueType": {
            "type": "string",
            "description": "Type of claim",
            "enum": [
              "Missing",
              "Damaged",
              "Cold",
              "LateOrder",
              "FoodNotArrived"
            ]
          },
          "submittedDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the claim was submitted"
          },
          "expirationDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the claim will be accepted automatically in case the owner of the restaurant ignores it"
          },
          "currency": {
            "type": "string",
            "description": "Name of currency in ISO 4217 format"
          },
          "totalClaimed": {
            "type": "number",
            "description": "Total claimed money in smallest unit of relevant currency"
          },
          "state": {
            "type": "string",
            "description": "Indicates whether a decision about the claim was made",
            "enum": [
              "Open",
              "Closed"
            ]
          },
          "resolution": {
            "$ref": "#/components/schemas/ClaimResolution",
            "description": "Representation of the claim resolution"
          },
          "restaurantResponse": {
            "type": "object",
            "description": "Restaurant response on the claim",
            "$ref": "#/components/schemas/OrderClaimRestaurantResponse"
          },
          "affectedItems": {
            "nullable": true,
            "type": "array",
            "description": "Information about the claimed items",
            "items": {
              "$ref": "#/components/schemas/Item"
            }
          }
        },
        "example": {
          "id": "2f749442-a62a-abcd-8623-04202878e034",
          "orderId": "r23tqoxdoeupdx9w8evorw",
          "friendlyOrderReference": "451226580",
          "issueType": "Damaged",
          "submittedDate": "2020-05-20T14:22:11.1053368+00:00",
          "expirationDate": "2020-05-22T14:22:11.1053368+00:00",
          "currency": "GBP",
          "totalClaimed": 3800,
          "state": "Closed",
          "resolution": {
            "decision": "PartiallyAccepted",
            "totalClaimedAccepted": 1900,
            "resolvedDate": "2020-05-28T06:40:48.1053368+00:00",
            "resolvedChannel": "PartnerCentre"
          },
          "restaurantResponse": {
            "decision": "PartiallyAccepted",
            "items": [
              {
                "id": "NJ7iYXNrZXRJdGVtLTM2NTc0GTk2LTMwNDY2LXMzOWJxb3hkb2V1cGR4OXc4ZXZvcnc1",
                "decision": "Rejected"
              },
              {
                "id": "123iYXNrZXRJdGVtLTM2NTc0GTk2LTMwNDY2LXMzOWJxb3hkb2V1cGR4OXc4ZXZvcnc1",
                "decision": "Accepted"
              }
            ],
            "justification": {
              "reason": "Other",
              "comments": "The food was packed properly"
            }
          },
          "affectedItems": [
            {
              "id": "NJ7iYXNrZXRJdGVtLTM2NTc0GTk2LTMwNDY2LXMzOWJxb3hkb2V1cGR4OXc4ZXZvcnc1",
              "reference": "productid%4t56574596",
              "name": "Potato skin",
              "quantity": 1,
              "totalClaimed": 1900,
              "unitPrice": 2000,
              "additionalContext": "Potato skin was damaged",
              "decision": "Rejected"
            },
            {
              "id": "123iYXNrZXRJdGVtLTM2NTc0GTk2LTMwNDY2LXMzOWJxb3hkb2V1cGR4OXc4ZXZvcnc1",
              "reference": "productid%t5y6574596",
              "name": "Pizza",
              "quantity": 1,
              "totalClaimed": 1900,
              "unitPrice": 2000,
              "additionalContext": "Pizza was damaged too",
              "decision": "Accepted"
            }
          ]
        }
      },
      "OrderClaimRestaurantResponse": {
        "type": "object",
        "nullable": true,
        "description": "Restaurant response for the claim",
        "properties": {
          "decision": {
            "type": "string",
            "description": "Decision on the claim",
            "enum": [
              "Accepted",
              "Rejected",
              "PartiallyAccepted"
            ]
          },
          "items": {
            "nullable": true,
            "type": "array",
            "description": "Decisions on the items of a claim",
            "items": {
              "$ref": "#/components/schemas/ItemDecision"
            }
          },
          "justification": {
            "description": "Reasons why of the decision for the claim",
            "$ref": "#/components/schemas/Justification"
          }
        },
        "example": {
          "decision": "PartiallyAccepted",
          "items": [
            {
              "id": "NJ7iYXNrZXRJdGVtLTM2NTc0GTk2LTMwNDY2LXMzOWJxb3hkb2V1cGR4OXc4ZXZvcnc1",
              "decision": "Accepted"
            },
            {
              "id": "NJ7iYXNrZXRJdGVtLTM2NTc0GTk2LTMwNDY2LXMzOWJxb3hkb2V1cGR4OXc4ZXZvcnc3",
              "decision": "Rejected"
            }
          ],
          "justification": {
            "reason": "Other",
            "comments": "The food was packed properly"
          }
        }
      },
      "RestaurantDetailsLocation": {
        "type": "object",
        "description": "Location of the restaurant",
        "properties": {
          "streetAddress": {
            "type": "string",
            "description": "Street address of the restaurant"
          },
          "postalCode": {
            "type": "string",
            "description": "Post code of the restaurant"
          },
          "region": {
            "type": "string",
            "description": "Region of the restaurant"
          },
          "city": {
            "type": "string",
            "description": "City of the restaurant"
          },
          "country": {
            "type": "string",
            "description": "Country of the restaurant"
          },
          "geoPosition": {
            "description": "Geoposition of the restaurant",
            "$ref": "#/components/schemas/RestaurantDetailsLocationPosition"
          }
        }
      },
      "RestaurantDetailsLocationPosition": {
        "type": "object",
        "description": "Geoposition of the restaurant in GeoJSON format",
        "properties": {
          "type": {
            "type": "string",
            "description": "type of primitive",
            "enum": [
              "Point"
            ]
          },
          "coordinates": {
            "type": "array",
            "description": "longitude and latitude",
            "minItems": 2,
            "maxItems": 2,
            "items": {
              "type": "number",
              "format": "double"
            }
          }
        }
      },
      "RestaurantDetailsResponse": {
        "type": "object",
        "description": "response containing details of the restaurant",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier at tenant level for a given restaurant"
          },
          "name": {
            "type": "string",
            "description": "The name of the restaurant."
          },
          "location": {
            "description": "Location of the restaurant",
            "$ref": "#/components/schemas/RestaurantDetailsLocation"
          },
          "contactOptions": {
            "type": "object",
            "description": "Contact details of the restaurant",
            "properties": {
              "emails": {
                "type": "array",
                "description": "Array containing an email with label items",
                "items": {
                  "type": "object",
                  "maxItems": 3,
                  "description": "An item in emails array containing an email with label",
                  "properties": {
                    "email": {
                      "description": "Email contact",
                      "type": "string"
                    },
                    "usedFor": {
                      "type": "array",
                      "maxItems": 3,
                      "description": "Type of email contacts",
                      "items": {
                        "type": "string",
                        "format": "enum",
                        "description": "Array containing labels specifying email",
                        "enum": [
                          "Default",
                          "Invoice"
                        ]
                      }
                    }
                  }
                }
              },
              "phoneNumbers": {
                "type": "array",
                "maxItems": 3,
                "description": "Array containing a phone number with label items",
                "items": {
                  "type": "object",
                  "description": "An item in emails array containing an email with label",
                  "maxItems": 3,
                  "properties": {
                    "phoneNumber": {
                      "description": "Phone number",
                      "type": "string"
                    },
                    "usedFor": {
                      "type": "array",
                      "description": "Type of phone number contacts",
                      "maxItems": 3,
                      "items": {
                        "type": "string",
                        "format": "enum",
                        "description": "Array containing labels specifying phone number",
                        "enum": [
                          "Default",
                          "Owner",
                          "Alternative"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "allergenInformation": {
            "type": "object",
            "description": "Allergen details of the restaurant",
            "properties": {
              "phoneNumber": {
                "type": "string",
                "description": "Phone number to contact restaurant about allergens"
              },
              "url": {
                "type": "string",
                "description": "Page with information about allergens"
              }
            }
          },
          "legalInformation": {
            "type": "object",
            "description": "Legal information of the restaurant",
            "properties": {
              "companyNumber": {
                "type": "string",
                "description": "Company number of the restaurant"
              },
              "registeredName": {
                "type": "string",
                "description": "Legal company name of the restaurant"
              }
            }
          },
          "cuisines": {
            "type": "array",
            "description": "Array of cuisines of restaurant",
            "items": {
              "type": "string",
              "description": "Cuisine name"
            }
          }
        },
        "example": {
          "id": "108308",
          "name": "McDonald's Test",
          "location": {
            "streetAddress": "Fleet Place House, Fleet Place",
            "postalCode": "EC4M 7RF",
            "region": "Farringdon",
            "city": "London",
            "country": "United Kingdom",
            "geoPosition": {
              "type": "Point",
              "coordinates": [
                51.509865,
                -0.118092
              ]
            }
          },
          "contactOptions": {
            "emails": [
              {
                "email": "test@mcdonalds.com"
              },
              {
                "usedFor": [
                  "Invoice",
                  "Default"
                ]
              }
            ],
            "phoneNumbers": [
              {
                "phoneNumber": "+44 7911 123456"
              },
              {
                "usedFor": [
                  "Default",
                  "Owner",
                  "Alternative"
                ]
              }
            ]
          },
          "allergenInformation": {
            "phoneNumber": "+44 7911 123456",
            "url": "http://test.com"
          },
          "legalInformation": {
            "companyNumber": "12345",
            "registeredName": "Mc Donald's"
          },
          "cuisines": [
            "Italian",
            "American"
          ]
        }
      },
      "LegacyTempOfflineStatus": {
        "type": "string",
        "default": "ClosedDueToEvent",
        "description": "\n- `Unset` : Legacy value meaning online.\n- `None` : Legacy value meaning online.\n- `TempOffline` : The restaurant will go temporarily offline, typically for an undetermined amount of time (no end date).\n- `ClosedToday` : The restaurant will closed for the day and the event will end the next morning.\n- `ClosedDueToEvent` : The restaurant will go offline for an event (e.g. a holiday), these events will typically have an end time.\n- `FailedJctConnection` : The restaurant will go offline due to the POS device losing connection.\n- `NoTrOverride` : The restaurant will go offline for another reason that the restaurant cannot override.\n- `IgnoredOrders` : The restaurant will go offline due to ignoring orders.",
        "enum": [
          "Unset",
          "None",
          "TempOffline",
          "ClosedToday",
          "ClosedDueToEvent",
          "FailedJctConnection",
          "NoTrOverride",
          "IgnoredOrders"
        ]
      },
      "OfflineRestaurantsRequestModel": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "restaurantIds",
          "name",
          "reason",
          "startDate",
          "allowRestaurantOverride"
        ],
        "properties": {
          "restaurantIds": {
            "type": "string",
            "description": "A comma separated list of the IDs of the restaurants to include in the offline event. No limit to the number accepted by the endpoint, but unexpected behaviour mat occur at more than 500 IDs."
          },
          "name": {
            "type": "string",
            "description": "Name of the offline event to be created."
          },
          "reason": {
            "type": "string",
            "description": "The reason for creating the offline event."
          },
          "startDate": {
            "type": "string",
            "description": "ISO 8601 format of the start datetime of the offline event.",
            "format": "date-time",
            "minLength": 1
          },
          "endDate": {
            "type": "string",
            "description": "ISO 8601 format of the end datetime of the offline event.",
            "format": "date-time",
            "minLength": 1,
            "nullable": true
          },
          "duration": {
            "type": "string",
            "description": "Either a timespan in the HH:mm format or `untilTomorrow` (this will be the next day at 4:30 am +/- 10 minutes local time). Note if both duration and `endDate` are specified duration takes precedence."
          },
          "allowRestaurantOverride": {
            "type": "boolean",
            "description": "Whether a restaurant should be allowed to delete this event, regardless of who raised it."
          },
          "legacyTempOfflineType": {
            "$ref": "#/components/schemas/LegacyTempOfflineStatus"
          },
          "category": {
            "type": "string",
            "description": "A free text category used to group multiple events. This field is not intended to be used by clients.",
            "deprecated": true
          }
        },
        "example": {
          "restaurantIds": "12345",
          "name": "Out of Chicken",
          "reason": "No more chicken in stock.",
          "startDate": "2020-01-16T09:00:00Z",
          "duration": "1:00:00",
          "allowRestaurantOverride": true
        }
      },
      "RestaurantOfflineStatus": {
        "type": "object",
        "properties": {
          "Tenant": {
            "type": "string",
            "description": "The two letter country code for the market in which the restaurant operates.",
            "format": "enum",
            "enum": [
              "au",
              "dk",
              "es",
              "ie",
              "it",
              "no",
              "uk",
              "nz"
            ]
          },
          "RestaurantId": {
            "type": "string",
            "description": "The unique identifier of the restaurant that has their offline status changed."
          },
          "IsOffline": {
            "type": "boolean",
            "description": "Represents the current offline status of the restaurant."
          },
          "AllowRestaurantOverride": {
            "type": "boolean",
            "description": "Whether a restaurant should be allowed to reverse this offline status change through calls to the Restaurant Events endpoints.",
            "nullable": true
          }
        },
        "example": {
          "Tenant": "uk",
          "RestaurantId": "123456",
          "IsOffline": true,
          "AllowRestaurantOverride": false
        }
      },
      "UserRole": {
        "type": "string",
        "description": "\n- `System` : Role for an automated process action.\n- `Operations` : Role for an operations user action.\n- `Restaurant` : Role for a restaurant owner/employee user action.",
        "enum": [
          "System",
          "Operations",
          "Restaurant"
        ]
      },
      "ValidationError": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "propertyName": {
            "type": "string",
            "description": "The name of the property causing the failure"
          },
          "errorMessage": {
            "type": "string",
            "description": "The error message"
          },
          "attemptedValue": {
            "type": "string",
            "description": "The property value that caused the failure",
            "nullable": true
          },
          "customState": {
            "type": "string",
            "description": "Custom state associated with the failure",
            "nullable": true
          },
          "severity": {
            "type": "number",
            "description": "Severity of a validation rule. Will always be 0 (Error)."
          },
          "errorCode": {
            "type": "string",
            "description": "The error code"
          },
          "formattedMessageArguments": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Custom formatted validator messages with placeholders"
          },
          "formattedMessagePlaceHolderValues": {
            "type": "object",
            "additionalProperties": true,
            "description": "The values for placeholders in the formatted messages"
          },
          "resourceName": {
            "type": "string",
            "description": "The resource name used for building the message",
            "nullable": true
          }
        },
        "example": {
          "propertyName": "TestProperty",
          "errorMessage": "TestProperty is empty",
          "attemptedValue": null,
          "customState": null,
          "severity": 0,
          "errorCode": "NotEmptyValidator",
          "formattedMessageArguments": [],
          "formattedMessagePlaceHolderValues": {
            "PropertyName": "User Role",
            "PropertyValue": null
          },
          "resourceName": null
        }
      },
      "Fee": {
        "type": "object",
        "description": "The object which encapsulates a Fee",
        "properties": {
          "description": {
            "type": "string",
            "description": "A description of what the Fee is"
          },
          "serviceTypes": {
            "type": "object",
            "description": "Contains Service type specific fee values. If set, default can be used to apply a fee to as yet unspecified service types",
            "properties": {
              "default": {
                "$ref": "#/components/schemas/ServiceTypeFeeConfiguration",
                "description": "Configuration of the fee for any service type which is not explicitly configured"
              },
              "collection": {
                "$ref": "#/components/schemas/ServiceTypeFeeConfiguration",
                "description": "Configuration of the fee for the collection service type"
              },
              "delivery": {
                "$ref": "#/components/schemas/ServiceTypeFeeConfiguration",
                "description": "Configuration of the fee for the delivery service type"
              }
            }
          }
        },
        "example": {
          "description": "A charge for bags in delivery",
          "serviceTypes": {
            "default": {
              "amount": 0
            },
            "collection": {
              "amount": 5
            },
            "delivery": {
              "amount": 10
            }
          }
        }
      },
      "RestaurantFees": {
        "type": "object",
        "description": "An object encapsulating all possible fees which a restaurant can apply to itself",
        "properties": {
          "bagFee": {
            "$ref": "#/components/schemas/Fee",
            "description": "A fee applied for bags used for delivery and collection orders"
          }
        },
        "example": {
          "bagFee": {
            "description": "A charge for bags in delivery",
            "serviceTypes": {
              "default": {
                "amount": 0
              },
              "collection": {
                "amount": 5
              },
              "delivery": {
                "amount": 10
              }
            }
          }
        }
      },
      "ServiceTypeFeeConfiguration": {
        "type": "object",
        "description": "Distinct values which are configured for a particular service type",
        "properties": {
          "amount": {
            "type": "number",
            "format": "integer",
            "description": "The value to apply to the basket for this Fee in the smallest unit of currency"
          }
        },
        "example": {
          "amount": 5
        }
      },
      "ServiceTimes": {
        "type": "object",
        "properties": {
          "serviceTimes": {
            "type": "object",
            "description": "The desired times at which a restaurant is in service",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServiceTimesDays"
              }
            ]
          }
        },
        "example": {
          "desiredServiceTimes": {
            "monday": {
              "collection": [
                {
                  "start": "12:00:00",
                  "end": "14:00:00"
                },
                {
                  "start": "17:00:00",
                  "end": "23:00:00"
                }
              ],
              "delivery": [
                {
                  "start": "12:00:00",
                  "end": "13:30:00"
                },
                {
                  "start": "18:00:00",
                  "end": "00:00:00"
                }
              ]
            },
            "tuesday": {
              "collection": [
                {
                  "start": "12:00:00",
                  "end": "14:00:00"
                },
                {
                  "start": "17:00:00",
                  "end": "23:00:00"
                }
              ],
              "delivery": [
                {
                  "start": "12:00:00",
                  "end": "13:30:00"
                },
                {
                  "start": "18:00:00",
                  "end": "00:00:00"
                }
              ]
            },
            "wednesday": {
              "collection": [
                {
                  "start": "12:00:00",
                  "end": "14:00:00"
                },
                {
                  "start": "17:00:00",
                  "end": "23:00:00"
                }
              ],
              "delivery": [
                {
                  "start": "12:00:00",
                  "end": "13:30:00"
                },
                {
                  "start": "18:00:00",
                  "end": "00:00:00"
                }
              ]
            },
            "thursday": {
              "collection": [
                {
                  "start": "12:00:00",
                  "end": "14:00:00"
                },
                {
                  "start": "17:00:00",
                  "end": "23:00:00"
                }
              ],
              "delivery": [
                {
                  "start": "12:00:00",
                  "end": "13:30:00"
                },
                {
                  "start": "18:00:00",
                  "end": "00:00:00"
                }
              ]
            },
            "friday": {
              "collection": [
                {
                  "start": "12:00:00",
                  "end": "14:00:00"
                },
                {
                  "start": "17:00:00",
                  "end": "23:00:00"
                }
              ],
              "delivery": [
                {
                  "start": "12:00:00",
                  "end": "13:30:00"
                },
                {
                  "start": "18:00:00",
                  "end": "00:00:00"
                }
              ]
            },
            "saturday": {
              "collection": [
                {
                  "start": "12:00:00",
                  "end": "23:00:00"
                }
              ],
              "delivery": [
                {
                  "start": "12:00:00",
                  "end": "00:00:00"
                }
              ]
            },
            "sunday": {
              "collection": [
                {
                  "start": "12:00:00",
                  "end": "23:00:00"
                }
              ],
              "delivery": [
                {
                  "start": "12:00:00",
                  "end": "00:00:00"
                }
              ]
            }
          }
        }
      },
      "ServiceTimesCollection": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "start": {
              "type": "string",
              "pattern": "^([0-1]\\d|2[0-3]):[0-5]\\d$:[0-5]\\d$",
              "description": "Start time of the slot in hh:mm:ss format. Times are in the restaurant's time zone which can be obtained by converting `location.geoPosition` value from [the restaurant's details](#operation/GetRestaurantDetails) using a lookup API such as `timezonedb.com`."
            },
            "end": {
              "type": "string",
              "pattern": "^([0-1]\\d|2[0-3]):[0-5]\\d$:[0-5]\\d$",
              "description": "Local end time of the slot in hh:mm:ss format. The end time occurs on the next day if less than or equal to the start time. Times are in the restaurant's time zone which can be obtained by converting `location.geoPosition` value from [the restaurant's details](#operation/GetRestaurantDetails) using a lookup API such as `timezonedb.com`."
            }
          }
        }
      },
      "ServiceTimesDays": {
        "type": "object",
        "description": "The desired times at which a restaurant is in service",
        "properties": {
          "monday": {
            "description": "Service times for Mondays",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServiceTimesServices"
              }
            ]
          },
          "tuesday": {
            "description": "Service times for Tuesdays",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServiceTimesServices"
              }
            ]
          },
          "wednesday": {
            "description": "Service times for Wednesdays",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServiceTimesServices"
              }
            ]
          },
          "thursday": {
            "description": "Service times for Thursdays",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServiceTimesServices"
              }
            ]
          },
          "friday": {
            "description": "Service times for Fridays",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServiceTimesServices"
              }
            ]
          },
          "saturday": {
            "description": "Service times for Saturdays",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServiceTimesServices"
              }
            ]
          },
          "sunday": {
            "description": "Service times for Sundays",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServiceTimesServices"
              }
            ]
          }
        }
      },
      "ServiceTimesServices": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "object",
            "description": "The times at which customers can collect from the restaurant",
            "$ref": "#/components/schemas/ServiceTimesCollection"
          },
          "delivery": {
            "type": "object",
            "description": "The times at which the restaurant can provide delivery",
            "$ref": "#/components/schemas/ServiceTimesCollection"
          }
        }
      },
      "CancelOrderResolution": {
        "type": "object",
        "properties": {
          "ReasonCode": {
            "type": "string",
            "description": "The reason the order has been cancelled",
            "enum": [
              "NewAddressNotWithinDeliveryArea",
              "UnableToReprepare",
              "DriverNoLongerAvailable",
              "AreaIsUnsafe",
              "CustomerDoesnotWantOrderAnymore"
            ]
          }
        }
      },
      "CreateAttemptedDeliveryQuery": {
        "type": "object",
        "properties": {
          "ReasonCode": {
            "type": "string",
            "description": "The reason the attempted delivery event was created",
            "enum": [
              "ProblemWithAddress",
              "NoAnswer"
            ]
          }
        },
        "example": {
          "ReasonCode": "ProblemWithAddress"
        }
      },
      "RedeliverOrderResolution": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "string",
            "description": "The current status of the order",
            "enum": [
              "DriverAtAddress",
              "Repreparing"
            ]
          },
          "NewDueDate": {
            "type": "string",
            "format": "date-time",
            "description": "Updated due date for delivery of the order"
          }
        }
      },
      "CreateRestaurantCompensationQuery": {
        "type": "object",
        "properties": {
          "ReasonCode": {
            "type": "string",
            "description": "The reason why compensation is due",
            "enum": [
              "NotSet",
              "BeingPrepared",
              "OnItsWay",
              "Delivered",
              "Unknown"
            ]
          },
          "Comments": {
            "type": "string",
            "description": "Any other comments to add to the request"
          }
        },
        "example": {
          "ReasonCode": "OnItsWay",
          "Comments": "Driver had just left the restaurant"
        }
      },
      "OrderEligibleForRestaurantCompensation": {
        "type": "object",
        "properties": {
          "IsEligible": {
            "type": "boolean",
            "description": "Flag that informs if the cancelled order is eligible for compensation"
          },
          "OrderId": {
            "type": "string",
            "description": "Id for the order"
          }
        },
        "example": {
          "IsEligible": true,
          "OrderId": "c9639af6-04a3-4376-bb4b-5e95cc8b80eb"
        }
      },
      "Availability": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier at menu level for a given availability."
          },
          "name": {
            "type": "string",
            "description": "The name for the availability."
          },
          "description": {
            "type": "string",
            "description": "The description of the availability."
          },
          "serviceTypes": {
            "type": "array",
            "description": "Values can be \"collection\" or \"delivery\" and are used to denote what types of service apply to the availability.",
            "items": {
              "type": "string",
              "enum": [
                "collection",
                "delivery"
              ]
            }
          },
          "times": {
            "type": "array",
            "description": "An array of times when the availability is active.",
            "items": {
              "$ref": "#/components/schemas/Time"
            }
          }
        },
        "example": {
          "id": "1-lunch-delivery",
          "name": "Delivery Lunch",
          "description": "Menu items available for delivery during weekdays for lunch.",
          "serviceTypes": [
            "delivery"
          ],
          "times": [
            {
              "daysOfTheWeek": [
                "monday",
                "tuesday",
                "wednesday",
                "thursday",
                "friday",
                "saturday",
                "sunday"
              ],
              "fromDateTime": "11:30:00",
              "toDateTime": "14:30:00"
            }
          ]
        }
      },
      "BadRequestMarketingResponse": {
        "description": "400 Bad Request Returned",
        "example": {
          "message": "Unable to process the request.",
          "faultId": "72d7036d-990a-4f84-9efa-ef5f40f6044b",
          "errors": [
            {
              "description": "Bad Request",
              "errorCode": "400"
            }
          ]
        }
      },
      "Category": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CategoryBase"
          },
          {
            "type": "object",
            "properties": {
              "itemIds": {
                "type": "array",
                "description": "The ids of the menu items that are within the category. Each id must be unique within the category.",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "example": {
          "id": "3",
          "name": "Starters",
          "description": "",
          "itemIds": [
            "65143901",
            "65143902",
            "65143903",
            "65143904",
            "65143905"
          ]
        }
      },
      "CategoryBase": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier at menu level for a given category."
          },
          "name": {
            "type": "string",
            "description": "The name of the category."
          },
          "description": {
            "type": "string",
            "description": "The description of the category."
          }
        },
        "example": {
          "id": "3",
          "name": "Starters",
          "description": ""
        }
      },
      "ConflictMarketingResponse": {
        "$ref": "#/components/schemas/MarketingErrorResponse",
        "description": "409 Conflict Returned",
        "example": {
          "message": "A marketing campaign already exists with this configuration",
          "faultId": "72d7036d-990a-4f84-9efa-ef5f40f6044b"
        },
        "additionalProperties": false
      },
      "DealItemVariation": {
        "type": "object",
        "properties": {
          "dealItemVariationId": {
            "type": "string",
            "description": "A referenced variation id that can be a part of a deal group."
          },
          "minChoices": {
            "type": "integer",
            "format": "int32",
            "description": "The minimum number of times this deal item variation can be chosen within a given deal group."
          },
          "maxChoices": {
            "type": "integer",
            "format": "int32",
            "description": "The maximum number of times this deal item variation can be chosen within a given deal group."
          },
          "additionPrice": {
            "type": "number",
            "format": "int32",
            "description": "Selecting this modifier will increase the base price of the variation by this amount in the minor unit of the currency."
          }
        },
        "example": {
          "dealItemVariationId": "8548153",
          "minChoices": 0,
          "maxChoices": 1,
          "additionPrice": 50
        }
      },
      "ExternalSearchResponse": {
        "type": "object",
        "properties": {
          "Restaurants": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "Id": {
                  "type": "number"
                },
                "Name": {
                  "type": "string"
                },
                "UniqueName": {
                  "type": "string"
                },
                "Address": {
                  "type": "object",
                  "properties": {
                    "City": {
                      "type": "string"
                    },
                    "FirstLine": {
                      "type": "string"
                    },
                    "Postcode": {
                      "type": "string"
                    },
                    "Latitude": {
                      "type": "number"
                    },
                    "Longitude": {
                      "type": "number"
                    }
                  }
                },
                "Url": {
                  "type": "string"
                },
                "DriveDistance": {
                  "type": "number"
                },
                "DriveInfoCalculated": {
                  "type": "boolean"
                },
                "IsOpenNowForDelivery": {
                  "type": "boolean"
                },
                "IsOpenNow": {
                  "type": "boolean"
                },
                "DeliveryEtaMinutes": {
                  "type": "object",
                  "properties": {
                    "Approximate": {
                      "type": "number"
                    },
                    "RangeLower": {
                      "type": "number"
                    },
                    "RangeUpper": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "IgnoredRestaurantIds": {
        "type": "object",
        "properties": {
          "ignoredRestaurantIds": {
            "description": "A list of restaurant ids that were present in a request but were ignored.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "ignoredRestaurantIds": [
            "123",
            "456"
          ]
        }
      },
      "InternalServerErrorMarketingResponse": {
        "$ref": "#/components/schemas/MarketingErrorResponse",
        "description": "500 Internal Server Error Returned",
        "example": {
          "message": "Something has gone wrong, please try again later.",
          "faultId": "72d7036d-990a-4f84-9efa-ef5f40f6044b",
          "errors": [
            {
              "description": "Internal Server Error",
              "errorCode": "500"
            }
          ]
        }
      },
      "MarketingError": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "errorCode": {
            "type": "string",
            "description": "A value that helps identify this response back to logs, so we can easily find this specific fault"
          },
          "description": {
            "type": "string",
            "description": "Specific details about the error that may assist the you in resolving the issue"
          }
        }
      },
      "MarketingErrorResponse": {
        "type": "object",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "message": {
            "type": "string",
            "description": "Specific details about the error that may assist the you in resolving the issue"
          },
          "faultId": {
            "type": "string",
            "description": "A value that helps identify this response back to logs, so we can easily find this specific fault"
          },
          "errors": {
            "type": "array",
            "description": "Underlying errors associated with the error",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/MarketingError"
            }
          }
        }
      },
      "MarketingReportResponse": {
        "type": "object",
        "description": "The report data and the extraction date",
        "example": {
          "orders-per-month": {
            "dataExtractionDateUTC": "2019-09-03T13:10:05Z",
            "reportData": "[{'month':3,'year':2019,'order_count':630},{'month':4,'year':2019,'order_count':583}]"
          },
          "unique-customers": {
            "dataExtractionDateUTC": "2019-09-03T13:10:05Z",
            "reportData": "[{'month':3,'year':2019,'unique_customer_count':630},{'month':4,'year':2019,'unique_customer_count':583}]"
          },
          "potential-orders-per-month": {
            "dataExtractionDateUTC": "2019-09-03T13:10:05Z",
            "reportData": "[{'month':3,'year':2019,'potential_monthly_order_count':630},{'month':4,'year':2019,'potential_monthly_order_count':583}]"
          }
        },
        "additionalProperties": {
          "type": "object",
          "properties": {
            "dataExtractionDateUTC": {
              "type": "string",
              "description": "The UTC datetime that the report data was extracted from BigQuery",
              "format": "date-time"
            },
            "reportData": {
              "description": "Report data as JSON object",
              "nullable": true
            }
          }
        }
      },
      "Menu": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MenuBase"
          },
          {
            "type": "object",
            "properties": {
              "availabilities": {
                "type": "array",
                "description": "A set of availabilities that can later be referenced by individual menu items.",
                "items": {
                  "$ref": "#/components/schemas/Availability"
                }
              },
              "categories": {
                "type": "array",
                "description": "A set of categories that appear on the menu.",
                "items": {
                  "$ref": "#/components/schemas/Category"
                }
              },
              "items": {
                "type": "array",
                "description": "All of the menu items within the menu.",
                "items": {
                  "$ref": "#/components/schemas/MenuItem"
                }
              }
            }
          }
        ],
        "example": {
          "restaurantId": "100059",
          "name": "My Restaurant",
          "description": "My excellent menu",
          "currency": "GBP",
          "categories": [
            {
              "id": "3",
              "name": "Starters",
              "description": "",
              "itemIds": [
                "65143901"
              ]
            },
            {
              "id": "4",
              "name": "Deals",
              "description": "",
              "itemIds": [
                "23435309",
                "33445308"
              ]
            },
            {
              "id": "5",
              "name": "Pizzas",
              "description": "",
              "itemIds": [
                "8547130",
                "8547140"
              ]
            },
            {
              "id": "6",
              "name": "Drinks",
              "description": "",
              "itemIds": [
                "6537130",
                "6537140"
              ]
            }
          ],
          "items": [
            {
              "id": "23435309",
              "type": "deal",
              "name": "Half-and-half Pizza",
              "description": "Choose each half.",
              "labels": [],
              "variations": [
                {
                  "id": "23435309",
                  "name": "",
                  "type": "noVariation",
                  "availabilityIds": [
                    "1-lunch-delivery",
                    "2-lunch-collection",
                    "3-dinner-delivery"
                  ],
                  "basePrice": 3099,
                  "dealOnly": false,
                  "modifierGroupsIds": [],
                  "dealGroupsIds": [
                    "23435309-1",
                    "23435309-2"
                  ]
                }
              ],
              "modifierGroups": [],
              "dealGroups": [
                {
                  "id": "23435309-1",
                  "name": "Choose your base",
                  "numberOfChoices": 1,
                  "dealItemVariations": [
                    {
                      "dealItemVariationId": "1577341",
                      "minChoices": 0,
                      "maxChoices": 1,
                      "additionPrice": 0
                    }
                  ]
                },
                {
                  "id": "23435309-2",
                  "name": "Choose your halves",
                  "numberOfChoices": 2,
                  "dealItemVariations": [
                    {
                      "dealItemVariationId": "8547121",
                      "minChoices": 0,
                      "maxChoices": 1,
                      "additionPrice": 0
                    },
                    {
                      "dealItemVariationId": "3547157",
                      "minChoices": 0,
                      "maxChoices": 1,
                      "additionPrice": 0
                    },
                    {
                      "dealItemVariationId": "8548153",
                      "minChoices": 0,
                      "maxChoices": 1,
                      "additionPrice": 50
                    }
                  ]
                }
              ]
            },
            {
              "id": "33445308",
              "type": "deal",
              "name": "14 inch Pizza & A Drink For 1",
              "description": "Choose a 14 inch Pizza (including half-and-half) and any drink. Note: Alcohol is only available for collection.",
              "labels": [],
              "variations": [
                {
                  "id": "33445308",
                  "name": "",
                  "type": "noVariation",
                  "availabilityIds": [
                    "1-lunch-delivery",
                    "2-lunch-collection",
                    "3-dinner-delivery"
                  ],
                  "basePrice": 3099,
                  "dealOnly": false,
                  "modifierGroupsIds": [],
                  "dealGroupsIds": [
                    "33445308-1",
                    "33445308-2"
                  ]
                }
              ],
              "modifierGroups": [],
              "dealGroups": [
                {
                  "id": "33445308-1",
                  "name": "Choose your pizza",
                  "numberOfChoices": 1,
                  "dealItemVariations": [
                    {
                      "dealItemVariationId": "9750011",
                      "minChoices": 0,
                      "maxChoices": 1,
                      "additionPrice": 0
                    },
                    {
                      "dealItemVariationId": "9750021",
                      "minChoices": 0,
                      "maxChoices": 1,
                      "additionPrice": 0
                    },
                    {
                      "dealItemVariationId": "23435309",
                      "minChoices": 0,
                      "maxChoices": 1,
                      "additionPrice": 0
                    }
                  ]
                },
                {
                  "id": "33445308-2",
                  "name": "Choose your drink",
                  "numberOfChoices": 1,
                  "dealItemVariations": [
                    {
                      "dealItemVariationId": "6537130",
                      "minChoices": 0,
                      "maxChoices": 1,
                      "additionPrice": 13
                    },
                    {
                      "dealItemVariationId": "6537140",
                      "minChoices": 0,
                      "maxChoices": 1,
                      "additionPrice": 0
                    },
                    {
                      "dealItemVariationId": "7739164",
                      "minChoices": 0,
                      "maxChoices": 1,
                      "additionPrice": 0
                    }
                  ]
                }
              ]
            },
            {
              "id": "65143901",
              "type": "menuItem",
              "name": "Flat Bread and Dips (Pick any 2 Dips)",
              "requireOtherProducts": false,
              "description": "",
              "labels": [],
              "variations": [
                {
                  "id": "65143901",
                  "name": "",
                  "type": "noVariation",
                  "basePrice": 650,
                  "dealOnly": false,
                  "kitchenNumber": "90",
                  "availabilityIds": [
                    "1-lunch-delivery",
                    "2-lunch-collection",
                    "3-dinner-delivery",
                    "4-dinner-collection"
                  ],
                  "modifierGroupsIds": [
                    "65143901-req-1",
                    "65143901-req-2"
                  ],
                  "dealGroupsIds": []
                }
              ],
              "modifierGroups": [
                {
                  "id": "65143901-req-1",
                  "name": "Choose your bread",
                  "minChoices": 1,
                  "maxChoices": 1,
                  "modifiers": [
                    {
                      "id": "834502",
                      "name": "Pitta Bread",
                      "minChoices": 0,
                      "maxChoices": 1,
                      "additionPrice": 0
                    },
                    {
                      "id": "835700",
                      "name": "Sourdough",
                      "minChoices": 0,
                      "maxChoices": 1,
                      "additionPrice": 0
                    },
                    {
                      "id": "835601",
                      "name": "Wholemeal",
                      "minChoices": 0,
                      "maxChoices": 1,
                      "additionPrice": 50
                    }
                  ]
                },
                {
                  "id": "65143901-req-2",
                  "name": "Choose your dips",
                  "minChoices": 2,
                  "maxChoices": 2,
                  "modifiers": [
                    {
                      "id": "835340",
                      "name": "Tzatziki",
                      "minChoices": 0,
                      "maxChoices": 2,
                      "additionPrice": 0
                    },
                    {
                      "id": "835341",
                      "name": "Taramasalata",
                      "minChoices": 0,
                      "maxChoices": 2,
                      "additionPrice": 0
                    },
                    {
                      "id": "825344",
                      "name": "Hummus",
                      "minChoices": 0,
                      "maxChoices": 2,
                      "additionPrice": 0
                    },
                    {
                      "id": "825346",
                      "name": "Onion",
                      "minChoices": 0,
                      "maxChoices": 2,
                      "additionPrice": 0
                    }
                  ]
                }
              ],
              "dealGroups": []
            },
            {
              "id": "1577341",
              "type": "menuItem",
              "name": "Base",
              "requireOtherProducts": true,
              "description": "",
              "labels": [],
              "variations": [
                {
                  "id": "1577341",
                  "name": "",
                  "type": "noVariation",
                  "availabilityIds": [
                    "1-lunch-delivery",
                    "2-lunch-collection",
                    "3-dinner-delivery",
                    "4-dinner-collection"
                  ],
                  "basePrice": 200,
                  "dealOnly": true,
                  "modifierGroupsIds": [
                    "1577341-req-1"
                  ],
                  "dealGroupsIds": []
                }
              ],
              "modifierGroups": [
                {
                  "id": "1577341-req-1",
                  "name": "Crust",
                  "minChoices": 1,
                  "maxChoices": 1,
                  "modifiers": [
                    {
                      "id": "854500",
                      "name": "Classic Crust",
                      "minChoices": 0,
                      "maxChoices": 1,
                      "additionPrice": 0
                    },
                    {
                      "id": "854600",
                      "name": "Stuffed Crust",
                      "minChoices": 0,
                      "maxChoices": 1,
                      "additionPrice": 200
                    }
                  ]
                }
              ],
              "dealGroups": []
            },
            {
              "id": "8547130",
              "type": "menuItem",
              "name": "Margherita",
              "requireOtherProducts": true,
              "description": "",
              "labels": [],
              "variations": [
                {
                  "id": "8547121",
                  "name": "Half",
                  "type": "variation",
                  "basePrice": 500,
                  "dealOnly": true,
                  "kitchenNumber": "100",
                  "availabilityIds": [
                    "1-lunch-delivery",
                    "2-lunch-collection",
                    "3-dinner-delivery",
                    "4-dinner-collection"
                  ],
                  "modifierGroupsIds": [
                    "8547130-opt-1"
                  ],
                  "dealGroupsIds": []
                },
                {
                  "id": "8547130",
                  "name": "12 inch",
                  "type": "variation",
                  "basePrice": 1000,
                  "dealOnly": false,
                  "kitchenNumber": "100",
                  "availabilityIds": [
                    "1-lunch-delivery",
                    "2-lunch-collection",
                    "3-dinner-delivery",
                    "4-dinner-collection"
                  ],
                  "modifierGroupsIds": [
                    "8547130-req-1",
                    "8547130-opt-1"
                  ],
                  "dealGroupsIds": []
                },
                {
                  "id": "8543123",
                  "name": "14 inch",
                  "type": "variation",
                  "basePrice": 1200,
                  "dealOnly": true,
                  "kitchenNumber": "200",
                  "availabilityIds": [
                    "1-lunch-delivery-weekday",
                    "2-lunch-collection-weekday",
                    "3-dinner-delivery-weekday",
                    "4-dinner-collection-weekday"
                  ],
                  "modifierGroupsIds": [
                    "8547130-req-1",
                    "8547130-opt-1"
                  ],
                  "dealGroupsIds": []
                }
              ],
              "modifierGroups": [
                {
                  "id": "8547130-req-1",
                  "name": "Choose your crust",
                  "minChoices": 1,
                  "maxChoices": 1,
                  "modifiers": [
                    {
                      "id": "854500",
                      "name": "Classic Crust",
                      "minChoices": 0,
                      "maxChoices": 1,
                      "additionPrice": 0
                    },
                    {
                      "id": "854600",
                      "name": "Stuffed Crust",
                      "minChoices": 0,
                      "maxChoices": 1,
                      "additionPrice": 200
                    }
                  ]
                },
                {
                  "id": "8547130-opt-1",
                  "name": "Any extra toppings?",
                  "minChoices": 0,
                  "maxChoices": 10,
                  "modifiers": [
                    {
                      "id": "1000",
                      "name": "Mozzarella Cheese",
                      "minChoices": 0,
                      "maxChoices": 2,
                      "additionPrice": 50
                    },
                    {
                      "id": "1001",
                      "name": "Ham",
                      "minChoices": 0,
                      "maxChoices": 1,
                      "additionPrice": 50
                    },
                    {
                      "id": "1002",
                      "name": "Red Onion",
                      "minChoices": 0,
                      "maxChoices": 1,
                      "additionPrice": 50
                    },
                    {
                      "id": "1003",
                      "name": "Pepperoni",
                      "minChoices": 0,
                      "maxChoices": 1,
                      "additionPrice": 50
                    },
                    {
                      "id": "1004",
                      "name": "Olives",
                      "minChoices": 0,
                      "maxChoices": 1,
                      "additionPrice": 50
                    }
                  ]
                }
              ],
              "dealGroups": []
            },
            {
              "id": "8547140",
              "type": "menuItem",
              "name": "Double Pepperoni",
              "requireOtherProducts": false,
              "description": "",
              "labels": [],
              "variations": [
                {
                  "id": "8548153",
                  "name": "Half",
                  "type": "variation",
                  "basePrice": 500,
                  "dealOnly": true,
                  "kitchenNumber": "100",
                  "availabilityIds": [
                    "1-lunch-delivery",
                    "2-lunch-collection",
                    "3-dinner-delivery",
                    "4-dinner-collection"
                  ],
                  "modifierGroupsIds": [
                    "8547140-opt-1"
                  ],
                  "dealGroupsIds": []
                },
                {
                  "id": "8547140",
                  "name": "12 inch",
                  "type": "variation",
                  "basePrice": 1000,
                  "dealOnly": false,
                  "kitchenNumber": "100",
                  "availabilityIds": [
                    "1-lunch-delivery",
                    "2-lunch-collection",
                    "3-dinner-delivery",
                    "4-dinner-collection"
                  ],
                  "modifierGroupsIds": [
                    "8547140-req-1",
                    "8547140-opt-1"
                  ],
                  "dealGroupsIds": []
                },
                {
                  "id": "9750021",
                  "name": "14 inch",
                  "type": "variation",
                  "basePrice": 1200,
                  "dealOnly": true,
                  "kitchenNumber": "200",
                  "availabilityIds": [
                    "1-lunch-delivery",
                    "2-lunch-collection",
                    "3-dinner-delivery",
                    "4-dinner-collection"
                  ],
                  "modifierGroupsIds": [
                    "8547140-req-1",
                    "8547140-opt-1"
                  ],
                  "dealGroupsIds": []
                },
                {
                  "id": "9755052",
                  "name": "18 inch",
                  "type": "variation",
                  "basePrice": 1200,
                  "dealOnly": false,
                  "kitchenNumber": "200",
                  "availabilityIds": [
                    "2-lunch-collection",
                    "4-dinner-collection"
                  ],
                  "modifierGroupsIds": [
                    "9755052-req-1",
                    "9755052-opt-1"
                  ],
                  "dealGroupsIds": []
                }
              ],
              "modifierGroups": [
                {
                  "id": "8547140-req-1",
                  "name": "Choose your crust",
                  "minChoices": 1,
                  "maxChoices": 1,
                  "modifiers": [
                    {
                      "id": "854500",
                      "name": "Classic Crust",
                      "minChoices": 0,
                      "maxChoices": 1,
                      "additionPrice": 0
                    },
                    {
                      "id": "854600",
                      "name": "Stuffed Crust",
                      "minChoices": 0,
                      "maxChoices": 1,
                      "additionPrice": 200
                    }
                  ]
                },
                {
                  "id": "8547140-opt-1",
                  "name": "Any extra toppings?",
                  "minChoices": 0,
                  "maxChoices": 10,
                  "modifiers": [
                    {
                      "id": "1000",
                      "name": "Mozzarella Cheese",
                      "minChoices": 0,
                      "maxChoices": 2,
                      "additionPrice": 50
                    },
                    {
                      "id": "1001",
                      "name": "Ham",
                      "minChoices": 0,
                      "maxChoices": 2,
                      "additionPrice": 50
                    },
                    {
                      "id": "1002",
                      "name": "Red Onion",
                      "minChoices": 0,
                      "maxChoices": 2,
                      "additionPrice": 50
                    },
                    {
                      "id": "1003",
                      "name": "Pepperoni",
                      "minChoices": 2,
                      "maxChoices": 4,
                      "additionPrice": 50
                    },
                    {
                      "id": "1004",
                      "name": "Olives",
                      "minChoices": 0,
                      "maxChoices": 2,
                      "additionPrice": 50
                    }
                  ]
                },
                {
                  "id": "9755052-req-1",
                  "name": "Choose your crust",
                  "minChoices": 1,
                  "maxChoices": 1,
                  "modifiers": [
                    {
                      "id": "854500",
                      "name": "Classic Crust",
                      "minChoices": 0,
                      "maxChoices": 1,
                      "additionPrice": 0
                    },
                    {
                      "id": "854600",
                      "name": "Stuffed Crust",
                      "minChoices": 0,
                      "maxChoices": 1,
                      "additionPrice": 250
                    }
                  ]
                },
                {
                  "id": "9755052-opt-1",
                  "name": "Any extra toppings?",
                  "minChoices": 0,
                  "maxChoices": 10,
                  "modifiers": [
                    {
                      "id": "1000",
                      "name": "Mozzarella Cheese",
                      "minChoices": 0,
                      "maxChoices": 2,
                      "additionPrice": 70
                    },
                    {
                      "id": "1001",
                      "name": "Ham",
                      "minChoices": 0,
                      "maxChoices": 2,
                      "additionPrice": 70
                    },
                    {
                      "id": "1002",
                      "name": "Red Onion",
                      "minChoices": 0,
                      "maxChoices": 2,
                      "additionPrice": 70
                    },
                    {
                      "id": "1003",
                      "name": "Pepperoni",
                      "minChoices": 0,
                      "maxChoices": 2,
                      "additionPrice": 70
                    },
                    {
                      "id": "1004",
                      "name": "Olives",
                      "minChoices": 0,
                      "maxChoices": 2,
                      "additionPrice": 70
                    }
                  ]
                }
              ],
              "dealGroups": []
            },
            {
              "id": "3547157",
              "type": "menuItem",
              "name": "Vegetarian",
              "requireOtherProducts": false,
              "description": "",
              "labels": [
                "vegetarian"
              ],
              "variations": [
                {
                  "id": "3547157",
                  "name": "",
                  "type": "noVariation",
                  "basePrice": 500,
                  "dealOnly": true,
                  "kitchenNumber": "121",
                  "availabilityIds": [
                    "1-lunch-delivery",
                    "2-lunch-collection",
                    "3-dinner-delivery",
                    "4-dinner-collection"
                  ],
                  "modifierGroupsIds": [
                    "8547140-opt-1"
                  ],
                  "dealGroupsIds": []
                }
              ],
              "modifierGroups": [
                {
                  "id": "8547140-opt-1",
                  "name": "Any extra toppings?",
                  "minChoices": 0,
                  "maxChoices": 10,
                  "modifiers": [
                    {
                      "id": "1000",
                      "name": "Mozzarella Cheese",
                      "minChoices": 0,
                      "maxChoices": 2,
                      "additionPrice": 50
                    },
                    {
                      "id": "1001",
                      "name": "Ham",
                      "minChoices": 0,
                      "maxChoices": 2,
                      "additionPrice": 50
                    },
                    {
                      "id": "1002",
                      "name": "Red Onion",
                      "minChoices": 1,
                      "maxChoices": 2,
                      "additionPrice": 50
                    },
                    {
                      "id": "1003",
                      "name": "Pepperoni",
                      "minChoices": 0,
                      "maxChoices": 2,
                      "additionPrice": 50
                    },
                    {
                      "id": "1004",
                      "name": "Olives",
                      "minChoices": 1,
                      "maxChoices": 2,
                      "additionPrice": 50
                    }
                  ]
                }
              ],
              "dealGroups": []
            },
            {
              "id": "6537130",
              "type": "menuItem",
              "name": "Coca-Cola",
              "requireOtherProducts": true,
              "description": "",
              "labels": [],
              "variations": [
                {
                  "id": "6537130",
                  "name": "0.33L",
                  "type": "variation",
                  "basePrice": 100,
                  "dealOnly": false,
                  "kitchenNumber": "300",
                  "availabilityIds": [
                    "1-lunch-delivery",
                    "2-lunch-collection",
                    "3-dinner-delivery",
                    "4-dinner-collection"
                  ],
                  "modifierGroupsIds": [],
                  "dealGroupsIds": []
                },
                {
                  "id": "9750011",
                  "name": "1.5L",
                  "type": "variation",
                  "basePrice": 300,
                  "dealOnly": false,
                  "kitchenNumber": "400",
                  "availabilityIds": [
                    "1-lunch-delivery",
                    "2-lunch-collection",
                    "3-dinner-delivery",
                    "4-dinner-collection"
                  ],
                  "modifierGroupsIds": [],
                  "dealGroupsIds": []
                }
              ],
              "modifierGroups": [],
              "dealGroups": []
            },
            {
              "id": "6537140",
              "type": "menuItem",
              "name": "Diet Coke",
              "requireOtherProducts": true,
              "description": "",
              "labels": [],
              "variations": [
                {
                  "id": "6537140",
                  "name": "0.33L",
                  "type": "variation",
                  "basePrice": 100,
                  "dealOnly": false,
                  "kitchenNumber": "300",
                  "availabilityIds": [
                    "1-lunch-delivery",
                    "2-lunch-collection",
                    "3-dinner-delivery",
                    "4-dinner-collection"
                  ],
                  "modifierGroupsIds": [],
                  "dealGroupsIds": []
                },
                {
                  "id": "9750312",
                  "name": "1.5L",
                  "type": "variation",
                  "basePrice": 300,
                  "dealOnly": false,
                  "kitchenNumber": "400",
                  "availabilityIds": [
                    "1-lunch-delivery",
                    "2-lunch-collection",
                    "3-dinner-delivery",
                    "4-dinner-collection"
                  ],
                  "modifierGroupsIds": [],
                  "dealGroupsIds": []
                }
              ],
              "modifierGroups": [],
              "dealGroups": []
            },
            {
              "id": "7739164",
              "type": "menuItem",
              "name": "Bottle of Lager",
              "requireOtherProducts": true,
              "description": "",
              "labels": [],
              "variations": [
                {
                  "id": "7739164",
                  "name": "",
                  "type": "noVariation",
                  "basePrice": 300,
                  "dealOnly": false,
                  "kitchenNumber": "700",
                  "availabilityIds": [
                    "2-lunch-collection",
                    "4-dinner-collection"
                  ],
                  "modifierGroupsIds": [],
                  "dealGroupsIds": []
                }
              ],
              "modifierGroups": [],
              "dealGroups": []
            }
          ]
        }
      },
      "MenuBase": {
        "type": "object",
        "properties": {
          "restaurantId": {
            "type": "string",
            "description": "A unique identifier at tenant level for a given restaurant."
          },
          "name": {
            "type": "string",
            "description": "The name of the restaurant."
          },
          "description": {
            "type": "string",
            "description": "A top level description for the menu."
          },
          "currency": {
            "type": "string",
            "description": "The currency of the items on the menu in ISO 4217 format, i.e. GBP, EUR or AUD"
          }
        },
        "example": {
          "restaurantId": "100059",
          "name": "My Restaurant",
          "description": "My excellent menu",
          "currency": "GBP"
        }
      },
      "MenuDealGroup": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MenuDealGroupBase"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "A unique identifier at menu level for a deal group."
              },
              "name": {
                "type": "string",
                "description": "The name of the deal group."
              },
              "numberOfChoices": {
                "type": "integer",
                "format": "int32",
                "description": "How many deal item variations must be selected to satisfy this deal group."
              },
              "dealItemVariations": {
                "type": "array",
                "description": "The ids of the variations that can be selected in order to satisfy this deal group.",
                "items": {
                  "$ref": "#/components/schemas/DealItemVariation"
                }
              }
            }
          }
        ],
        "example": {
          "id": "23435309-2",
          "name": "Choose your pizzas",
          "numberOfChoices": 2,
          "dealItemVariations": [
            {
              "dealItemVariationId": "8547121",
              "minChoices": 0,
              "maxChoices": 1,
              "additionPrice": 0
            },
            {
              "dealItemVariationId": "3547157",
              "minChoices": 0,
              "maxChoices": 1,
              "additionPrice": 0
            },
            {
              "dealItemVariationId": "8548153",
              "minChoices": 0,
              "maxChoices": 1,
              "additionPrice": 50
            }
          ]
        }
      },
      "MenuDealGroupBase": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier at menu level for a deal group."
          },
          "name": {
            "type": "string",
            "description": "The name of the deal group."
          },
          "numberOfChoices": {
            "type": "integer",
            "format": "int32",
            "description": "How many deal item variations must be selected to satisfy this deal group."
          }
        },
        "example": {
          "id": "23435309-2",
          "name": "Choose your pizzas",
          "numberOfChoices": 2
        }
      },
      "MenuIngestionResponse": {
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "An ID for the asynchronous operation to ingest the menu"
          }
        },
        "example": {
          "correlationId": "64bef5ee-7265-47f8-9aee-28bc74f00b13"
        }
      },
      "MenuItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MenuItemBase"
          },
          {
            "type": "object",
            "properties": {
              "imageUrl": {
                "type": "string",
                "description": "A menu item image URL."
              },
              "variations": {
                "type": "array",
                "description": "A set of variations of this menu item.",
                "items": {
                  "$ref": "#/components/schemas/Variation"
                }
              },
              "modifierGroups": {
                "type": "array",
                "description": "A set of modifier groups for this menu item.",
                "items": {
                  "$ref": "#/components/schemas/MenuModifierGroup"
                }
              },
              "dealGroups": {
                "type": "array",
                "description": "A set of deal groups for this menu item.",
                "items": {
                  "$ref": "#/components/schemas/MenuDealGroup"
                }
              }
            }
          }
        ],
        "example": {
          "id": "65143901",
          "type": "menuItem",
          "name": "Flat Bread and Dips (Pick any 2 Dips)",
          "requireOtherProducts": false,
          "description": "",
          "labels": [],
          "imageUrl": "http://cdn.images/flat_bread_dips.png",
          "variations": [
            {
              "id": "65143901",
              "name": "",
              "type": "noVariation",
              "basePrice": 650,
              "dealOnly": false,
              "kitchenNumber": "90",
              "availabilityIds": [
                "1-lunch-delivery",
                "2-lunch-collection",
                "3-dinner-delivery",
                "4-dinner-collection"
              ],
              "modifierGroupsIds": [
                "65143901-req-1",
                "65143901-req-2"
              ],
              "dealGroupsIds": []
            }
          ],
          "modifierGroups": [
            {
              "id": "65143901-req-1",
              "name": "Bread",
              "minChoices": 1,
              "maxChoices": 1,
              "modifiers": [
                {
                  "id": "834502",
                  "name": "Pitta Bread",
                  "minChoices": 0,
                  "maxChoices": 1,
                  "additionPrice": 0
                },
                {
                  "id": "835700",
                  "name": "Sourdough",
                  "minChoices": 0,
                  "maxChoices": 1,
                  "additionPrice": 0
                },
                {
                  "id": "835601",
                  "name": "Wholemeal",
                  "minChoices": 0,
                  "maxChoices": 1,
                  "additionPrice": 50
                }
              ]
            },
            {
              "id": "65143901-req-2",
              "name": "Dips",
              "minChoices": 2,
              "maxChoices": 2,
              "modifiers": [
                {
                  "id": "835340",
                  "name": "Tzatziki",
                  "minChoices": 0,
                  "maxChoices": 2,
                  "additionPrice": 0
                },
                {
                  "id": "835341",
                  "name": "Taramasalata",
                  "minChoices": 0,
                  "maxChoices": 2,
                  "additionPrice": 0
                },
                {
                  "id": "825344",
                  "name": "Hummus",
                  "minChoices": 0,
                  "maxChoices": 2,
                  "additionPrice": 0
                },
                {
                  "id": "825346",
                  "name": "Onion",
                  "minChoices": 0,
                  "maxChoices": 2,
                  "additionPrice": 0
                }
              ]
            }
          ],
          "dealGroups": []
        }
      },
      "MenuItemBase": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier at menu level for a menu item."
          },
          "name": {
            "type": "string",
            "description": "The name of the menu item."
          },
          "type": {
            "type": "string",
            "enum": [
              "menuItem",
              "deal"
            ],
            "description": "Indicates whether this is a regular meal item or a deal item."
          },
          "requireOtherProducts": {
            "type": "boolean",
            "description": "Cannot be selected as a stand alone item, it has to be ordered with other items. Typically this will apply to menu items within drinks and dessert categories."
          },
          "description": {
            "type": "string",
            "description": "The description of the menu item."
          },
          "labels": {
            "type": "array",
            "minItems": 0,
            "maxItems": 3,
            "items": {
              "type": "string",
              "enum": [
                "hot",
                "vegetarian",
                "alcohol"
              ]
            },
            "description": "Used to toggle front end icons for the available labels."
          }
        },
        "example": {
          "id": "65143901",
          "type": "menuItem",
          "name": "Flat Bread and Dips (Pick any 2 Dips)",
          "requireOtherProducts": false,
          "description": "",
          "labels": []
        }
      },
      "MenuModifier": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier relative to the menu for a modifier."
          },
          "name": {
            "type": "string",
            "description": "The name of the modifier."
          },
          "minChoices": {
            "type": "integer",
            "format": "int32",
            "description": "The minimum number of times this modifier can be chosen within a given modifier group."
          },
          "maxChoices": {
            "type": "integer",
            "format": "int32",
            "description": "The maximum number of times this modifier can be chosen within a given modifier group."
          },
          "additionPrice": {
            "type": "number",
            "format": "int32",
            "description": "Selecting this modifier will increase the base price of the variation by this amount in the minor unit of the currency."
          }
        },
        "example": {
          "id": "854600",
          "name": "Stuffed Crust",
          "minChoices": 0,
          "maxChoices": 1,
          "additionPrice": 200
        }
      },
      "MenuModifierGroup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier relative to the menu for a modifier group."
          },
          "name": {
            "type": "string",
            "description": "A name for the modifier group, usually phrased as a question, e.g. Would you like any extras?"
          },
          "minChoices": {
            "type": "integer",
            "format": "int32",
            "description": "The minimum number of modifiers that must be selected to satisfy this modifier group."
          },
          "maxChoices": {
            "type": "integer",
            "format": "int32",
            "description": "The maximum number of modifiers that must be selected to satisfy this modifier group."
          },
          "modifiers": {
            "type": "array",
            "description": "The modifiers that can be selected to satisfy this modifier group.",
            "items": {
              "$ref": "#/components/schemas/MenuModifier"
            }
          }
        },
        "example": {
          "id": "8547130-req-1",
          "name": "Choose your crust",
          "minChoices": 1,
          "maxChoices": 1,
          "modifiers": [
            {
              "id": "854500",
              "name": "Classic Crust",
              "minChoices": 0,
              "maxChoices": 1,
              "additionPrice": 0
            },
            {
              "id": "854600",
              "name": "Stuffed Crust",
              "minChoices": 0,
              "maxChoices": 1,
              "additionPrice": 200
            }
          ]
        }
      },
      "NotFoundMarketingResponse": {
        "$ref": "#/components/schemas/MarketingErrorResponse",
        "description": "404 Not Found Returned",
        "example": {
          "message": "The requested resource could not found.",
          "faultId": "72d7036d-990a-4f84-9efa-ef5f40f6044b",
          "errors": [
            {
              "description": "Campaign Not found",
              "errorCode": "404"
            }
          ]
        }
      },
      "orderTime": {
        "type": "object",
        "description": "The object representing order time entry",
        "properties": {
          "serviceType": {
            "enum": [
              "Delivery",
              "Collection"
            ],
            "type": "string",
            "description": "Service type of the order time"
          },
          "dayOfWeek": {
            "enum": [
              "Sunday",
              "Monday",
              "Tuesday",
              "Wednesday",
              "Thursday",
              "Friday",
              "Saturday"
            ],
            "type": "string",
            "description": "Day of week for order time"
          },
          "lowerBoundMinutes": {
            "type": "integer",
            "description": "Order time lower bound value, in minutes.",
            "format": "int32"
          },
          "upperBoundMinutes": {
            "type": "integer",
            "description": "Order time upper bound value, in minutes.",
            "format": "int32"
          }
        },
        "example": {
          "serviceType": "Delivery",
          "dayOfWeek": "Monday",
          "lowerBoundMinutes": 35,
          "upperBoundMinutes": 50
        }
      },
      "PagedAvailabilitiesResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PagedAfterOnlyCursorResponse"
          },
          {
            "type": "object",
            "properties": {
              "availabilities": {
                "type": "array",
                "description": "List of availabilities for a given restaurant's menu.",
                "items": {
                  "$ref": "#/components/schemas/Availability"
                }
              }
            }
          }
        ],
        "example": {
          "availabilities": [
            {
              "id": "1-lunch-delivery",
              "name": "Delivery Lunch",
              "description": "Menu items available for delivery during weekdays for lunch.",
              "serviceTypes": [
                "delivery"
              ],
              "times": [
                {
                  "daysOfTheWeek": [
                    "monday",
                    "tuesday",
                    "wednesday",
                    "thursday",
                    "friday",
                    "saturday",
                    "sunday"
                  ],
                  "fromDateTime": "11:30:00",
                  "toDateTime": "14:30:00"
                }
              ]
            },
            {
              "id": "1-dinner-delivery",
              "name": "Delivery Dinner",
              "description": "Menu items available for delivery during weekdays for dinner.",
              "serviceTypes": [
                "delivery"
              ],
              "times": [
                {
                  "daysOfTheWeek": [
                    "monday",
                    "tuesday",
                    "wednesday",
                    "thursday",
                    "friday",
                    "saturday",
                    "sunday"
                  ],
                  "fromDateTime": "16:30:00",
                  "toDateTime": "22:00:00"
                }
              ]
            }
          ],
          "paging": {
            "cursors": {
              "after": "NDMyNzQyODI3OTQw"
            }
          }
        }
      },
      "PagedCategoriesResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PagedAfterOnlyCursorResponse"
          },
          {
            "type": "object",
            "properties": {
              "categories": {
                "type": "array",
                "description": "List of categories for a given restaurant's menu.",
                "items": {
                  "$ref": "#/components/schemas/CategoryBase"
                }
              }
            }
          }
        ],
        "example": {
          "categories": [
            {
              "id": "3",
              "name": "Starters",
              "description": "Sumptuous starters"
            },
            {
              "id": "4",
              "name": "Mains",
              "description": "Magnificent mains"
            }
          ],
          "paging": {
            "cursors": {
              "after": "NDMyNzQyODI3OTQw"
            }
          }
        }
      },
      "PagedCategoryItemsResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PagedAfterOnlyCursorResponse"
          },
          {
            "type": "object",
            "properties": {
              "itemIds": {
                "type": "array",
                "description": "List of item IDs which are assigned to the specified category",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "example": {
          "itemIds": [
            "65143901",
            "65143902",
            "65143903",
            "65143904",
            "65143905"
          ],
          "paging": {
            "cursors": {
              "after": "NDMyNzQyODI3OTQw"
            }
          }
        }
      },
      "PagedDealItemVariationResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PagedAfterOnlyCursorResponse"
          },
          {
            "type": "object",
            "properties": {
              "dealItemVariations": {
                "type": "array",
                "description": "List of deal item variations which form the specified deal group",
                "items": {
                  "$ref": "#/components/schemas/DealItemVariation"
                }
              }
            }
          }
        ],
        "example": {
          "dealItemVariations": [
            {
              "dealItemVariationId": "8548153",
              "minChoices": 0,
              "maxChoices": 1,
              "additionPrice": 50
            },
            {
              "dealItemVariationId": "8548153",
              "minChoices": 1,
              "maxChoices": 2,
              "additionPrice": 100
            }
          ],
          "paging": {
            "cursors": {
              "after": "NDMyNzQyODI3OTQw"
            }
          }
        }
      },
      "PagedMenuDealGroupsResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PagedAfterOnlyCursorResponse"
          },
          {
            "type": "object",
            "properties": {
              "dealGroups": {
                "type": "array",
                "description": "List of deal groups for the given menu item on the given restaurant's menu",
                "items": {
                  "$ref": "#/components/schemas/MenuDealGroupBase"
                }
              }
            }
          }
        ],
        "example": {
          "dealGroups": [
            {
              "id": "23435309-1",
              "name": "Choose your base",
              "numberOfChoices": 1
            },
            {
              "id": "23435309-2",
              "name": "Choose your halves",
              "numberOfChoices": 2
            }
          ],
          "paging": {
            "cursors": {
              "after": "NDMyNzQyODI3OTQw"
            }
          }
        }
      },
      "PagedMenuItemsResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PagedAfterOnlyCursorResponse"
          },
          {
            "type": "object",
            "properties": {
              "items": {
                "type": "array",
                "description": "List of menu items for a given restaurant's menu.",
                "items": {
                  "$ref": "#/components/schemas/MenuItemBase"
                }
              }
            }
          }
        ],
        "example": {
          "items": [
            {
              "id": "65143901",
              "type": "menuItem",
              "name": "Flat Bread and Dips (Pick any 2 Dips)",
              "requireOtherProducts": false,
              "description": "",
              "labels": []
            },
            {
              "id": "8547130",
              "type": "menuItem",
              "name": "Margherita",
              "requireOtherProducts": true,
              "description": "",
              "labels": []
            }
          ],
          "paging": {
            "cursors": {
              "after": "NDMyNzQyODI3OTQw"
            }
          }
        }
      },
      "PagedMenuModifierGroupsResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PagedAfterOnlyCursorResponse"
          },
          {
            "type": "object",
            "properties": {
              "modifierGroups": {
                "type": "array",
                "description": "List of modifier groups for the given menu item on the given restaurant's menu",
                "items": {
                  "$ref": "#/components/schemas/MenuModifierGroup"
                }
              }
            }
          }
        ],
        "example": {
          "modifierGroups": [
            {
              "id": "8547130-req-1",
              "name": "Choose your crust",
              "minChoices": 1,
              "maxChoices": 1,
              "modifiers": [
                {
                  "id": "854500",
                  "name": "Classic Crust",
                  "minChoices": 0,
                  "maxChoices": 1,
                  "additionPrice": 0
                },
                {
                  "id": "854600",
                  "name": "Stuffed Crust",
                  "minChoices": 0,
                  "maxChoices": 1,
                  "additionPrice": 200
                }
              ]
            },
            {
              "id": "8547130-opt-1",
              "name": "Any extra toppings?",
              "minChoices": 0,
              "maxChoices": 10,
              "modifiers": [
                {
                  "id": "1000",
                  "name": "Mozzarella Cheese",
                  "minChoices": 0,
                  "maxChoices": 2,
                  "additionPrice": 50
                },
                {
                  "id": "1001",
                  "name": "Ham",
                  "minChoices": 0,
                  "maxChoices": 1,
                  "additionPrice": 50
                },
                {
                  "id": "1002",
                  "name": "Red Onion",
                  "minChoices": 0,
                  "maxChoices": 1,
                  "additionPrice": 50
                },
                {
                  "id": "1003",
                  "name": "Pepperoni",
                  "minChoices": 0,
                  "maxChoices": 1,
                  "additionPrice": 50
                },
                {
                  "id": "1004",
                  "name": "Olives",
                  "minChoices": 0,
                  "maxChoices": 1,
                  "additionPrice": 50
                }
              ]
            }
          ],
          "paging": {
            "cursors": {
              "after": "NDMyNzQyODI3OTQw"
            }
          }
        }
      },
      "PagedVariationsResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PagedAfterOnlyCursorResponse"
          },
          {
            "type": "object",
            "properties": {
              "variations": {
                "type": "array",
                "description": "List of variations for the given menu item on the given restaurant's menu",
                "items": {
                  "$ref": "#/components/schemas/Variation"
                }
              }
            }
          }
        ],
        "example": {
          "variations": [
            {
              "id": "8547121",
              "name": "Half",
              "type": "variation",
              "basePrice": 500,
              "dealOnly": true,
              "kitchenNumber": "100",
              "availabilityIds": [
                "1-lunch-delivery",
                "2-lunch-collection",
                "3-dinner-delivery",
                "4-dinner-collection"
              ],
              "modifierGroupsIds": [
                "8547130-opt-1"
              ],
              "dealGroupsIds": []
            },
            {
              "id": "8547130",
              "name": "12 inch",
              "type": "variation",
              "basePrice": 1000,
              "dealOnly": false,
              "kitchenNumber": "100",
              "availabilityIds": [
                "1-lunch-delivery",
                "2-lunch-collection",
                "3-dinner-delivery",
                "4-dinner-collection"
              ],
              "modifierGroupsIds": [
                "8547130-req-1",
                "8547130-opt-1"
              ],
              "dealGroupsIds": []
            },
            {
              "id": "8543123",
              "name": "14 inch",
              "type": "variation",
              "basePrice": 1200,
              "dealOnly": true,
              "kitchenNumber": "200",
              "availabilityIds": [
                "1-lunch-delivery-weekday",
                "2-lunch-collection-weekday",
                "3-dinner-delivery-weekday",
                "4-dinner-collection-weekday"
              ],
              "modifierGroupsIds": [
                "8547130-req-1",
                "8547130-opt-1"
              ],
              "dealGroupsIds": []
            }
          ],
          "paging": {
            "cursors": {
              "after": "NDMyNzQyODI3OTQw"
            }
          }
        }
      },
      "RestaurantETAs": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "restaurantId": {
              "type": "string",
              "description": "The unique identifier of the restaurant."
            },
            "etaAtRestaurant": {
              "type": "number",
              "format": "int32",
              "description": "Your best estimation in minutes"
            }
          },
          "example": {
            "restaurantId": "1",
            "etaAtRestaurant": 1
          }
        }
      },
      "SearchResponse": {
        "type": "object",
        "properties": {
          "area": {
            "type": "string"
          },
          "MetaData": {
            "type": "object",
            "properties": {
              "CanonicalName": {
                "type": "string"
              },
              "District": {
                "type": "string"
              },
              "Postcode": {
                "type": "string"
              },
              "Area": {
                "type": "string"
              },
              "Latitude": {
                "type": "number",
                "description": "The latitude of the search location"
              },
              "Longitude": {
                "type": "number",
                "description": "The longitude of the search location"
              },
              "CuisineDetails": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "Name": {
                      "type": "string"
                    },
                    "SeoName": {
                      "type": "string"
                    },
                    "Total": {
                      "type": "number"
                    }
                  }
                }
              },
              "ResultCount": {
                "type": "number"
              },
              "SearchedTerms": {
                "type": "object",
                "nullable": true
              },
              "TagDetails": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "BackgroundColour": {
                      "type": "string"
                    },
                    "Colour": {
                      "type": "string"
                    },
                    "DisplayName": {
                      "type": "string"
                    },
                    "Key": {
                      "type": "string"
                    },
                    "Priority": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "Restaurants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchRestaurant"
            }
          },
          "RestaurantSets": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "Id": {
                  "type": "string"
                },
                "Name": {
                  "type": "string"
                },
                "Type": {
                  "type": "string"
                },
                "Restaurants": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "Id": {
                        "type": "number"
                      },
                      "Metadata": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "Key": {
                              "type": "string"
                            },
                            "Value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "CuisineSets": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "Id": {
                  "type": "string"
                },
                "Name": {
                  "type": "string"
                },
                "Type": {
                  "type": "string"
                },
                "Cuisines": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "Name": {
                        "type": "string"
                      },
                      "SeoName": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "Views": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "Target": {
                  "type": "string"
                },
                "Components": {
                  "type": "object",
                  "properties": {
                    "Type": {
                      "type": "string"
                    },
                    "Id": {
                      "type": "string"
                    },
                    "TrackingId": {
                      "type": "string"
                    },
                    "TemplateName": {
                      "type": "string"
                    },
                    "ViewData": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "Dishes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "RestaurantId": {
                  "type": "number"
                },
                "Best": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "ProductId": {
                        "type": "number",
                        "description": "Deprecated field no longer populated, but retained for backwards compatibility with clients"
                      },
                      "StrProductId": {
                        "type": "string",
                        "description": "The id of the product"
                      },
                      "Price": {
                        "type": "number",
                        "description": "The price of the product"
                      },
                      "FullName": {
                        "type": "string",
                        "description": "The full name of the product"
                      }
                    }
                  }
                },
                "Similar": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "ProductId": {
                        "type": "number"
                      },
                      "Price": {
                        "type": "number"
                      },
                      "FullName": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "ShortResultText": {
            "type": "string"
          },
          "deliveryFees": {
            "type": "object",
            "description": "Information related to delivery fees.",
            "properties": {
              "restaurants": {
                "type": "object",
                "description": "Dictionary of `restaurantIds` to delivery fees.",
                "additionalProperties": {
                  "$ref": "#/components/schemas/RestaurantDeliveryFees"
                }
              }
            }
          },
          "promotedPlacement": {
            "type": "object",
            "description": "Information related to promoted placement restaurants.",
            "properties": {
              "filteredSearchPromotedLimit": {
                "type": "number",
                "description": "How many restaurants to promote when search is filtered"
              },
              "restaurants": {
                "type": "object",
                "description": "Dictionary of `restaurantIds` to promoted placement info.",
                "additionalProperties": {
                  "$ref": "#/components/schemas/RestaurantPromotedPlacementInfo"
                }
              },
              "rankedIds": {
                "type": "array",
                "description": "Restaurants that can be promoted, in preferred order",
                "items": {
                  "type": "number"
                }
              }
            }
          }
        },
        "example": {
          "Area": "Fleet Street",
          "MetaData": {
            "CanonicalName": "ec4-fleetstreet",
            "District": "EC4",
            "Postcode": "EC4",
            "Area": "Fleet Street",
            "Latitude": 0,
            "Longitude": 0,
            "CuisineDetails": [
              {
                "Name": "Danish",
                "SeoName": "danish",
                "Total": 171
              }
            ],
            "ResultCount": 1,
            "SearchedTerms": null,
            "TagDetails": [
              {
                "BackgroundColour": "#E6F6C5",
                "Colour": "#04822C",
                "DisplayName": "Tried and Tasted",
                "Key": "tried-and-tasted",
                "Priority": 300
              }
            ]
          },
          "Restaurants": [
            {
              "Id": 102215,
              "Name": "TEST_DP_1",
              "UniqueName": "test_dp-london-london",
              "Address": {
                "City": "London",
                "FirstLine": "London",
                "Postcode": "EC4M 7RF",
                "Latitude": 51.516454,
                "Longitude": -0.103137
              },
              "City": "London",
              "Postcode": "EC4M 7RF",
              "Latitude": 0,
              "Longitude": 0,
              "Rating": {
                "Count": 0,
                "Average": 0,
                "StarRating": 0
              },
              "RatingStars": 0,
              "NumberOfRatings": 0,
              "RatingAverage": 0,
              "Description": "",
              "Url": "https://www.just-eat.co.uk/restaurants-test_dp-london-london",
              "LogoUrl": "http://d30v2pzvrfyzpo.cloudfront.net/uk/images/restaurants/102215.gif",
              "IsTestRestaurant": false,
              "IsHalal": false,
              "IsNew": false,
              "ReasonWhyTemporarilyOffline": "",
              "DriveDistance": 0,
              "DriveInfoCalculated": true,
              "IsCloseBy": true,
              "OfferPercent": 0,
              "NewnessDate": "2017-05-02T14:30:21",
              "OpeningTime": "2019-11-19T01:00:00Z",
              "OpeningTimeUtc": null,
              "OpeningTimeIso": "2019-11-19T01:00:00",
              "OpeningTimeLocal": "2019-11-19T01:00:00",
              "DeliveryOpeningTimeLocal": "2019-11-18T01:00:00",
              "DeliveryOpeningTime": "2019-11-18T01:00:00Z",
              "DeliveryOpeningTimeUtc": null,
              "DeliveryStartTime": "2019-11-18T01:00:00Z",
              "DeliveryTime": null,
              "DeliveryTimeMinutes": null,
              "DeliveryWorkingTimeMinutes": 10,
              "DeliveryEtaMinutes": {
                "Approximate": null,
                "RangeLower": 10,
                "RangeUpper": 25
              },
              "IsCollection": false,
              "IsDelivery": true,
              "IsFreeDelivery": false,
              "IsOpenNowForCollection": false,
              "IsOpenNowForDelivery": true,
              "IsOpenNowForPreorder": false,
              "IsOpenNow": true,
              "IsTemporarilyOffline": false,
              "DeliveryMenuId": 224651,
              "CollectionMenuId": null,
              "DeliveryZipcode": null,
              "DeliveryCost": 0.12,
              "MinimumDeliveryValue": 0,
              "SecondDateRanking": 0,
              "DefaultDisplayRank": 0,
              "SponsoredPosition": 0,
              "SecondDateRank": 0,
              "Score": 502,
              "IsTemporaryBoost": false,
              "IsSponsored": false,
              "IsPremier": false,
              "HygieneRating": null,
              "ShowSmiley": false,
              "SmileyDate": null,
              "SmileyElite": false,
              "SmileyResult": null,
              "SmileyUrl": null,
              "SendsOnItsWayNotifications": false,
              "BrandName": "",
              "IsBrand": false,
              "LastUpdated": "2019-09-10T10:55:58.199397",
              "Deals": [
                {
                  "Description": "20% off when you spend £20",
                  "DiscountPercent": 20,
                  "QualifyingPrice": 20,
                  "OfferType": "Percent"
                }
              ],
              "Offers": [
                {
                  "Amount": 20,
                  "QualifyingValue": 20,
                  "MaxQualifyingValue": 50,
                  "Type": "Percent",
                  "OfferId": "136149"
                }
              ],
              "Logo": [
                {
                  "StandardResolutionURL": "http://d30v2pzvrfyzpo.cloudfront.net/uk/images/restaurants/102215.gif"
                }
              ],
              "Tags": [],
              "DeliveryChargeBands": [],
              "CuisineTypes": [
                {
                  "Id": 2,
                  "IsTopCuisine": false,
                  "Name": "English",
                  "SeoName": "english"
                }
              ],
              "Cuisines": [
                {
                  "Name": "English",
                  "SeoName": "english"
                }
              ],
              "ScoreMetaData": [
                {
                  "Key": "Distance",
                  "Value": "0"
                },
                {
                  "Key": "SetName",
                  "Value": "Default"
                }
              ],
              "Badges": [],
              "OpeningTimes": [],
              "ServiceableAreas": []
            }
          ],
          "RestaurantSets": [],
          "CuisineSets": [
            {
              "Id": "user_and_local_cuisines",
              "Name": "",
              "Type": "area_cuisines",
              "Cuisines": [
                {
                  "Name": "Pizza",
                  "SeoName": "pizza"
                }
              ]
            }
          ],
          "Views": [],
          "Dishes": [],
          "ShortResultText": "EC4",
          "deliveryFees": {
            "restaurants": {
              "102215": {
                "restaurantId": "102215",
                "minimumOrderValue": 0,
                "bands": [
                  {
                    "minimumAmount": 0,
                    "fee": 100
                  }
                ]
              }
            }
          },
          "promotedPlacement": {
            "filteredSearchPromotedLimit": 5,
            "restaurants": {
              "84335": {
                "restaurantId": "84335",
                "defaultPromoted": true
              }
            },
            "rankedIds": [
              84335
            ]
          }
        }
      },
      "SearchRestaurant": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "number"
          },
          "Name": {
            "type": "string"
          },
          "UniqueName": {
            "type": "string"
          },
          "Address": {
            "type": "object",
            "properties": {
              "City": {
                "type": "string"
              },
              "FirstLine": {
                "type": "string"
              },
              "Postcode": {
                "type": "string"
              },
              "Latitude": {
                "type": "number"
              },
              "Longitude": {
                "type": "number"
              }
            }
          },
          "City": {
            "type": "string"
          },
          "Postcode": {
            "type": "string"
          },
          "Latitude": {
            "type": "number"
          },
          "Longitude": {
            "type": "number"
          },
          "Rating": {
            "type": "object",
            "properties": {
              "Count": {
                "type": "number"
              },
              "Average": {
                "type": "number"
              },
              "StarRating": {
                "type": "number"
              }
            }
          },
          "RatingStars": {
            "type": "number"
          },
          "NumberOfRatings": {
            "type": "number"
          },
          "RatingAverage": {
            "type": "number"
          },
          "Description": {
            "type": "string"
          },
          "Url": {
            "type": "string"
          },
          "LogoUrl": {
            "type": "string"
          },
          "IsTestRestaurant": {
            "type": "boolean"
          },
          "IsHalal": {
            "type": "boolean"
          },
          "IsNew": {
            "type": "boolean"
          },
          "ReasonWhyTemporarilyOffline": {
            "type": "string"
          },
          "DriveDistance": {
            "type": "number"
          },
          "DriveInfoCalculated": {
            "type": "boolean"
          },
          "IsCloseBy": {
            "type": "boolean"
          },
          "OfferPercent": {
            "type": "number"
          },
          "NewnessDate": {
            "$ref": "#/components/schemas/local-date-time"
          },
          "OpeningTime": {
            "type": "string",
            "format": "date-time"
          },
          "OpeningTimeUtc": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "OpeningTimeIso": {
            "$ref": "#/components/schemas/local-date-time"
          },
          "OpeningTimeLocal": {
            "$ref": "#/components/schemas/local-date-time"
          },
          "DeliveryOpeningTimeLocal": {
            "$ref": "#/components/schemas/local-date-time"
          },
          "DeliveryOpeningTime": {
            "type": "string",
            "format": "date-time"
          },
          "DeliveryOpeningTimeUtc": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "DeliveryStartTime": {
            "type": "string",
            "format": "date-time"
          },
          "DeliveryTime": {
            "type": "number",
            "nullable": true
          },
          "DeliveryTimeMinutes": {
            "type": "number",
            "nullable": true
          },
          "DeliveryWorkingTimeMinutes": {
            "type": "number"
          },
          "DeliveryEtaMinutes": {
            "type": "object",
            "properties": {
              "Approximate": {
                "type": "number",
                "nullable": true
              },
              "RangeLower": {
                "type": "number"
              },
              "RangeUpper": {
                "type": "number"
              }
            }
          },
          "IsCollection": {
            "type": "boolean"
          },
          "IsDelivery": {
            "type": "boolean"
          },
          "IsFreeDelivery": {
            "type": "boolean"
          },
          "IsOpenNowForCollection": {
            "type": "boolean"
          },
          "IsOpenNowForDelivery": {
            "type": "boolean"
          },
          "IsOpenNowForPreorder": {
            "type": "boolean"
          },
          "IsOpenNow": {
            "type": "boolean"
          },
          "IsTemporarilyOffline": {
            "type": "boolean"
          },
          "DeliveryMenuId": {
            "type": "number"
          },
          "CollectionMenuId": {
            "type": "number",
            "nullable": true
          },
          "DeliveryZipcode": {
            "type": "string",
            "nullable": true
          },
          "DeliveryCost": {
            "type": "number"
          },
          "MinimumDeliveryValue": {
            "type": "number"
          },
          "SecondDateRanking": {
            "type": "number"
          },
          "DefaultDisplayRank": {
            "type": "number"
          },
          "SponsoredPosition": {
            "type": "number"
          },
          "SecondDateRank": {
            "type": "number"
          },
          "Score": {
            "type": "number"
          },
          "IsTemporaryBoost": {
            "type": "boolean"
          },
          "IsSponsored": {
            "type": "boolean"
          },
          "IsPremier": {
            "type": "boolean"
          },
          "HygieneRating": {
            "type": "number",
            "nullable": true
          },
          "ShowSmiley": {
            "type": "boolean"
          },
          "SmileyDate": {
            "type": "object",
            "nullable": true
          },
          "SmileyElite": {
            "type": "boolean"
          },
          "SmileyResult": {
            "type": "object",
            "nullable": true
          },
          "SmileyUrl": {
            "type": "object",
            "nullable": true
          },
          "SendsOnItsWayNotifications": {
            "type": "boolean"
          },
          "BrandName": {
            "type": "string"
          },
          "IsBrand": {
            "type": "boolean"
          },
          "LastUpdated": {
            "$ref": "#/components/schemas/local-date-time"
          },
          "Deals": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "Description": {
                  "type": "string"
                },
                "DiscountPercent": {
                  "type": "number"
                },
                "QualifyingPrice": {
                  "type": "number"
                },
                "OfferType": {
                  "type": "string"
                }
              }
            }
          },
          "Offers": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "Logo": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "StandardResolutionURL": {
                  "type": "string"
                }
              }
            }
          },
          "Tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "DeliveryChargeBands": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "BasketThresholdPrice": {
                  "type": "number"
                },
                "DeliveryChargeBelowThreshold": {
                  "type": "number"
                }
              }
            }
          },
          "CuisineTypes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "Id": {
                  "type": "number"
                },
                "IsTopCuisine": {
                  "type": "boolean"
                }
              }
            }
          },
          "Cuisines": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "Name": {
                  "type": "string"
                },
                "SeoName": {
                  "type": "string"
                }
              }
            }
          },
          "ScoreMetaData": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "Key": {
                  "type": "string"
                },
                "Value": {
                  "type": "string"
                }
              }
            }
          },
          "Badges": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "OpeningTimes": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "ServiceableAreas": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        }
      },
      "SearchWebResponse": {
        "type": "object",
        "properties": {
          "Open": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchRestaurant"
            }
          },
          "Offline": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchRestaurant"
            }
          },
          "Closed": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchRestaurant"
            }
          }
        }
      },
      "Time": {
        "type": "object",
        "properties": {
          "daysOfTheWeek": {
            "type": "array",
            "description": "The days of the week.",
            "items": {
              "type": "string",
              "enum": [
                "monday",
                "tuesday",
                "wednesday",
                "thursday",
                "friday",
                "saturday",
                "sunday"
              ]
            }
          },
          "fromDateTime": {
            "type": "string",
            "description": "Time of day the availability begins, in local time, format is ISO 8601 hh:mm:ss"
          },
          "toDateTime": {
            "type": "string",
            "description": "Time of day the availability begins, in local time, format is ISO 8601 hh:mm:ss"
          }
        },
        "example": {
          "daysOfTheWeek": [
            "monday",
            "tuesday",
            "wednesday",
            "thursday",
            "friday",
            "saturday",
            "sunday"
          ],
          "fromDateTime": "11:30:00",
          "toDateTime": "14:30:00"
        }
      },
      "UnauthorisedMarketingResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MarketingErrorResponse"
          },
          {
            "type": "object",
            "description": "401 Unauthorised Returned",
            "additionalProperties": false
          }
        ],
        "example": {
          "message": "Unauthorised",
          "faultId": "72d7036d-990a-4f84-9efa-ef5f40f6044b",
          "errors": [
            {
              "description": "Unauthorised",
              "errorCode": "401"
            }
          ]
        }
      },
      "updateOrderTimeRequest": {
        "type": "object",
        "description": "Request object for order time update",
        "properties": {
          "lowerBoundMinutes": {
            "type": "integer",
            "description": "Order time lower bound value, in minutes.",
            "format": "int32"
          },
          "upperBoundMinutes": {
            "type": "integer",
            "description": "Order time upper bound value, in minutes.",
            "format": "int32"
          }
        },
        "example": {
          "lowerBoundMinutes": 35,
          "upperBoundMinutes": 50
        }
      },
      "Variation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier at menu level for a variation, can be shared with parent menu item id."
          },
          "name": {
            "type": "string",
            "description": "The name of the variation."
          },
          "type": {
            "type": "string",
            "enum": [
              "noVariation",
              "variation"
            ],
            "description": "Denotes the type of variation, `Variation` if there's multiple variations of the parent `menuitem`, `NoVariation` if there's only one"
          },
          "basePrice": {
            "type": "number",
            "format": "int32",
            "description": "The base price of this variation in the minor unit of the currency."
          },
          "kitchenNumber": {
            "type": "string",
            "description": "Identifies the item with a number on the physical menu that the kitchen understand e.g. on a Chinese menu number 16 could correspond to \"BBQ ribs\""
          },
          "dealOnly": {
            "type": "boolean",
            "description": "This flag indicates the variation is only available as part of a deal, the item will not be displayed as a stand alone menu item."
          },
          "availabilityIds": {
            "type": "array",
            "description": "Maps to an availability item, availabilities determines which days and times the item can be sold.",
            "items": {
              "type": "string"
            }
          },
          "modifierGroupsIds": {
            "type": "array",
            "description": "Maps to the modifier groups that are applicable to this variation.",
            "items": {
              "type": "string"
            }
          },
          "dealGroupsIds": {
            "type": "array",
            "description": "Maps to the deal groups that are applicable to this variation.",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "id": "8547130",
          "name": "12 inch",
          "type": "variation",
          "basePrice": 1000,
          "dealOnly": false,
          "kitchenNumber": "100",
          "availabilityIds": [
            "1-lunch-delivery",
            "2-lunch-collection",
            "3-dinner-delivery",
            "4-dinner-collection"
          ],
          "modifierGroupsIds": [
            "8547130-req-1",
            "8547130-opt-1"
          ],
          "dealGroupsIds": []
        }
      },
      "menu-ingestion-complete": {
        "type": "object",
        "properties": {
          "tenant": {
            "type": "string",
            "description": "Country code for the market the restaurant is in",
            "format": "enum",
            "enum": [
              "au",
              "dk",
              "es",
              "ie",
              "it",
              "no",
              "uk",
              "nz"
            ]
          },
          "restaurantId": {
            "type": "string",
            "description": "The Just Eat restaurant ID"
          },
          "timestamp": {
            "type": "string",
            "description": "The ISO-8601 datetime at which the menu ingestion completed",
            "format": "date-time"
          },
          "result": {
            "type": "string",
            "description": "The result of the menu ingestion process",
            "format": "enum",
            "enum": [
              "success",
              "fail"
            ]
          },
          "correlationId": {
            "type": "string",
            "description": "The ID of the execution which has been completed"
          },
          "fault": {
            "type": "object",
            "description": "Details of the fault which caused the menu ingestion to fail. This is only present if menu ingestion did not complete successfully",
            "properties": {
              "id": {
                "type": "string",
                "description": "A unique ID for the fault"
              },
              "errors": {
                "type": "array",
                "description": "Details of errors which caused the fault",
                "items": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "An alphanumeric code for the error"
                    },
                    "description": {
                      "type": "string",
                      "description": "A description of the error to help you resolve the issue"
                    }
                  }
                }
              }
            }
          }
        },
        "example": {
          "tenant": "uk",
          "restaurantId": "123456",
          "timestamp": "2020-01-01T00:00:00Z",
          "result": "fail",
          "correlationId": "64bef5ee-7265-47f8-9aee-28bc74f00b13",
          "fault": {
            "id": "70e307df-0156-4d3c-ab92-dd57a103350b",
            "errors": [
              {
                "code": "123",
                "description": "Invalid variation: 15237d6c-c866-55da-9e61-b4f59dcab9ae - variations must be associated with at least one availability"
              },
              {
                "code": "145",
                "description": "Invalid availability ID: menu-105369-availabilities - availability IDs must be integers"
              }
            ]
          }
        }
      },
      "order-time-updated": {
        "type": "object",
        "properties": {
          "restaurantId": {
            "type": "string",
            "description": "The Just Eat restaurant ID"
          },
          "serviceType": {
            "type": "string",
            "description": "Service type of the order time.",
            "format": "enum",
            "enum": [
              "Delivery",
              "Collection"
            ]
          },
          "dayOfWeek": {
            "type": "string",
            "description": "The day of the week that has been updated.",
            "format": "enum",
            "enum": [
              "Sunday",
              "Monday",
              "Tuesday",
              "Wednesday",
              "Thursday",
              "Friday",
              "Saturday"
            ]
          },
          "lowerBoundMinutes": {
            "type": "integer",
            "description": "Order time lower bound value, in minutes.",
            "format": "int32"
          },
          "upperBoundMinutes": {
            "type": "integer",
            "description": "Order time upper bound value, in minutes.",
            "format": "int32"
          }
        },
        "example": {
          "restaurantId": "123456",
          "serviceType": "Delivery",
          "dayOfWeek": "Monday",
          "lowerBoundMinutes": 35,
          "upperBoundMinutes": 50
        }
      },
      "assessmentStatusTypes": {
        "type": "integer",
        "format": "enum",
        "description": "Denotes the type of segmentation status that restaurant can have",
        "x-enumNames": [
          "Unknown",
          "LocalLegend",
          "Gold",
          "Silver",
          "New"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4
        ],
        "example": 1
      },
      "customerExperienceScoreDetail": {
        "type": "object",
        "description": "Details of how customer experience score has contributed to get the segmentation status",
        "properties": {
          "hasPassed": {
            "type": "boolean",
            "description": "Represent if the restaurant has passed the customer experience score criteria"
          },
          "scoreType": {
            "description": "Represent the type of score data. It would always be number (0) customer experience score.",
            "$ref": "#/components/schemas/scoreTypes"
          },
          "score": {
            "type": "number",
            "description": "Represent the customer experience score achieved by the restaurant"
          },
          "requiredScore": {
            "type": "number",
            "description": "Represent the customer experience score required to pass the customer experience score criteria"
          },
          "maximumScore": {
            "type": "number",
            "description": "Represent the maximum customer experience score that can be achieved by the restaurant"
          }
        },
        "example": {
          "score": 12,
          "requiredScore": 40,
          "maximumScore": 50,
          "hasPassed": false,
          "scoreType": 0
        }
      },
      "hygieneScheme": {
        "type": "integer",
        "description": "Denotes the type of hygiene scheme supported",
        "x-enumNames": [
          "Unknown",
          "FHRS",
          "FHIS"
        ],
        "enum": [
          0,
          1,
          2
        ],
        "example": 1
      },
      "hygieneScoreDetail": {
        "type": "object",
        "description": "Details of hygiene rating experience score has contributed to get the segmentation status",
        "properties": {
          "hasPassed": {
            "type": "boolean",
            "description": "Represent if the restaurant has passed the hygiene score criteria"
          },
          "scoreType": {
            "description": "Represent the type of score data. Value of this field will depend which hygiene method is supported by restaurant.",
            "$ref": "#/components/schemas/scoreTypes"
          },
          "scheme": {
            "description": "Represent the hygiene scheme used by the restaurant",
            "$ref": "#/components/schemas/hygieneScheme"
          },
          "score": {
            "description": "Represent the hygiene score achieved by restaurant. Based in the score type value, type of this field can be string or number of in future anything else",
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ]
          },
          "requiredScore": {
            "description": "Represent the hygiene score required to pass hygiene criteria. Based in the score type value, type of this field can be string or number of in future anything else",
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ]
          },
          "maximumScore": {
            "description": "Represent the maximum hygiene score that can be achieved. Based in the score type value, type of this field can be string or number of in future anything else",
            "nullable": true,
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ]
          }
        },
        "example": {
          "score": 5,
          "requiredScore": 3,
          "maximumScore": 5,
          "hasPassed": true,
          "scheme": 1,
          "scoreType": 0
        }
      },
      "onItsWayPercentage": {
        "type": "object",
        "description": "Details of how on its way experience score has contributed to get the segmentation status",
        "properties": {
          "hasPassed": {
            "type": "boolean",
            "description": "Represent if the restaurant has passed the on-its-way threshold"
          },
          "scoreType": {
            "description": "Represent the type of score data. It would always be percentage (1) for on-its-way.",
            "$ref": "#/components/schemas/scoreTypes"
          },
          "score": {
            "type": "number",
            "description": "Represent the on-its-way percentage of restaurant"
          },
          "requiredScore": {
            "type": "number",
            "description": "Represent the on its way percentage required to pass the on-its-way threshold"
          }
        },
        "example": {
          "score": 84,
          "requiredScore": 70,
          "hasPassed": true,
          "scoreType": 1
        }
      },
      "orderScoreDetail": {
        "type": "object",
        "description": "Details of how order score has contributed to get the segmentation status",
        "properties": {
          "hasPassed": {
            "type": "boolean",
            "description": "Represent if the restaurant has passed the order score criteria"
          },
          "scoreType": {
            "description": "Represent the type of score data. It would always be number (0) customer experience score.",
            "$ref": "#/components/schemas/scoreTypes"
          },
          "score": {
            "type": "number",
            "description": "Represent the order score achieved by the restaurant"
          },
          "requiredScore": {
            "type": "number",
            "description": "Represent the order score required to pass the order score criteria"
          },
          "maximumScore": {
            "type": "number",
            "description": "Represent the maximum order score that can be achieved by the restaurant"
          }
        },
        "example": {
          "score": 48,
          "requiredScore": 20,
          "maximumScore": 50,
          "hasPassed": true,
          "scoreType": 0
        }
      },
      "scoreTypes": {
        "type": "integer",
        "description": "Represent the type of score data. Value of this field will depend on the category.",
        "x-enumNames": [
          "Number",
          "Percentage",
          "Custom"
        ],
        "enum": [
          0,
          1,
          2
        ],
        "example": 2
      },
      "segmentationHistory": {
        "type": "object",
        "description": "Represents list of last four segmentation statuses, sorted reverse chronologically by assessment date.",
        "properties": {
          "status": {
            "description": "The segmentation status for restaurant",
            "$ref": "#/components/schemas/assessmentStatusTypes"
          },
          "dateAssessed": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the segmentation assessment was made"
          },
          "hasLocalLegendCriteriaBeenMet": {
            "type": "boolean",
            "description": "Represents if the restaurant achieved local legend status at that point or not"
          }
        },
        "example": {
          "status": 1,
          "dateAssessed": "2019-12-31T00:00:00Z",
          "hasLocalLegendCriteriaBeenMet": true
        }
      },
      "segmentationHistoryList": {
        "type": "array",
        "description": "Represents list of last four segmentation statuses, sorted reverse chronologically by assessment date.",
        "items": {
          "$ref": "#/components/schemas/segmentationHistory"
        }
      },
      "segmentationStatus": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "format": "integer",
            "description": "The JUST EAT restaurant id"
          },
          "status": {
            "description": "The segmentation status for restaurant",
            "$ref": "#/components/schemas/assessmentStatusTypes"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of last status change"
          },
          "details": {
            "description": "Represent the details of segmentation status",
            "$ref": "#/components/schemas/segmentationStatusDetail"
          }
        }
      },
      "segmentationStatusDetail": {
        "type": "object",
        "description": "Represent the details of segmentation status sub-scores",
        "properties": {
          "orderScore": {
            "description": "Details of how order score has contributed to get the segmentation status",
            "$ref": "#/components/schemas/orderScoreDetail"
          },
          "customerExperienceScore": {
            "description": "Details of how customer experience score has contributed to get the segmentation status",
            "$ref": "#/components/schemas/customerExperienceScoreDetail"
          },
          "onItsWayPercentage": {
            "description": "Details of how on its way experience score has contributed to get the segmentation status",
            "$ref": "#/components/schemas/onItsWayPercentage"
          },
          "hygiene": {
            "description": "Details of hygiene rating experience score has contributed to get the segmentation status",
            "$ref": "#/components/schemas/hygieneScoreDetail"
          }
        }
      },
      "RestaurantSettingsResponse": {
        "type": "object",
        "description": "response containing settings of the restaurant in partner centre",
        "properties": {
          "isMenuManagementTeaserVisible": {
            "type": "boolean",
            "description": "A value indicated whether menu management teaser should be shown on restaurant edit menu page"
          }
        },
        "example": {
          "isMenuManagementTeaserVisible": false
        }
      },
      "applicationState": {
        "type": "string",
        "description": "The application state i.e. Open, Approved etc.",
        "enum": [
          "OpenApplication",
          "ManualInterventionRequired",
          "ReadyForInitialReview",
          "InitialReviewRejected",
          "ReadyForFinalReview",
          "FinalReviewRejected",
          "Approved"
        ]
      },
      "applicationSubmitResponse": {
        "type": "object",
        "properties": {
          "applicationState": {
            "$ref": "#/components/schemas/applicationState",
            "description": "The current application state i.e. Open, Approved etc."
          }
        }
      },
      "document": {
        "type": "object",
        "properties": {
          "documentMetadata": {
            "$ref": "#/components/schemas/documentMetadata",
            "description": "Metadata of document being added"
          },
          "documentType": {
            "$ref": "#/components/schemas/documentType",
            "description": "Type of document being added"
          }
        }
      },
      "documentContentType": {
        "type": "string",
        "description": "The content type of this document. Can be used by the client to display the file correctly",
        "enum": [
          "image/jpeg",
          "image/png",
          "application/pdf",
          "application/msword"
        ]
      },
      "documentLinkResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The signed URL for S3. It includes the random generated file name which is usually a GUID."
          },
          "method": {
            "type": "string",
            "description": "The method the client should use when calling S3",
            "enum": [
              "GET",
              "PUT",
              "DELETE"
            ]
          },
          "documentKey": {
            "type": "string",
            "description": "The name of the document"
          },
          "headers": {
            "type": "object",
            "description": "Headers that will be passed when calling S3",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "example": {
          "href": "https://s3.eu-west-1.amazonaws.com/uk/restaurants/restaurantId/fileName?X-Amz-Expires=180",
          "headers": {
            "x-amz-server-side-encryption": "AES256",
            "x-amz-meta-documenttype": "Menu"
          }
        }
      },
      "documentMetadata": {
        "type": "object",
        "properties": {
          "documentKey": {
            "description": "Key of document being added. This is the s3 object key that you have already added",
            "type": "string",
            "example": "images/signup/menu-1.jpg"
          },
          "contentType": {
            "$ref": "#/components/schemas/documentContentType",
            "description": "Content type of the document"
          },
          "dateAdded": {
            "type": "string",
            "format": "date-time",
            "description": "When the document is added [YYYY-MM-DDThh:mm:ssZ (UTC)]"
          }
        }
      },
      "documentRejectionType": {
        "type": "string",
        "description": "The rejection reason of a document",
        "enum": [
          "Other",
          "IncorrectDocument",
          "NotClearEnough",
          "Outdated",
          "NoOwnersName",
          "NoOwnersPhoto",
          "NoBusinessAddress",
          "NoBusinessName",
          "MissingPages",
          "Handwritten",
          "MissingInformation",
          "NoAllergenKey",
          "LogoNameDoesNotMatch",
          "CopyrightInfringement",
          "PhotoFromInternet"
        ]
      },
      "documentReviews": {
        "type": "object",
        "properties": {
          "rejectionReasons": {
            "type": "array",
            "minItems": 0,
            "maxItems": 10,
            "description": "An array of rejection reasons",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "$ref": "#/components/schemas/documentRejectionType"
                },
                "comment": {
                  "description": "Any other review comments",
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "documentState": {
        "type": "string",
        "description": "The state of a document",
        "enum": [
          "NotAvailable",
          "Received",
          "ReadyForInitialReview",
          "InitialToBeRejected",
          "InitialNoIssuesFound",
          "InitialReviewRejected",
          "ReadyForFinalReview",
          "FinalReviewNoIssuesFound",
          "FinalReviewToBeRejected",
          "FinalReviewRejected",
          "Approved"
        ]
      },
      "documentStateUpdate": {
        "type": "object",
        "properties": {
          "documentState": {
            "type": "string",
            "description": "The new state of the document",
            "$ref": "#/components/schemas/documentState"
          }
        }
      },
      "documentType": {
        "type": "string",
        "description": "The type of the document",
        "enum": [
          "Menu",
          "PhotoId",
          "AddressProof",
          "FsaCertificate",
          "Logo",
          "OwnershipInfo",
          "Shopfront"
        ]
      },
      "initialRestaurantRequest": {
        "type": "object",
        "required": [
          "name",
          "address",
          "owner"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the restaurant"
          },
          "address": {
            "type": "object",
            "description": "The address of the restaurant",
            "properties": {
              "city": {
                "type": "string",
                "description": "The name of the city the restaurant is located"
              },
              "postalCode": {
                "type": "string",
                "description": "The post code the restaurant is located"
              },
              "lines": {
                "type": "array",
                "minItems": 1,
                "maxItems": 3,
                "description": "The address lines the restaurant is located",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "owner": {
            "type": "object",
            "description": "The owner of the restaurant",
            "properties": {
              "givenName": {
                "type": "string",
                "description": "The first name of the restaurant owner"
              },
              "familyName": {
                "type": "string",
                "description": "The last name of the restaurant owner"
              },
              "phoneNumber": {
                "type": "string",
                "description": "The phone number of the restaurant owner"
              },
              "emailAddress": {
                "type": "string",
                "description": "The email address of the restaurant owner"
              }
            }
          }
        },
        "example": {
          "name": "Test Restaurant",
          "address": {
            "city": "London",
            "postalCode": "EC4M 7RF",
            "lines": [
              "Fleet Place House",
              "Fleet Place"
            ]
          },
          "owner": {
            "phoneNumber": "0791231234",
            "emailAddress": "restaurant@example.com"
          }
        }
      },
      "restaurant": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the restaurant"
          },
          "applicationState": {
            "$ref": "#/components/schemas/applicationState",
            "description": "The current application state of the restaurant"
          },
          "applicationMetadata": {
            "type": "object",
            "description": "Extra information about the restaurant, like the premises and ownership status",
            "nullable": true,
            "properties": {
              "applicationType": {
                "type": "string",
                "description": "The type of sign up application i.e. Standard, Non-Standard.",
                "nullable": true,
                "enum": [
                  "Unknown",
                  "Standard",
                  "NonStandard"
                ]
              },
              "occupancyType": {
                "type": "string",
                "description": "The nature of occupancy that restaurant is using e.g Single, Multiple businesses under one ownership, Multiple businesses under multiple ownership etc...",
                "nullable": true,
                "enum": [
                  "Unknown",
                  "Single",
                  "MultipleBusinessSingleOwnership",
                  "MultipleBusinessMultipleOwnership",
                  "Other"
                ]
              },
              "premiseType": {
                "type": "string",
                "description": "The type of premises that restaurant is using e.g Pub, Hotel, Stall etc...",
                "nullable": true,
                "enum": [
                  "Unknown",
                  "HighStreet",
                  "GhostKitchen",
                  "Residential",
                  "PubOrHotelSameName",
                  "PubOrHotelDifferentName",
                  "PubOrHotelLeased",
                  "PubOrHotelUnknown",
                  "Unit",
                  "Stall",
                  "ShoppingCentre",
                  "Van",
                  "Other"
                ]
              }
            }
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "description": "When the restaurant was created [YYYY-MM-DDThh:mm:ssZ (UTC)]"
          },
          "lastUpdatedDate": {
            "type": "string",
            "format": "date-time",
            "description": "When the restaurant was last updated [YYYY-MM-DDThh:mm:ssZ (UTC)]"
          },
          "address": {
            "type": "object",
            "description": "The address of the restaurant",
            "properties": {
              "city": {
                "type": "string",
                "description": "The name of the city the restaurant is located"
              },
              "postalCode": {
                "type": "string",
                "description": "The post code the restaurant is located"
              },
              "lines": {
                "type": "array",
                "minItems": 1,
                "maxItems": 3,
                "items": {
                  "type": "string"
                },
                "description": "The address lines the restaurant is located"
              }
            }
          },
          "owner": {
            "type": "object",
            "description": "The restaurant owner",
            "properties": {
              "givenName": {
                "type": "string",
                "description": "The first name of the restaurant owner"
              },
              "familyName": {
                "type": "string",
                "description": "The last name of the restaurant owner"
              },
              "phoneNumber": {
                "type": "string",
                "description": "The phone number of the restaurant owner"
              },
              "emailAddress": {
                "type": "string",
                "description": "The email address of the restaurant owner"
              }
            }
          },
          "hygiene": {
            "type": "object",
            "properties": {
              "rating": {
                "type": "string",
                "description": "The rating score"
              }
            },
            "description": "The food hygiene rating for the restaurant"
          },
          "fulfilment": {
            "type": "object",
            "description": "The delivery type of the restaurant",
            "properties": {
              "type": {
                "type": "string",
                "description": "The delivery type of the restaurant",
                "enum": [
                  "DeliveryAndCollection",
                  "CollectionOnly",
                  "JustEatDelivery"
                ]
              }
            }
          },
          "menu": {
            "type": "object",
            "description": "The restaurant menu",
            "properties": {
              "requestedCuisines": {
                "type": "array",
                "minItems": 1,
                "maxItems": 2,
                "items": {
                  "type": "string"
                },
                "description": "The restaurant cuisines"
              }
            }
          },
          "bankDetails": {
            "type": "object",
            "description": "Account holder information for the restaurant",
            "properties": {
              "accountHolderName": {
                "type": "string",
                "description": "The name on the bank account"
              },
              "bankName": {
                "type": "string",
                "description": "The name of the bank"
              },
              "bankAccountNumber": {
                "type": "string",
                "description": "The bank account number"
              },
              "bankSortCode": {
                "type": "string",
                "description": "The sort code"
              }
            }
          }
        },
        "example": {
          "name": "Test Restaurant",
          "applicationState": "OpenApplication",
          "applicationMetadata": {
            "applicationType": "NonStandard",
            "occupancyType": "MultipleBusinessMultipleOwnership",
            "premiseType": "Van"
          },
          "createdDate": "2019-10-16T12:18:34.000Z",
          "lastUpdatedDate": "2019-10-16T12:18:34.000Z",
          "hygiene": {
            "rating": "4"
          },
          "fulfilment": {
            "type": "DeliveryAndCollection",
            "description": "The fulfillment options for the restaurant"
          },
          "menu": {
            "requestedCuisines": [
              "Greek",
              "European"
            ]
          },
          "bankDetails": {
            "accountHolderName": "John Doe",
            "bankName": "Best Bank",
            "bankSortCode": "12-34-56",
            "bankAccountNumber": "12345678"
          },
          "address": {
            "city": "London",
            "postalCode": "EC4M 7RF",
            "lines": [
              "Fleet Place House",
              "Fleet Place"
            ]
          },
          "owner": {
            "givenName": "John",
            "familyName": "Doe",
            "phoneNumber": "0791231234",
            "emailAddress": "restaurant@example.com"
          }
        }
      },
      "ReviewComment": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string",
            "description": "Comment left by customer/restaurant",
            "nullable": true
          },
          "showText": {
            "type": "boolean",
            "description": "Text for the review comment will be hidden until it has been passed as OK. E.g. ensuring it doesn't contains swear words"
          },
          "processed": {
            "type": "boolean",
            "description": "Will be false until processed by an agent/automation"
          }
        },
        "additionalProperties": false,
        "description": "Details for a review comment",
        "example": {
          "comment": "Yum!",
          "showText": false,
          "processed": true
        }
      },
      "ReviewManagementData": {
        "type": "object",
        "properties": {
          "reviewId": {
            "type": "string",
            "description": "Identifier for ratings - will be equivalent to `RatingCode`",
            "nullable": true
          },
          "tenant": {
            "type": "string",
            "description": "A valid country code, e.g. \"uk\"",
            "nullable": true
          },
          "restaurantId": {
            "type": "string",
            "description": "The restaurant partner Id"
          },
          "customerDisplayName": {
            "type": "string",
            "description": "Customer name shown on the public site. Forename only to avoid disclosing PII",
            "nullable": true
          },
          "customerCity": {
            "type": "string",
            "description": "The customers city",
            "nullable": true
          },
          "customerEmail": {
            "type": "string",
            "description": "The customers email",
            "format": "email",
            "nullable": true
          },
          "restaurantName": {
            "type": "string",
            "description": "The display name for the restaurant",
            "nullable": true
          },
          "orderDate": {
            "type": "string",
            "description": "When order was placed",
            "format": "date-time"
          },
          "orderNumber": {
            "type": "string",
            "description": "The user friendly order number"
          },
          "reviewDate": {
            "type": "string",
            "description": "When the review was submitted",
            "format": "date-time"
          },
          "ratings": {
            "$ref": "#/components/schemas/ReviewScores"
          },
          "customerComment": {
            "$ref": "#/components/schemas/ReviewComment"
          },
          "restaurantComment": {
            "$ref": "#/components/schemas/ReviewComment"
          },
          "processed": {
            "type": "boolean",
            "description": "Flag used to indicate that this review has passed through the validation process."
          },
          "hideFromSite": {
            "type": "boolean",
            "description": "This review is suspect (e.g. a restaurant self-reviewing) so don't display it on the public site"
          }
        },
        "additionalProperties": false,
        "description": "A customer review for an order",
        "example": {
          "reviewId": "abc1234",
          "tenant": "uk",
          "restaurantId": "1234",
          "customerDisplayName": "John",
          "customerCity": "London",
          "customerEmail": "example@example.com",
          "restaurantName": "Tasty Snacks",
          "orderDate": "2021-05-14T12:00:00.000Z",
          "orderNumber": "1234",
          "reviewDate": "2021-05-14T17:00:00.000Z",
          "ratings": {
            "quality": 6,
            "service": 6,
            "delivery": 6
          },
          "customerComment": {
            "comment": "Very tasty!",
            "showText": true,
            "processed": true
          },
          "restaurantComment": {
            "comment": "Thank you :-)",
            "showText": true,
            "processed": true
          },
          "processed": true,
          "hideFromSite": false
        }
      },
      "ReviewManagementPagedList": {
        "type": "object",
        "properties": {
          "reviews": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReviewManagementData"
            },
            "description": "The current page of reviews",
            "nullable": true
          },
          "paging": {
            "$ref": "#/components/schemas/ReviewManagementPaging"
          }
        },
        "additionalProperties": false,
        "description": "Represents a page of reviews plus data about the overall result set. E.g. total number of results for the search.",
        "example": {
          "reviews": [
            {
              "reviewId": "abc1234",
              "tenant": "uk",
              "restaurantId": "1234",
              "customerDisplayName": "John",
              "customerCity": "London",
              "customerEmail": "example@example.com",
              "restaurantName": "Tasty Snacks",
              "orderDate": "2021-05-14T12:00:00.000Z",
              "orderNumber": "1234",
              "reviewDate": "2021-05-14T17:00:00.000Z",
              "ratings": {
                "quality": 6,
                "service": 6,
                "delivery": 6
              },
              "customerComment": {
                "comment": "Very tasty!",
                "showText": true,
                "processed": true
              },
              "restaurantComment": {
                "comment": "Thank you :-)",
                "showText": true,
                "processed": true
              },
              "processed": true,
              "hideFromSite": false
            }
          ],
          "paging": {
            "total": 555
          }
        }
      },
      "ReviewManagementPaging": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of reviews for the current search",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Meta data for a set of reviews",
        "example": {
          "total": 77
        }
      },
      "ReviewScores": {
        "type": "object",
        "properties": {
          "quality": {
            "type": "integer",
            "description": "The food quality rating",
            "format": "int32"
          },
          "service": {
            "type": "integer",
            "description": "The restaurant service rating",
            "format": "int32"
          },
          "delivery": {
            "type": "integer",
            "description": "The delivery rating",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "The star ratings given by a customer",
        "example": {
          "quality": 2,
          "service": 3,
          "delivery": 4
        }
      },
      "RichMediaImageBatchResponse": {
        "type": "object",
        "nullable": false,
        "required": [
          "batchStatus"
        ],
        "properties": {
          "batchStatus": {
            "type": "string",
            "format": "enum",
            "enum": [
              "Queued",
              "Running",
              "Succeeded",
              "PartiallySucceeded",
              "Failed",
              "Cancelled"
            ],
            "description": "The status of batch request"
          },
          "images": {
            "type": "array",
            "description": "The array of images in the batch",
            "maxItems": 500,
            "items": {
              "required": [
                "sourceImageUrl",
                "imageContext",
                "imageStatus"
              ],
              "type": "object",
              "properties": {
                "sourceImageUrl": {
                  "type": "string",
                  "description": "Source image URL. The remote HTTP or HTTPS URL address of an existing image or a private S3 object URL in a whitelisted bucket."
                },
                "imageContext": {
                  "type": "object",
                  "description": "Image context in dictionary format. Can contain additional data that will be published alongside the image.",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "imageStatus": {
                  "type": "string",
                  "format": "enum",
                  "enum": [
                    "Succeeded",
                    "Failed"
                  ],
                  "description": "The status of individual image"
                },
                "failureReason": {
                  "type": "string",
                  "description": "Can contain additional information about image publishing failure"
                },
                "urlTemplate": {
                  "type": "string",
                  "description": "Image URL template that can be used to access the image. Mandatory transformations are already baked in the URL template. The {transformations} placeholder can be replaced with additional Cloudinary transformations that suit your need (e.g. height, width etc). For more details see https://cloudinary.com/documentation/image_transformations"
                }
              }
            }
          }
        },
        "example": {
          "batchStatus": "PartiallySucceeded",
          "images": [
            {
              "sourceImageUrl": "https://test.test/image01.jpg",
              "imageContext": {
                "tenant": "uk",
                "dishKey": "pizza",
                "restaurantKey": "burgers&pizza"
              },
              "imageStatus": "Succeeded",
              "urlTemplate": "https://cloudinary.test/image/upload/c_fill,q_auto,{transformations}/v1/uk/dishes/burgers_pizza/image01"
            },
            {
              "sourceImageUrl": "https://test.test/image02.jpg",
              "imageContext": {
                "tenant": "uk",
                "dishKey": "burger",
                "restaurantKey": "burgers&pizza"
              },
              "imageStatus": "Failed",
              "failureReason": "Source image exeeds maximum size of 10 MB."
            }
          ]
        }
      },
      "RichMediaImagePublishRequest": {
        "type": "object",
        "nullable": false,
        "required": [
          "imageType",
          "images"
        ],
        "properties": {
          "imageType": {
            "type": "string",
            "description": "Image type of published images. Must match an image type defined in the metadata for your client."
          },
          "images": {
            "type": "array",
            "description": "The array of images to publish.",
            "maxItems": 500,
            "minItems": 1,
            "items": {
              "type": "object",
              "properties": {
                "sourceImageUrl": {
                  "description": "Source image URL. The remote HTTP or HTTPS URL address of an existing image or a private S3 object URL in a whitelisted bucket.",
                  "type": "string"
                },
                "imageContext": {
                  "type": "object",
                  "description": "Image context in dictionary format. Can contain additional data that will be published alongside the image.",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "example": {
          "imageType": "DishImage",
          "images": [
            {
              "sourceImageUrl": "https://test.test/image01.jpg",
              "imageContext": {
                "tenant": "uk",
                "dishKey": "pizza",
                "restaurantKey": "burgers&pizza"
              }
            },
            {
              "sourceImageUrl": "https://test.test/image02.jpg",
              "imageContext": {
                "tenant": "uk",
                "dishKey": "burger",
                "restaurantKey": "burgers&pizza"
              }
            }
          ]
        }
      },
      "AddCommentToTicketModel": {
        "type": "object",
        "description": "Used when Scoober sends a reply about a support incident, to add to a Just Eat Zendesk ticket",
        "required": [
          "description",
          "externalId",
          "responseUrl",
          "ticketId"
        ],
        "properties": {
          "ticketId": {
            "type": "integer",
            "format": "int64",
            "example": 1234,
            "description": "The ticket ID to add the comment to."
          },
          "requesterEmail": {
            "type": "string",
            "nullable": true,
            "example": "requester@scoober.com",
            "description": "E-Mail address of the ticket requester."
          },
          "status": {
            "type": "string",
            "nullable": true,
            "example": "pending",
            "description": "What status should we set the ticket to: Open, pending or solved."
          },
          "externalId": {
            "type": "string",
            "example": "slack:1",
            "description": "Scoober job reference, or similar ID used by Scoober to identify this ticket."
          },
          "description": {
            "type": "string",
            "example": "Happy to help!",
            "description": "Comment to add to the ticket."
          },
          "responseUrl": {
            "type": "string",
            "example": "https://zenbox-api.bob.external.tkwy-staging.io/ticket/reply/response",
            "description": "Where should we respond to with progress on this request?"
          }
        }
      },
      "AddReplyMessageModel": {
        "type": "object",
        "description": "Information sent when a Just Eat agent sends a follow up message about a Scoober support ticket to Scoober",
        "required": [
          "description",
          "externalId",
          "reason",
          "status",
          "subject",
          "ticketId"
        ],
        "properties": {
          "ticketId": {
            "type": "integer",
            "format": "int64",
            "example": 1234,
            "description": "Zendesk ticket ID this message is about."
          },
          "externalId": {
            "type": "string",
            "example": "slack:1",
            "description": "External ID for this ticket, e.g. Scoober job ID (assigned by them)."
          },
          "subject": {
            "type": "string",
            "example": "Scoober Test",
            "description": "Subject of the message."
          },
          "description": {
            "type": "string",
            "example": "Happy to help!",
            "description": "Description, i.e.: main body, of the message."
          },
          "status": {
            "type": "string",
            "example": "pending",
            "description": "Status of the ticket. Can be: New, pending, solved."
          },
          "countryCode": {
            "type": "string",
            "nullable": true,
            "example": "gb",
            "description": "2 letter ISO code this ticket is about."
          },
          "scooberJobId": {
            "type": "string",
            "nullable": true,
            "example": "1234",
            "description": "Scoober job ID for this order."
          },
          "city": {
            "type": "string",
            "nullable": true,
            "example": "london",
            "description": "City this order is located in.",
            "deprecated": true
          },
          "restaurantId": {
            "type": "string",
            "nullable": true,
            "example": "1234567",
            "description": "Restaurant Id of the order."
          },
          "reason": {
            "type": "string",
            "example": "front_line_reason_food_quality_cold_crushed_spilled",
            "description": "Scoober contact reason for this ticket."
          }
        }
      },
      "CreateMessageModel": {
        "type": "object",
        "description": "Information needed to create a message for the Scoober ops team",
        "required": [
          "description",
          "reason",
          "status",
          "subject",
          "ticketId"
        ],
        "properties": {
          "ticketId": {
            "type": "integer",
            "format": "int64",
            "example": 1234,
            "description": "Zendesk ticket ID this message is about."
          },
          "subject": {
            "type": "string",
            "example": "Scoober Test",
            "description": "Subject of the message to send."
          },
          "description": {
            "type": "string",
            "example": "Scoober Test",
            "description": "Description, main body, of the message to send."
          },
          "status": {
            "type": "string",
            "example": "new",
            "description": "Status of the Zendesk ticket."
          },
          "countryCode": {
            "type": "string",
            "nullable": true,
            "example": "gb",
            "description": "2 letter ISO code for the country this ticket is about."
          },
          "scooberJobId": {
            "type": "string",
            "nullable": true,
            "example": "en",
            "description": "Scoober job ID, if known."
          },
          "city": {
            "type": "string",
            "nullable": true,
            "example": "london",
            "description": "City this order is located in.",
            "deprecated": true
          },
          "restaurantId": {
            "type": "string",
            "nullable": true,
            "example": "1234567",
            "description": "Restaurant Id of the order."
          },
          "reason": {
            "type": "string",
            "example": "front_line_reason_food_quality_cold_crushed_spilled",
            "description": "Scoober contact reason for this ticket."
          }
        }
      },
      "CreateTicketModel": {
        "type": "object",
        "description": "Information needed to create a ticket on the Just Eat Zendesk instance for a Scoober delivery support incident",
        "required": [
          "description",
          "externalId",
          "reason",
          "responseUrl",
          "subject"
        ],
        "properties": {
          "subject": {
            "type": "string",
            "example": "Scoober Test",
            "description": "Subject of the ticket."
          },
          "description": {
            "type": "string",
            "example": "Scoober Test",
            "description": "Description (main body) of the ticket."
          },
          "country": {
            "type": "string",
            "nullable": true,
            "example": "gb",
            "description": "2 letter ISO code of the country this pertains to. Will be inferred from queried API."
          },
          "language": {
            "type": "string",
            "nullable": true,
            "example": "en",
            "description": "2 letter ISO code of the language for the ticket. Will be inferred from queried API."
          },
          "requesterEmail": {
            "type": "string",
            "nullable": true,
            "example": "requester@scoober.com",
            "description": "Ticket requester e-mail address."
          },
          "requesterName": {
            "type": "string",
            "nullable": true,
            "example": "scoober",
            "description": "Ticket requester name."
          },
          "reason": {
            "type": "string",
            "example": "delivery__spilled_food",
            "description": "Scoober reason code for the creation of this ticket."
          },
          "city": {
            "type": "string",
            "nullable": true,
            "example": "london",
            "description": "City of the delivery in question of this ticket."
          },
          "courier": {
            "type": "string",
            "nullable": true,
            "example": "scoober",
            "description": "Courier who created this query."
          },
          "externalId": {
            "type": "string",
            "example": "slack:1",
            "description": "We will note this as incident/ticket/query ID used by the calling party and include it for their future reference."
          },
          "responseUrl": {
            "type": "string",
            "example": "https://zenbox-api.bob.external.tkwy-staging.io/ticket/response",
            "description": "Where should we respond to with progress on this request?"
          },
          "scooberJobId": {
            "type": "string",
            "nullable": true,
            "example": "1234",
            "description": "Scoober job ID for this order."
          },
          "senderType": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "example": [
              "internal"
            ],
            "description": "Scoober transmits a sender type value."
          },
          "status": {
            "type": "string",
            "nullable": true,
            "example": "new",
            "description": "Ticket status to set on creation of this ticket. Possible values: New, pending, solved."
          }
        }
      },
      "search-address": {
        "type": "object",
        "description": "The address of the restaurant",
        "properties": {
          "FirstLine": {
            "type": "string",
            "description": "First line of the restaurant's address"
          },
          "Postcode": {
            "type": "string",
            "description": "Postcode of the restaurant"
          },
          "City": {
            "type": "string",
            "description": "City the restaurant is in"
          },
          "Latitude": {
            "format": "double",
            "type": "number",
            "description": "Latitude of the restaurant"
          },
          "Longitude": {
            "format": "double",
            "type": "number",
            "description": "Longitude of the restaurant"
          }
        }
      },
      "search-restaurant": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "double",
            "type": "number",
            "description": "The id of the restaurant"
          },
          "Name": {
            "type": "string",
            "description": "The name of the restaurant"
          },
          "UniqueName": {
            "type": "string",
            "description": "The unique name of the restaurant on Just Eat"
          },
          "Address": {
            "$ref": "#/components/schemas/search-address",
            "description": "The restaurant's address"
          },
          "Url": {
            "type": "string",
            "description": "The URL of the restaurant's menu page"
          },
          "IsOpenNowForDelivery": {
            "type": "boolean",
            "description": "Indicates the restaurant is now open for delivery"
          },
          "DriveDistance": {
            "format": "double",
            "type": "number",
            "description": "The distance to drive from restaurant to delivery location in miles"
          },
          "DriveInfoCalculated": {
            "type": "boolean",
            "description": "Flag indicating that the driving information has been calculated"
          },
          "DeliveryEtaMinutes": {
            "$ref": "#/components/schemas/delivery-eta-minutes",
            "description": "Information about the approximate delivery time"
          }
        }
      },
      "search-restaurants": {
        "type": "object",
        "properties": {
          "Restaurants": {
            "type": "array",
            "description": "A list of restaurants matching the search criteria",
            "items": {
              "$ref": "#/components/schemas/search-restaurant"
            }
          }
        }
      },
      "AutoCompleteSearchResponse": {
        "type": "object",
        "properties": {
          "terms": {
            "uniqueItems": false,
            "type": "array",
            "description": "Ordered list of suggested term completions",
            "maxItems": 10,
            "items": {
              "$ref": "#/components/schemas/AutoCompleteSearchResponseItem"
            }
          }
        },
        "example": {
          "terms": [
            {
              "term": "Pizza Palace",
              "classification": "Restaurant"
            },
            {
              "term": "Pizza",
              "classification": "Cuisine"
            },
            {
              "term": "Large Hawaiian",
              "classification": "Dish"
            }
          ]
        }
      },
      "AutoCompleteSearchResponseItem": {
        "type": "object",
        "properties": {
          "term": {
            "type": "string",
            "description": "Auto-completed search term"
          },
          "classification": {
            "type": "string",
            "description": "Grouping to which term belongs",
            "enum": [
              "Restaurant",
              "Cuisine",
              "Dish"
            ]
          }
        },
        "example": {
          "term": "Pizza Palace",
          "classification": "Restaurant"
        }
      },
      "PredictiveSearchRequest": {
        "type": "object",
        "required": [
          "searchTerm",
          "restaurants"
        ],
        "properties": {
          "searchTerm": {
            "type": "string",
            "description": "User's search term - at least one character required",
            "minLength": 1
          },
          "location": {
            "type": "string",
            "description": "User's location"
          },
          "restaurants": {
            "uniqueItems": true,
            "type": "array",
            "description": "Restaurants that can be included in the search",
            "maxItems": 2000,
            "items": {
              "$ref": "#/components/schemas/RequestRestaurant"
            }
          }
        },
        "example": {
          "searchTerm": "Pizza",
          "location": "BS1",
          "restaurants": [
            {
              "restaurantId": "1234"
            },
            {
              "restaurantId": "1235",
              "menuId": "678"
            }
          ]
        }
      },
      "PredictiveSearchResponse": {
        "type": "object",
        "properties": {
          "suggestions": {
            "uniqueItems": false,
            "type": "array",
            "description": "Ordered list of suggested term completions",
            "maxItems": 10,
            "items": {
              "$ref": "#/components/schemas/PredictiveSearchResponseItem"
            }
          }
        },
        "example": {
          "suggestions": [
            {
              "suggestedTerm": "Pizza Palace",
              "category": "Restaurant"
            },
            {
              "suggestedTerm": "Pizza",
              "category": "Cuisine"
            },
            {
              "suggestedTerm": "Large Hawaiian",
              "category": "Dish"
            }
          ]
        }
      },
      "PredictiveSearchResponseItem": {
        "type": "object",
        "properties": {
          "suggestedTerm": {
            "type": "string",
            "description": "Suggested search term"
          },
          "category": {
            "type": "string",
            "description": "Grouping to which term belongs",
            "enum": [
              "Restaurant",
              "Cuisine",
              "Dish"
            ]
          }
        },
        "example": {
          "suggestedTerm": "Pizza Palace",
          "category": "Restaurant"
        }
      },
      "RequestRestaurant": {
        "required": [
          "restaurantId"
        ],
        "type": "object",
        "properties": {
          "restaurantId": {
            "type": "string",
            "description": "Id of the restaurant"
          },
          "menuId": {
            "type": "string",
            "description": "Id of the restaurant's menu"
          }
        }
      },
      "RestaurantSearchProduct": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "description": "The id of the product"
          },
          "fullName": {
            "type": "string",
            "description": "The full name of the product"
          },
          "price": {
            "type": "number",
            "description": "The price of the product"
          }
        },
        "example": {
          "productId": "289347",
          "fullName": "Chicken Korma",
          "price": 799
        }
      },
      "RestaurantSearchResponse": {
        "type": "object",
        "properties": {
          "restaurants": {
            "uniqueItems": false,
            "type": "array",
            "description": "Ordered list of restaurants",
            "items": {
              "$ref": "#/components/schemas/RestaurantSearchResponseItem"
            }
          }
        },
        "example": {
          "restaurants": [
            {
              "restaurantId": "110230",
              "isSponsored": true,
              "products": [
                {
                  "productId": "289347",
                  "fullName": "Chicken Korma",
                  "price": 799
                },
                {
                  "productId": "563454",
                  "fullName": "Chicken Madras",
                  "price": 699
                }
              ]
            },
            {
              "restaurantId": "229390",
              "isSponsored": false,
              "products": [
                {
                  "productId": "67832",
                  "fullName": "BBQ Chicken Pizza",
                  "price": 1099
                },
                {
                  "productId": "23567",
                  "fullName": "Chicken Burger",
                  "price": 899
                }
              ]
            }
          ]
        }
      },
      "RestaurantSearchResponseItem": {
        "type": "object",
        "properties": {
          "restaurantId": {
            "type": "string",
            "description": "The id of the restaurant"
          },
          "isSponsored": {
            "type": "boolean",
            "description": "Flag to indicate if the restaurant is sponsored, so has been promoted to the top of the results"
          },
          "products": {
            "uniqueItems": false,
            "type": "array",
            "description": "Ordered list of products available from the restaurant which matched the search term",
            "items": {
              "$ref": "#/components/schemas/RestaurantSearchProduct"
            }
          }
        },
        "example": {
          "restaurantId": "110230",
          "isSponsored": false,
          "products": [
            {
              "productId": "289347",
              "fullName": "Chicken Korma",
              "price": 799
            },
            {
              "productId": "563454",
              "fullName": "Chicken Madras",
              "price": 699
            }
          ]
        }
      },
      "SkipMenuEditorGatewayRequest": {
        "type": "object",
        "description": "GraphQL request",
        "properties": {
          "query": {
            "description": "GraphQL statement",
            "type": "string"
          },
          "variables": {
            "description": "variables used in query",
            "type": "object"
          }
        }
      },
      "SkipMenuEditorGatewayResponse": {
        "type": "object",
        "description": "GraphQL response",
        "properties": {
          "data": {
            "description": "GraphQL data response",
            "type": "object"
          },
          "errors": {
            "description": "GraphQL errors response",
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        }
      },
      "Takeaway400ErrorResponse": {
        "type": "object",
        "description": "A HTTP 400 error response",
        "properties": {
          "errorCode": {
            "type": "string",
            "description": "A value that helps identify this response back to logs, so we can easily find this specific fault."
          },
          "description": {
            "type": "string",
            "description": "A description of the error."
          },
          "validationErrors": {
            "type": "object",
            "description": "Validation error messages for each field.",
            "additionalProperties": {
              "type": "object",
              "description": "Field name that contains error.",
              "properties": {
                "errors": {
                  "type": "array",
                  "description": "Error explanation.",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "Takeaway4XXErrorResponse": {
        "type": "object",
        "description": "A HTTP 4xx error response",
        "properties": {
          "errorCode": {
            "type": "string",
            "description": "A value that helps identify this response back to logs, so we can easily find this specific fault."
          },
          "description": {
            "type": "string",
            "description": "A description of the error."
          }
        }
      },
      "Takeaway500ErrorResponse": {
        "type": "object",
        "description": "A HTTP 500 error response",
        "properties": {
          "errorCode": {
            "type": "string",
            "description": "A value that helps identify this response back to logs, so we can easily find this specific fault."
          },
          "description": {
            "type": "string",
            "description": "A description of the error."
          }
        }
      },
      "AuthorizeResponse": {
        "type": "object",
        "description": "The response object for the `authorize` endpoint."
      },
      "TokenRequest": {
        "type": "object",
        "description": "The request object for retrieving an access token.",
        "properties": {
          "grant_type": {
            "type": "string",
            "nullable": false,
            "description": "OAuth grant type. Value MUST be set to `authorization_code`."
          },
          "code": {
            "type": "string",
            "nullable": false,
            "description": "The authorisation code received from the authorisation server."
          },
          "redirect_uri": {
            "type": "string",
            "nullable": false,
            "description": "URI to form the path for a redirect response."
          },
          "client_id": {
            "type": "string",
            "nullable": true,
            "description": "Only required if the client is not authenticating with the same authorisation server."
          },
          "code_verifier": {
            "type": "string",
            "nullable": true,
            "description": "High-entropy cryptographic random string with a minimum length of 43 characters and a maximum length of 128 characters."
          }
        },
        "example": {
          "grant_type": "authorization_code",
          "code": "D4DE0039-8193-48A1-BA2D-49E6F0C8ADFF",
          "redirect_uri": "example.com",
          "client_id": "example_clientid",
          "code_verifier": "kPjhpIVnKGBq3YvnjLDBo65pi91YI4ReJoRV1WMryJa"
        }
      },
      "TokenRequestErrorResponse": {
        "type": "object",
        "description": "The error response object for token request endpoint.",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error code. Can be one of: `invalid_request`, `invalid_client`, `invalid_grant`, `unauthorized_client`, `unsupported_grant_type`, `invalid_scope`."
          }
        },
        "example": {
          "error": "invalid_request"
        }
      },
      "TokenRequestSuccessResponse": {
        "type": "object",
        "description": "The success response object for token request endpoint.",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "The JWT access token."
          }
        },
        "example": {
          "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        }
      },
      "WellKnownConfigurationResponse": {
        "type": "object",
        "description": "The success response object for the well-known endpoint.",
        "properties": {
          "issuer": {
            "type": "string",
            "nullable": false,
            "description": "URL used to identify the issuer."
          },
          "authorization_endpoint": {
            "type": "string",
            "nullable": false,
            "description": "URL of the authorisation endpoint."
          },
          "token_endpoint": {
            "type": "string",
            "nullable": false,
            "description": "URL of the token endpoint."
          },
          "userinfo_endpoint": {
            "type": "string",
            "nullable": false,
            "description": "URL of the user info endpoint."
          },
          "jwks_uri": {
            "type": "string",
            "nullable": false,
            "description": "URL of the JSON Web Key Set. This contains the signing keys used to validate signatures."
          },
          "scopes_supported": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "description": "List containing the scope values that the server supports."
          },
          "response_types_supported": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "description": "List containing the OAuth 2.0 `response_type` values which are supported."
          },
          "token_endpoint_auth_methods_supported": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "description": "List containing the Client Authentication methods supported by this Token Endpoint."
          }
        },
        "example": {
          "issuer": "http://uk-tokenweb.cwa.je-labs.com",
          "authorization_endpoint": "http://uk-tokenweb.cwa.je-labs.com/applications/tokenweb/authorize",
          "token_endpoint": "http://uk-tokenweb.cwa.je-labs.com/applications/tokenweb/token",
          "userinfo_endpoint": "http://uk-tokenweb.cwa.je-labs.com/userinfo",
          "jwks_uri": "http://uk-tokenweb.cwa.je-labs.com/.well-known/jwks.json",
          "scopes_supported": [
            ""
          ],
          "response_types_supported": [
            "code"
          ],
          "token_endpoint_auth_methods_supported": [
            "client_secret_basic"
          ]
        }
      },
      "CallerInformationCallRequest": {
        "type": "object",
        "properties": {
          "accountSid": {
            "type": "string",
            "description": "The SID of the Twilio Account that created the Call resource"
          },
          "apiVersion": {
            "type": "string",
            "description": "The Twilio API version used to start a new TwiML session"
          },
          "called": {
            "type": "string",
            "description": "The caller identifier"
          },
          "calledCountry": {
            "type": "string",
            "description": "The country of the called sender"
          },
          "calledState": {
            "type": "string",
            "description": "The state of the called sender"
          },
          "caller": {
            "type": "string",
            "description": "The name or phone number of the caller"
          },
          "callerCountry": {
            "type": "string",
            "description": "The country of the called sender"
          },
          "callSid": {
            "type": "string",
            "description": "A unique identifier for the call, generated by Twilio"
          },
          "callStatus": {
            "type": "string",
            "description": "A descriptive status for the call"
          },
          "digits": {
            "type": "string",
            "description": "The digits that caller entered on their keypad"
          },
          "direction": {
            "type": "string",
            "description": "A string describing the direction of the call"
          },
          "from": {
            "type": "string",
            "description": "The phone number or client identifier to use as the caller id"
          },
          "fromCountry": {
            "type": "string",
            "description": "The country of the called sender"
          },
          "to": {
            "type": "string",
            "description": "The phone number, SIP address, or client identifier to call"
          },
          "toCountry": {
            "type": "string",
            "description": "The country of the recipient"
          },
          "finishedOnKey": {
            "type": "string",
            "description": "Gets or sets a value that caller pressed to submit their digits input"
          }
        }
      },
      "CallReceivedOrUpdatedModel": {
        "type": "object",
        "properties": {
          "callSid": {
            "type": "string",
            "description": "UID used by Twilio, identifying a phone call"
          },
          "callerId": {
            "type": "string",
            "description": "Caller's phone number"
          },
          "orderId": {
            "type": "string",
            "description": "Legacy/friendly Order ID"
          },
          "callStep": {
            "type": "string",
            "description": "CallStep"
          },
          "queryType": {
            "type": "string",
            "description": "QueryType"
          },
          "resolution": {
            "type": "string",
            "description": "Resolution"
          },
          "tags": {
            "type": "string",
            "description": "Open-ended tag collection, for on-the-fly adjustment of data slicing; comma separated."
          },
          "status": {
            "type": "string",
            "description": "Contains the status of the order, if known"
          }
        }
      },
      "TwiMLResult": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "readOnly": true,
            "description": "set of special TwiML instructions defined by Twilio that will be executed"
          }
        }
      },
      "TwilioDebuggingEventRequest": {
        "type": "object",
        "description": "Information about errors and warnings which could occur on Twilio account",
        "properties": {
          "sid": {
            "type": "string",
            "example": "NOxxxxx",
            "description": "Unique identifier of the Debugger event"
          },
          "accountSid": {
            "type": "string",
            "example": "ACxxxxxxxxxxxxxxxxxxxxxxxx",
            "description": "Unique identifier of the account that generated the Debugger event"
          },
          "parentAccountSid": {
            "type": "string",
            "example": "ACxxxxxxxxxxxxxxxxxxxxxxxx",
            "description": "Unique identifier of the Parent Account. This parameter only exists if the above account is a sub account"
          },
          "timestamp": {
            "type": "string",
            "example": "2020-01-01T23:28:54.000Z",
            "description": "Time of occurrence of the Debugger event"
          },
          "level": {
            "type": "string",
            "example": "Error",
            "description": "Severity of the Debugger event. Possible values are Error and Warning"
          },
          "payloadType": {
            "type": "string",
            "example": "application/json",
            "description": "Type of the payload"
          },
          "payload": {
            "type": "string",
            "example": "{resource_sid: CAxxxx, service_sid: SSxxxx, error_code: 13227 ,webhook: null, more_info: {  Msg : No International Permission. , ErrorCode : 13227 , LogLevel : WARN }}",
            "description": "JSON data specific to the Debugging Event. More details - https://www.twilio.com/docs/usage/troubleshooting/debugging-event-webhooks#payload"
          }
        }
      },
      "CodeType": {
        "type": "integer",
        "description": "",
        "x-enumNames": [
          "Unknown",
          "DynamicSingleUse",
          "StaticMultipleUse"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "ConsumerStatus": {
        "type": "integer",
        "description": "",
        "x-enumNames": [
          "Undefined",
          "NewConsumer",
          "ReturnConsumer"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "DayOfWeek": {
        "type": "integer",
        "description": "",
        "x-enumNames": [
          "Sunday",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "Discount": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "VoucherType": {
            "$ref": "#/components/schemas/VoucherType",
            "description": "The type of discount"
          },
          "Amount": {
            "type": "number",
            "format": "decimal",
            "description": "The amount of discount"
          }
        }
      },
      "GroupType": {
        "type": "integer",
        "description": "",
        "x-enumNames": [
          "Unknown",
          "DynamicSingleUse",
          "StaticMultipleUse"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "OrderNumberValidity": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ComparisonOperator": {
            "type": "string",
            "nullable": true,
            "description": "The comparison operator (e.g. >, <, ==)"
          },
          "NumberOfOrders": {
            "type": "integer",
            "format": "int32",
            "description": "The number of orders for the comparison"
          }
        }
      },
      "ServiceType": {
        "type": "integer",
        "description": "",
        "x-enumNames": [
          "Collection",
          "Delivery"
        ],
        "enum": [
          1,
          2
        ]
      },
      "Validity": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "StartDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The start date of the voucher"
          },
          "EndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The end date of the voucher"
          },
          "Platform": {
            "type": "string",
            "nullable": true,
            "description": "The order platform using the voucher"
          },
          "PostCode": {
            "type": "string",
            "nullable": true,
            "description": "The post code applicable to the order"
          },
          "MinimumSpend": {
            "type": "number",
            "format": "decimal",
            "nullable": true,
            "description": "The minimum spend to use the voucher"
          },
          "RestaurantIds": {
            "type": "string",
            "nullable": true,
            "description": "A comma separate list of restaurant ids"
          },
          "ServiceType": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ServiceType"
              }
            ],
            "description": "The service type for the voucher (e.g. Delivery, collection)"
          },
          "RestrictedToConsumerStatus": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ConsumerStatus"
              }
            ],
            "description": "Whether the voucher is restricted to new customers, returning customers etc"
          },
          "PaymentOptionTypes": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            },
            "description": "The payment options the voucher is restricted to"
          },
          "ValidFromHour": {
            "type": "string",
            "format": "time-span",
            "nullable": true,
            "description": "Whether time the voucher is valid from"
          },
          "ValidToHour": {
            "type": "string",
            "format": "time-span",
            "nullable": true,
            "description": "Whether time the voucher is valid to"
          },
          "ValidOnDays": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/DayOfWeek"
            },
            "description": "The days of the week the voucher is valid on"
          },
          "OrderNumberValidity": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/OrderNumberValidity"
              }
            ],
            "description": "The number of orders a customer has placed to satisfy the requirements of the voucher"
          },
          "CuisineIds": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            },
            "description": "The cuisine ids the voucher is valid for"
          }
        }
      },
      "Voucher": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32",
            "description": "The voucher id"
          },
          "Code": {
            "type": "string",
            "nullable": true,
            "description": "The voucher code"
          },
          "Created": {
            "type": "string",
            "format": "date-time",
            "description": "The created time (UTC) of the voucher"
          },
          "CreatedBy": {
            "type": "string",
            "nullable": true,
            "description": "The creator of the voucher"
          },
          "Lock": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/VoucherLock"
              }
            ],
            "description": "If the voucher is locked and what it is locked to"
          },
          "CodeType": {
            "$ref": "#/components/schemas/CodeType",
            "description": "The type of voucher code"
          },
          "PaymentOptionTypes": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            },
            "description": "The payment options the voucher is restricted to"
          }
        }
      },
      "VoucherGroup": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32",
            "description": "The Id of the voucher group"
          },
          "Name": {
            "type": "string",
            "nullable": true,
            "description": "The name of the voucher group"
          },
          "Discount": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Discount"
              }
            ],
            "description": "The details of the discount (amount / type etc)"
          },
          "Validity": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Validity"
              }
            ],
            "description": "The parameters that determine the validity of the voucher group"
          },
          "CreatedBy": {
            "type": "string",
            "nullable": true,
            "description": "The creator of the voucher group"
          },
          "Created": {
            "type": "string",
            "format": "date-time",
            "description": "The created time (UTC) of the voucher group"
          },
          "Updated": {
            "type": "string",
            "format": "date-time",
            "description": "The updated time (UTC) of the voucher group"
          },
          "Hidden": {
            "type": "boolean",
            "description": "Whether the voucher group is flagged as hidden"
          },
          "Archived": {
            "type": "boolean",
            "description": "Whether the voucher group is flagged as archived"
          },
          "GroupType": {
            "$ref": "#/components/schemas/GroupType",
            "description": "The type of the voucher group (e.g. Dynamically Created Single Use)"
          },
          "StaticCode": {
            "type": "string",
            "nullable": true,
            "description": "The static code of the voucher group (will be normalised as part of the creation)"
          },
          "Source": {
            "type": "string",
            "nullable": true,
            "description": "The source system creating the voucher group"
          }
        }
      },
      "VoucherLock": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "CustomerId": {
            "type": "string",
            "nullable": true,
            "description": "The Customer Id the voucher is locked to"
          },
          "OrderId": {
            "type": "string",
            "nullable": true,
            "description": "The Order Id the voucher is locked to"
          },
          "DiscountApplied": {
            "type": "number",
            "format": "decimal",
            "description": "The Discount Applied"
          },
          "Locked": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The UTC date it was locked"
          },
          "Consumed": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The UTC date it was consumed"
          },
          "State": {
            "description": "The current state",
            "$ref": "#/components/schemas/VoucherStates"
          },
          "PostCode": {
            "type": "string",
            "nullable": true,
            "description": "The post code"
          },
          "OrderAmount": {
            "type": "number",
            "format": "decimal",
            "description": "The order amount"
          },
          "Platform": {
            "type": "string",
            "nullable": true,
            "description": "The order platform"
          },
          "RestaurantId": {
            "type": "integer",
            "format": "int32",
            "description": "The restaurant id"
          },
          "ServiceType": {
            "nullable": true,
            "description": "The service type (i.e. Delivery, Collection)",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ServiceType"
              }
            ]
          },
          "ConsumerStatus": {
            "nullable": true,
            "description": "The Customer Status (i.e. new customers, returning customers etc)",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ConsumerStatus"
              }
            ]
          },
          "PaymentOptionType": {
            "type": "string",
            "nullable": true,
            "description": "The payment option"
          },
          "OrderPlacedDateWithUtcOffset": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The order placed date"
          },
          "DeliveryFee": {
            "type": "number",
            "format": "decimal",
            "description": "The delivery fee"
          },
          "NumberOfOrders": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "description": "The number of orders"
          },
          "CuisinesIds": {
            "type": "array",
            "nullable": true,
            "description": "The number of orders",
            "items": {
              "type": "string"
            }
          },
          "VoucherId": {
            "type": "integer",
            "format": "int32",
            "description": "The voucher id"
          }
        }
      },
      "VoucherStates": {
        "type": "integer",
        "description": "",
        "x-enumNames": [
          "Available",
          "Locked",
          "Consumed"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "VoucherType": {
        "type": "integer",
        "description": "Type of voucher",
        "x-enumNames": [
          "Absolute",
          "Percentage",
          "DeliveryFee"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "400ZoneProfileErrorResponse": {
        "type": "object",
        "description": "The error object returned when an operation fails",
        "properties": {
          "error": {
            "description": "Error Title",
            "type": "string",
            "example": "Invalid Request"
          },
          "message": {
            "description": "Error Message Text",
            "type": "string",
            "example": "Invalid Request"
          }
        }
      },
      "401ZoneProfileErrorResponse": {
        "type": "object",
        "description": "The error object returned when an operation fails",
        "properties": {
          "error": {
            "description": "Error Title",
            "type": "string",
            "example": "Unauthorized Request"
          },
          "message": {
            "description": "Error Message Text",
            "type": "string",
            "example": "Unauthorized Request"
          }
        }
      },
      "404ZoneProfileErrorResponse": {
        "type": "object",
        "description": "The error object returned when an operation fails",
        "properties": {
          "error": {
            "description": "Error Title",
            "type": "string",
            "example": "Zone Profile Settings not found"
          },
          "message": {
            "description": "Error Message Text",
            "type": "string",
            "example": "Zone Profile Settings not found"
          }
        }
      },
      "500ZoneProfileErrorResponse": {
        "type": "object",
        "description": "The error object returned when an operation fails",
        "properties": {
          "error": {
            "description": "Error Title",
            "type": "string",
            "example": "Internal Server Error"
          },
          "message": {
            "description": "Error Message Text",
            "type": "string",
            "example": "Internal Server Error"
          }
        }
      },
      "BenderFlexStateType": {
        "type": "string",
        "description": "<p>The flex state type changes according to the exponential moving average and is used as a reference to bring more couriers to suffice the demand in a given delivery zone.</p> <p>If the flex state type is \"Off\", it means no shifts will be offered for the delivery zone.</p> <p>If the state is \"CLOSED\", only scheduled shifts will be allowed for the delivery zone.</p> <p>If the state is \"SEEKING\", the shift offers are going to be made across the courier network in order to suffice the current demand.</p> <p>If the state is \"OPEN\", it means demand is high and couriers from all over the courier network are allowed to create shifts for themselves to suffice the current demand.</p> <p>If the state is \"CODE_RED\", it means not only can everyone create shifts for themselves for the delivery zone but also couriers from other delivery zones might reallocate to help suffice the demand of that particular delivery zone.</p>",
        "enum": [
          "CODE_RED",
          "OPEN",
          "SEEKING",
          "CLOSED",
          "Off"
        ]
      },
      "ZoneProfile": {
        "type": "object",
        "description": "The zone profile object for a given delivery zone.",
        "properties": {
          "averageAssignableJobLoad": {
            "type": "number",
            "format": "double",
            "description": "The burden over the couriers in a delivery zone. The average assignable job load is calculated by the sum of all jobs assigned to the couriers divided by the delivery zone's total assignable courier count.",
            "example": 0.7
          },
          "bender": {
            "type": "object",
            "description": "Bender On/Off object",
            "properties": {
              "enabled": {
                "type": "boolean",
                "description": "Bender Enabled/Disabled status"
              }
            }
          },
          "ema": {
            "type": "number",
            "format": "integer",
            "description": "The simple moving average is the usage for a given delivery zone, which is calculated by using the sum of all on-shift utilisation ( percentage of time a courier spends working on orders during their shift ) at the time, divided by the number of time periods gathered from all data points. Differently from simple moving average, exponential moving average also represents the usage however its equation places a greater weight on the most recent data points.",
            "example": 70
          },
          "flexStateType": {
            "$ref": "#/components/schemas/BenderFlexStateType",
            "description": "The flex state type changes according to the exponential moving average and is used as a reference to bring more couriers to suffice the demand in a given delivery zone."
          },
          "zoneId": {
            "type": "string",
            "description": "Zone profile delivery zone id.",
            "example": "53c3afb5-fcs5-4941-be6d-2179f812sc8d"
          }
        }
      }
    },
    "responses": {
      "401UnauthorizedResponse": {
        "description": "Unauthorized. The client did not provide an authentication token or the token was invalid",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/4XXErrorSchema"
            },
            "example": {
              "faultId": "25bbe062-c53d-4fbc-9d6c-3df6127b94fd",
              "traceId": "H3TKh4QSJUSwVBCBqEtkKw==",
              "errors": [
                {
                  "errorCode": "ERR401",
                  "description": "Unauthorized. The client did not provide an authentication token or the token was invalid."
                }
              ]
            }
          }
        }
      },
      "403ForbiddenResponse": {
        "description": "Forbidden. The client is not allowed to perform this action",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/4XXErrorSchema"
            },
            "example": {
              "faultId": "25bbe062-c53d-4fbc-9d6c-3df6127b94fd",
              "traceId": "H3TKh4QSJUSwVBCBqEtkKw==",
              "errors": [
                {
                  "description": "Forbidden"
                }
              ]
            }
          }
        }
      },
      "500ErrorResponse": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/500ErrorSchema"
            },
            "example": {
              "faultId": "25bbe062-c53d-4fbc-9d6c-3df6127b94fd",
              "traceId": "H3TKh4QSJUSwVBCBqEtkKw==",
              "errors": [
                {
                  "description": "Internal Server Error"
                }
              ]
            }
          }
        }
      },
      "503ServiceUnavailableResponse": {
        "description": "Service Unavailable",
        "headers": {
          "Retry-After": {
            "$ref": "#/components/headers/Retry-After"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/5XXErrorSchema"
            },
            "example": {
              "faultId": "25bbe062-c53d-4fbc-9d6c-3df6127b94fd",
              "traceId": "H3TKh4QSJUSwVBCBqEtkKw==",
              "errors": [
                {
                  "description": "Service Unavailable"
                }
              ]
            }
          }
        }
      }
    },
    "headers": {
      "ExpiresAfter": {
        "description": "date in UTC when token expires",
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "Retry-After": {
        "description": "The Retry-After HTTP response header indicates how long the User Agent should wait before making a follow-up request",
        "schema": {
          "type": "string"
        },
        "required": false
      }
    },
    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization",
        "description": "APIs for delivery partners require an API key that will have been issued to you."
      },
      "basic_auth": {
        "type": "http",
        "scheme": "basic",
        "description": "A few services allow the use of basic authentication when a partner doesn't support OAuth based authentication."
      },
      "Bearer": {
        "type": "http",
        "description": "Bearer token authentication using a JSON Web Token (JWT).",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "justeat_adfs": {
        "type": "openIdConnect",
        "description": "ADFS authentication provider for internal Just Eat tools.",
        "openIdConnectUrl": "https://adfs.just-eat.com/adfs/.well-known/openid-configuration"
      },
      "restaurantsignup_jwt": {
        "type": "http",
        "scheme": "bearer",
        "description": "Bearer token authentication using a JSON Web Token (JWT), used by the restaurant sign up system",
        "bearerFormat": "JWT token with payload `RestaurantId` and Role `[RestaurantRead | VerifyEmail | RestaurantWrite | FullAccess | DocumentRead]`"
      }
    }
  },
  "x-origin-servers": [
    {
      "url": "https://uk.api.just-eat.io",
      "description": "Production URL for the UK API"
    },
    {
      "url": "https://i18n.api.just-eat.io",
      "description": "Production URL for the DK, ES, IE, IT and NO API"
    },
    {
      "url": "https://aus.api.just-eat.io",
      "description": "Production URL for the AU and NZ API"
    }
  ]
}