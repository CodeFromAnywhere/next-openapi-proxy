{
  "openapi": "3.0.3",
  "info": {
    "title": "Stellastra",
    "version": "1.0",
    "description": "Stellastra makes it easy to get reviews for your cybersecurity solution in real-time with its platform-agnostic REST API.",
    "termsOfService": "https://stellastra.com/terms-and-conditions",
    "contact": {
      "name": "Stellastra",
      "url": "https://stellastra.com/contact-us",
      "email": "support@stellastra.com"
    },
    "x-logo": {
      "url": "https://res.cloudinary.com/dnutsfp7d/image/upload/v1666387612/Stellastra_iukmts.svg"
    }
  },
  "servers": [
    {
      "description": "Proxy server",
      "url": "https://openapi.actionschema.com/stellastracom"
    }
  ],
  "paths": {
    "/post-review": {
      "summary": "Only POST",
      "description": "import responses \n\nbody = { \nuser_email = \"john.smith@tortosieofdestiny.co.uk\",\nuser_name = \"John\",\nstar_rated_color = \"#e7711b\",\n} \n\ndestination = \"https://stellastra.com/api/post-review\" \nyour_auth_email = \"john.smith@yourcompany.com\" \nkey = \"b371880dc4cc9f19dcd7241bb1aad9cc2700ab113735f45f50835785d65be292f4b3376a0ee0\"\n\nresponse = requests.post(destination, auth=(your_auth_email, key), data=body)",
      "post": {
        "requestBody": {
          "description": "The request body requires the user_email and rating. The parameter use_name is optional. ",
          "content": {
            "application/json": {
              "schema": {
                "description": "The user_email must use a professional domain, free domains are not supported. ",
                "required": [
                  "user_email",
                  "rating"
                ],
                "type": "object",
                "properties": {
                  "user_email": {
                    "type": "string",
                    "example": "johnsmith@usercompanyxyz.com"
                  },
                  "rating": {
                    "type": "integer",
                    "example": 5
                  },
                  "user_name": {
                    "type": "string",
                    "example": "John"
                  }
                }
              }
            }
          },
          "required": true,
          "x-last-modified": 1669833477910
        },
        "tags": [],
        "parameters": [
          {
            "deprecated": false,
            "example": {
              "user_email": "johnsmith@companyxyz.com"
            },
            "name": "user_email",
            "description": "User's email to which the review verification will be sent. ",
            "schema": {
              "description": "User's email must exist and must not use a professional domain (I.E., not from a free service).",
              "type": "string"
            },
            "in": "query",
            "required": true,
            "allowEmptyValue": false,
            "x-last-modified": 1669824515109
          },
          {
            "deprecated": false,
            "example": {
              "user_name": "John"
            },
            "name": "user_name",
            "description": "The user's name, defaults to empty string \"\".  Thus, if this is omitted, the email to the user will not use the user's name. ",
            "schema": {
              "type": "string"
            },
            "in": "query",
            "required": false,
            "allowEmptyValue": true,
            "x-last-modified": 1669823242831
          },
          {
            "deprecated": false,
            "example": {
              "rating": 5
            },
            "name": "rating",
            "description": "The user's star rating, must be a single integer from [1, 2, 3, 4, 5]",
            "schema": {
              "enum": [
                1,
                2,
                3,
                4,
                5
              ],
              "type": "integer"
            },
            "in": "query",
            "required": true,
            "allowEmptyValue": false,
            "x-last-modified": 1669823314043
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "example": {
                    "data": "Review posted successfully"
                  },
                  "properties": {
                    "data": {
                      "type": "string",
                      "example": "Review posted successfully"
                    }
                  }
                }
              }
            },
            "description": "A response code of 200 means the request was succesful, and the user has been sent an email confirming their review.",
            "x-last-modified": 1669809732680,
            "headers": {},
            "links": {}
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "example": {
                    "data": "'user_email' is missing"
                  },
                  "properties": {
                    "data": {
                      "type": "string",
                      "example": "'user_email' is missing"
                    }
                  }
                }
              }
            },
            "description": "A status code of 400 is returned when a required parameter is mising, such as 'rating' or 'user_email'.",
            "x-last-modified": 1669809863611
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "This can appear because the authorization header is missing or malformed, or becuse the auth email and key pair is not authorized.",
                  "type": "object",
                  "example": {
                    "data": "Not authorized, authorization header missing or malformed"
                  },
                  "properties": {
                    "data": {
                      "type": "string",
                      "example": "Not authorized, authorization header missing or malformed"
                    }
                  }
                }
              }
            },
            "description": "This can appear because the authorization header is missing or malformed, or because the auth email and key pair is not authorized.",
            "x-last-modified": 1669809757498
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "The 403 response can have many detailed response messages related to the user's email address validation",
                  "type": "object",
                  "example": {
                    "data": "The syntax of the user's email is invalid."
                  },
                  "properties": {
                    "data": {
                      "type": "string",
                      "example": "The syntax of the user's email is invalid."
                    }
                  }
                }
              }
            },
            "description": "The 403 response can have many detailed response messages related to the user's email address validation",
            "x-last-modified": 1669809757498
          }
        },
        "summary": "Posts the user's review to Stellastra",
        "externalDocs": {
          "url": "https://stellastra.com/docs/api"
        }
      },
      "x-last-modified": 1669762885447
    }
  },
  "components": {
    "securitySchemes": {
      "BasicAuth": {
        "scheme": "basic",
        "bearerFormat": "base64(auth_email + \":\" + key)",
        "type": "http",
        "description": "Basic auth header, a base64 encoding of the auth_email and key, with a simple colon separating. \n\n1. base64(auth_email + \":\" + key)\n2. base64(\"johnsmith@yourcompany.com:77rOjc2Y2UyYTliMDFjMTY2ODMyNTIyYjAyNDE4YjRi)\n3. ImpvaG5zbWl0aEB5b3VyY29tcGFueS5jb206NzdyT2pjMlkyVXlZVGxpTURGak1UWTJPRE15TlRJeVlqQXlOREU0WWpSaQ==\n\nThis may already be handled by your HTTPS request library, for example, the Python \"requests\" library allows for , auth=(admin_email, key), while Axios for Node JS allows auth to be specified as {auth:{username: your_auth_email, password: key}}. ",
        "x-last-modified": 1669824185668
      }
    },
    "schemas": {},
    "headers": {},
    "responses": {},
    "parameters": {}
  },
  "security": [
    {
      "BasicAuth": []
    }
  ],
  "externalDocs": {
    "description": "Stellastra is a simple API which allows you to easily generate star ratings and reviews for your cybersecurity solution.",
    "url": "https://stellastra.com/docs/api"
  },
  "tags": [],
  "x-origin-servers": [
    {
      "url": "https://stellastra.com/api/",
      "description": "Stellastra is a simple API which allows you to easily generate star ratings and reviews for your cybersecurity solution.",
      "x-last-modified": 1669762495839
    }
  ]
}