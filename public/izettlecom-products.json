{
  "openapi": "3.0.1",
  "info": {
    "title": "Product Library API",
    "description": "The Product Library API is used for managing merchant's product information and product images.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "description": "Proxy server",
      "url": "https://openapi.actionschema.com/izettlecom-products"
    }
  ],
  "tags": [
    {
      "name": "taxes",
      "description": "Manage sales tax rates. The endpoints in this group are only supported for organizations from countries that use the sales tax model, which is primarily the USA. These endpoints are not available for organizations in countries that use the value added tax model."
    }
  ],
  "paths": {
    "/organizations/{organizationUuid}/categories/v2": {
      "get": {
        "tags": [
          "categories"
        ],
        "summary": "Retrieve all categories",
        "operationId": "getProductTypes",
        "parameters": [
          {
            "name": "organizationUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of all categories",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ZettleOauth": [
              "READ:PRODUCT"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "categories"
        ],
        "summary": "Create a new category",
        "operationId": "createCategories",
        "parameters": [
          {
            "name": "organizationUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCategoriesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Category created"
          },
          "400": {
            "description": "Category already exists"
          },
          "404": {
            "description": "Organization not found"
          }
        },
        "security": [
          {
            "ZettleOauth": [
              "WRITE:PRODUCT"
            ]
          }
        ]
      }
    },
    "/organizations/{organizationUuid}/categories/v2/{categoryUuid}": {
      "delete": {
        "tags": [
          "categories"
        ],
        "summary": "Delete a category",
        "operationId": "deleteCategory",
        "parameters": [
          {
            "name": "organizationUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "categoryUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Category deleted"
          },
          "404": {
            "description": "Organization not found"
          }
        },
        "security": [
          {
            "ZettleOauth": [
              "WRITE:PRODUCT"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "categories"
        ],
        "summary": "Rename a category",
        "operationId": "renameCategory",
        "parameters": [
          {
            "name": "organizationUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "categoryUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RenameCategoryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Category renamed"
          },
          "400": {
            "description": "Category already exists"
          },
          "404": {
            "description": "Organization not found"
          }
        },
        "security": [
          {
            "ZettleOauth": [
              "WRITE:PRODUCT"
            ]
          }
        ]
      }
    },
    "/organizations/{organizationUuid}/discounts": {
      "get": {
        "tags": [
          "discounts"
        ],
        "summary": "Retrieve all discounts",
        "operationId": "getAllDiscounts",
        "parameters": [
          {
            "name": "organizationUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of all discounts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DiscountResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ZettleOauth": [
              "READ:PRODUCT"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "discounts"
        ],
        "summary": "Create a discount",
        "description": "Creates a single discount entity. The location of the newly created discount will be available in the successful response as a HttpHeaders.LOCATION header",
        "operationId": "createDiscount",
        "parameters": [
          {
            "name": "organizationUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscountRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Discount created",
            "headers": {
              "ETag": {
                "description": "ETag value",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              },
              "Location": {
                "description": "Location of newly created Discount",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ZettleOauth": [
              "WRITE:PRODUCT"
            ]
          }
        ]
      }
    },
    "/organizations/{organizationUuid}/discounts/{discountUuid}": {
      "get": {
        "tags": [
          "discounts"
        ],
        "summary": "Retrieve a single discount",
        "description": "Get the full discount with the provided UUID. The method supports conditional GET through providing a HttpHeaders.IF_NONE_MATCH header. If the conditional prerequisite is fullfilled, the full discount is returned: otherwise a 304 not modified will be returned with an empty body.",
        "operationId": "getDiscount",
        "parameters": [
          {
            "name": "If-None-Match",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organizationUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "discountUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Discount",
            "headers": {
              "ETag": {
                "description": "ETag value",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscountResponse"
                }
              }
            }
          },
          "304": {
            "description": "Not modified"
          },
          "404": {
            "description": "Organization or Discount not found"
          }
        },
        "security": [
          {
            "ZettleOauth": [
              "READ:PRODUCT"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "discounts"
        ],
        "summary": "Update a single discount",
        "description": "Updates a discount entity using JSON merge patch (https://tools.ietf.org/html/rfc7386). This means that only included fields will be changed: null values removes the field on the target entity, and other values updates the field. Conditional updates are supported through the HttpHeaders.IF_MATCH header. If the conditional prerequisite is fullfilled, the discount is updated: otherwise a 412 precondition failed will be returned with an empty body.",
        "operationId": "updateDiscount",
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organizationUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "discountUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscountRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Discount updated",
            "headers": {
              "ETag": {
                "description": "ETag value",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              },
              "Location": {
                "description": "Location of updated Discount",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "412": {
            "description": "Precondition failed: ETag did not match the expected value"
          }
        },
        "security": [
          {
            "ZettleOauth": [
              "WRITE:PRODUCT"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "discounts"
        ],
        "summary": "Delete a single discount ",
        "operationId": "deleteDiscount",
        "parameters": [
          {
            "name": "organizationUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "discountUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Discount deleted"
          },
          "404": {
            "description": "Organization or Discount not found"
          }
        },
        "security": [
          {
            "ZettleOauth": [
              "WRITE:PRODUCT"
            ]
          }
        ]
      }
    },
    "/organizations/{organizationUuid}/import/status": {
      "get": {
        "tags": [
          "import"
        ],
        "summary": "Get status for latest import",
        "operationId": "getLatestImportStatus",
        "parameters": [
          {
            "name": "organizationUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Import status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization or import not found"
          }
        },
        "security": [
          {
            "ZettleOauth": [
              "READ:PRODUCT"
            ]
          }
        ]
      }
    },
    "/organizations/{organizationUuid}/import/status/{importUuid}": {
      "get": {
        "tags": [
          "import"
        ],
        "summary": "Get status for an import",
        "operationId": "getStatusByUuid",
        "parameters": [
          {
            "name": "organizationUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "importUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Import status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization or import not found"
          }
        },
        "security": [
          {
            "ZettleOauth": [
              "READ:PRODUCT"
            ]
          }
        ]
      }
    },
    "/organizations/{organizationUuid}/import/v2": {
      "post": {
        "tags": [
          "import"
        ],
        "summary": "Import library items",
        "description": "Starts a bulk import. The import process will run asynchronously. Only one import process can run at a time. You can check the status of the import using the other endpoints.",
        "operationId": "importLibraryV2",
        "parameters": [
          {
            "name": "organizationUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkImportRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Import status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body or another import already running",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too many import requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ZettleOauth": [
              "WRITE:PRODUCT"
            ]
          }
        ]
      }
    },
    "/organizations/{organizationUuid}/images": {
      "get": {
        "tags": [
          "images"
        ],
        "summary": "Retrieve all library item images",
        "description": "Retrieves all library items images used by the organization, sorted by updated date",
        "operationId": "getAllImageUrls",
        "parameters": [
          {
            "name": "organizationUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of all image urls",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LibraryImagesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ZettleOauth": [
              "READ:PRODUCT"
            ]
          }
        ]
      }
    },
    "/organizations/{organizationUuid}/library": {
      "get": {
        "tags": [
          "library"
        ],
        "summary": "Retrieve the entire library",
        "description": "Will return the entire library for the authenticated user. If size of the library exceeds server preferences (normally 500) or the value of the optional limit parameter, the result will be paginated. Paginated responses return a Link header, indicating the next URI to fetch. The resulting header value will look something like:\n\n<https://products.izettle.com/organizations/self/library?limit=X&offset=Y>; rel=\"next\"\n\nwhere limit is number of items in response, and offset is the current position in pagination. The rel-part in the header is the links relation to the data previously recieved. The idea is that as long as this header is present there are still items remaining to be fetched. When either the header is not present or it's value doesn't contain any \"next\" value, all items have been sent to the client.\n\nNote: The client should NOT try to extract query parameters from the URI, but rather use it as-is for the next request. Also, clients should be perpared that one Link header might contain multiple other IRIs that are not \"next\" (there will never be more than one \"next\" though). See more at:\n\n    IETF: https://tools.ietf.org/html/rfc5988\n    GitHub: https://developer.github.com/guides/traversing-with-pagination/\n\nIf eventLogUuid is provided, the response will only include events affecting the library since that event. Such responses are normally quite small and would be a preferred method for most fat clients after retrieving the initial full library.\n",
        "operationId": "getLibrary",
        "parameters": [
          {
            "name": "organizationUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "eventLogUuid",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 500
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "all",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of library items",
            "headers": {
              "Link": {
                "description": "If the response is paginated this header will contain the URI for the next page. See more at: https://tools.ietf.org/html/rfc5988",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LibraryResponse"
                }
              }
            }
          },
          "412": {
            "description": "Invalid event log uuid. If the eventLogUuid query parameter was provided a 412 response indicates that the number of changes in the product exceeds the limit since that particular event (currently 500 changes). \nWhen this happens, the client should remove the eventLogUuid query parameters and try again."
          }
        },
        "security": [
          {
            "ZettleOauth": [
              "READ:PRODUCT"
            ]
          }
        ]
      }
    },
    "/organizations/{organizationUuid}/products/online/slug": {
      "post": {
        "tags": [
          "products/online"
        ],
        "summary": "Create a product identifier",
        "description": "Creates a unique slug (identifier) for a product. The slug is used to create a product URL",
        "operationId": "createProductSlug",
        "parameters": [
          {
            "name": "organizationUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSlugRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Product slug",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SlugResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ZettleOauth": [
              "READ:PRODUCT"
            ]
          }
        ]
      }
    },
    "/organizations/{organizationUuid}/products/options": {
      "get": {
        "tags": [
          "products"
        ],
        "summary": "Retrieve an aggregate of active Options in the library",
        "operationId": "getAllOptions",
        "parameters": [
          {
            "name": "organizationUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of Options",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VariantOptionsResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ZettleOauth": [
              "READ:PRODUCT"
            ]
          }
        ]
      }
    },
    "/organizations/{organizationUuid}/products/v2/count": {
      "get": {
        "tags": [
          "products"
        ],
        "summary": "Retrieve the count of existing products",
        "operationId": "countAllProducts",
        "parameters": [
          {
            "name": "organizationUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Count of existing products",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductCountResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ZettleOauth": [
              "READ:PRODUCT"
            ]
          }
        ]
      }
    },
    "/organizations/{organizationUuid}/products": {
      "get": {
        "tags": [
          "products"
        ],
        "summary": "Retrieve all products visible in POS",
        "operationId": "getAllProductsInPos",
        "parameters": [
          {
            "name": "organizationUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of products",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ZettleOauth": [
              "READ:PRODUCT"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "products"
        ],
        "summary": "Create a new product",
        "operationId": "createProduct",
        "parameters": [
          {
            "name": "organizationUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "returnEntity",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Product created. It will include the Product in the response only if 'returnEntity' is true",
            "headers": {
              "ETag": {
                "description": "ETag value",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              },
              "Location": {
                "description": "Location of newly created Product",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "ZettleOauth": [
              "WRITE:PRODUCT"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "products"
        ],
        "summary": "Delete a list of products",
        "operationId": "deleteProducts",
        "parameters": [
          {
            "name": "organizationUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "uuid",
            "in": "query",
            "description": "List of product UUIDs to be deleted",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Products deleted"
          }
        },
        "security": [
          {
            "ZettleOauth": [
              "WRITE:PRODUCT"
            ]
          }
        ]
      }
    },
    "/organizations/{organizationUuid}/products/{productUuid}": {
      "get": {
        "tags": [
          "products"
        ],
        "summary": "Retrieve a single product",
        "description": "Get the full product with the provided UUID. The method supports conditional GET through providing a HttpHeaders.IF_NONE_MATCH header. If the conditional prerequisite is fullfilled, the full product is returned, otherwise a 304 not modified will be returned with an empty body.",
        "operationId": "getProduct",
        "parameters": [
          {
            "name": "If-None-Match",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organizationUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "productUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product",
            "headers": {
              "ETag": {
                "description": "ETag value",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponse"
                }
              }
            }
          },
          "304": {
            "description": "Not modified"
          },
          "400": {
            "description": "Malformed ETag"
          },
          "404": {
            "description": "Organization or Product not found"
          }
        },
        "security": [
          {
            "ZettleOauth": [
              "READ:PRODUCT"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "products"
        ],
        "summary": "Delete a single product",
        "operationId": "deleteProduct",
        "parameters": [
          {
            "name": "organizationUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "productUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Product deleted"
          },
          "404": {
            "description": "Organization or Product not found"
          }
        },
        "security": [
          {
            "ZettleOauth": [
              "WRITE:PRODUCT"
            ]
          }
        ]
      }
    },
    "/organizations/{organizationUuid}/products/v2": {
      "get": {
        "tags": [
          "products"
        ],
        "summary": "Retrieve all products visible in POS – v2",
        "operationId": "getAllProductsV2",
        "parameters": [
          {
            "name": "organizationUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "If true, sorts response by created date",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of products",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductResponse"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ZettleOauth": [
              "READ:PRODUCT"
            ]
          }
        ]
      }
    },
    "/organizations/{organizationUuid}/products/v2/{productUuid}": {
      "put": {
        "tags": [
          "products"
        ],
        "summary": "Update a single product",
        "description": "Updates a product entity using JSON merge patch (https://tools.ietf.org/html/rfc7386). This means that only included fields will be changed: null values removes the field on the target entity, and other values updates the field. Conditional updates are supported through the HttpHeaders.IF_MATCH header. If the conditional prerequisite is fullfilled, the product is updated: otherwise a 412 (precondition failed) will be returned with an empty body.",
        "operationId": "updateProduct",
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organizationUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "productUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FullProductUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Product updated",
            "headers": {
              "ETag": {
                "description": "ETag value",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              },
              "Location": {
                "description": "Location of updated product",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "412": {
            "description": "Precondition failed: ETag did not match the expected value"
          }
        },
        "security": [
          {
            "ZettleOauth": [
              "WRITE:PRODUCT"
            ]
          }
        ]
      }
    },
    "/v1/taxes": {
      "get": {
        "tags": [
          "taxes"
        ],
        "summary": "Get all available tax rates",
        "operationId": "getTaxRates",
        "responses": {
          "200": {
            "description": "List of tax rates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaxRatesResponse"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not available outside of countries that use sales tax"
          }
        },
        "security": [
          {
            "ZettleOauth": [
              "READ:PRODUCT"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "taxes"
        ],
        "summary": "Create new tax rates",
        "operationId": "createTaxRates",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxRatesCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Tax rates created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxRatesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Not available outside of countries that use sales tax"
          }
        },
        "security": [
          {
            "ZettleOauth": [
              "WRITE:PRODUCT"
            ]
          }
        ]
      }
    },
    "/v1/taxes/{taxRateUuid}": {
      "get": {
        "tags": [
          "taxes"
        ],
        "summary": "Get a single tax rate",
        "operationId": "getTaxRate",
        "parameters": [
          {
            "name": "taxRateUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Single tax rate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxRate"
                }
              }
            }
          },
          "403": {
            "description": "Not available outside of countries that use sales tax"
          },
          "404": {
            "description": "Tax rate not found"
          }
        },
        "security": [
          {
            "ZettleOauth": [
              "READ:PRODUCT"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "taxes"
        ],
        "summary": "Update a single tax rate",
        "operationId": "updateTaxRate",
        "parameters": [
          {
            "name": "taxRateUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxRateUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated tax rate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxRate"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Not available outside of countries that use sales tax"
          },
          "404": {
            "description": "Tax rate not found"
          }
        },
        "security": [
          {
            "ZettleOauth": [
              "WRITE:PRODUCT"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "taxes"
        ],
        "summary": "Delete a single tax rate",
        "operationId": "deleteTaxRate",
        "parameters": [
          {
            "name": "taxRateUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Tax rate deleted"
          },
          "403": {
            "description": "Not available outside of countries that use sales tax"
          },
          "404": {
            "description": "Tax rate not found"
          }
        },
        "security": [
          {
            "ZettleOauth": [
              "WRITE:PRODUCT"
            ]
          }
        ]
      }
    },
    "/v1/taxes/count": {
      "get": {
        "tags": [
          "taxes"
        ],
        "summary": "Get all tax rates and a count of products associated with each",
        "operationId": "getProductCountForAllTaxes",
        "responses": {
          "200": {
            "description": "Count of products for each tax rate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxRateProductCountResponse"
                }
              }
            }
          },
          "403": {
            "description": "Not available outside of countries that use sales tax"
          }
        },
        "security": [
          {
            "ZettleOauth": [
              "READ:PRODUCT"
            ]
          }
        ]
      }
    },
    "/v1/taxes/settings": {
      "get": {
        "tags": [
          "taxes"
        ],
        "summary": "Get the organization tax settings ",
        "operationId": "getTaxSettings",
        "responses": {
          "200": {
            "description": "Tax settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxSettingsResponse"
                }
              }
            }
          },
          "403": {
            "description": "Not available outside of countries that use sales tax"
          }
        },
        "security": [
          {
            "ZettleOauth": [
              "READ:PRODUCT"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "taxes"
        ],
        "summary": "Update the organization tax settings",
        "operationId": "setTaxationMode",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxSettingsUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated tax settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxSettingsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Not available outside of countries that use sales tax"
          }
        },
        "security": [
          {
            "ZettleOauth": [
              "WRITE:PRODUCT"
            ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "CategoryDTO": {
        "required": [
          "name",
          "uuid"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          }
        }
      },
      "CreateCategoriesRequest": {
        "required": [
          "categories"
        ],
        "type": "object",
        "properties": {
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryDTO"
            }
          }
        }
      },
      "CategoryResponse": {
        "required": [
          "categories"
        ],
        "type": "object",
        "properties": {
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryDTO"
            }
          }
        }
      },
      "RenameCategoryRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "pattern": "\\S|\\S.*\\S",
            "type": "string"
          }
        }
      },
      "ConstraintViolation": {
        "type": "object",
        "properties": {
          "propertyName": {
            "type": "string"
          },
          "developerMessage": {
            "type": "string"
          },
          "constraintType": {
            "type": "string",
            "enum": [
              "MUST_BE_FALSE",
              "MUST_BE_TRUE",
              "MUST_BE_LESS_THAN",
              "MUST_BE_GREATER_THAN",
              "DIGIT_OUT_OF_BOUNDS",
              "DATE_MUST_BE_IN_THE_FUTURE",
              "MUST_BE_LESS_OR_EQUAL_THAN",
              "MUST_BE_GREATER_OR_EQUAL_TO",
              "MUST_NOT_BE_NULL",
              "MUST_BE_NULL",
              "DATE_MUST_BE_IN_THE_PAST",
              "MUST_MATCH_PATTERN",
              "INVALID_SIZE",
              "INVALID_EMAIL",
              "MUST_NOT_BE_EMPTY",
              "INVALID_RANGE",
              "UNKNOWN"
            ]
          },
          "expected": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "developerMessage": {
            "type": "string"
          },
          "errorType": {
            "type": "string"
          },
          "violations": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConstraintViolation"
            }
          }
        }
      },
      "DiscountRequest": {
        "required": [
          "uuid"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string"
          },
          "description": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string"
          },
          "amount": {
            "$ref": "#/components/schemas/Price"
          },
          "percentage": {
            "maximum": 100,
            "minimum": 0,
            "type": "number"
          },
          "imageLookupKeys": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "externalReference": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string"
          }
        }
      },
      "Price": {
        "required": [
          "amount",
          "currencyId"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "minimum": 0,
            "type": "integer",
            "format": "int64"
          },
          "currencyId": {
            "type": "string",
            "enum": [
              "AED",
              "AFA",
              "AFN",
              "ALL",
              "AMD",
              "ANG",
              "AOA",
              "ARS",
              "AUD",
              "AWG",
              "AZM",
              "AZN",
              "BAM",
              "BBD",
              "BDT",
              "BGN",
              "BHD",
              "BIF",
              "BMD",
              "BND",
              "BOB",
              "BRL",
              "BSD",
              "BTN",
              "BWP",
              "BYR",
              "BZD",
              "CAD",
              "CDF",
              "CHF",
              "CLP",
              "CNY",
              "COP",
              "CRC",
              "CSD",
              "CUC",
              "CUP",
              "CVE",
              "CYP",
              "CZK",
              "DJF",
              "DKK",
              "DOP",
              "DZD",
              "EEK",
              "EGP",
              "ERN",
              "ETB",
              "EUR",
              "FJD",
              "FKP",
              "GBP",
              "GEL",
              "GGP",
              "GHC",
              "GHS",
              "GIP",
              "GMD",
              "GNF",
              "GTQ",
              "GYD",
              "HKD",
              "HNL",
              "HRK",
              "HTG",
              "HUF",
              "IDR",
              "ILS",
              "IMP",
              "INR",
              "IQD",
              "IRR",
              "ISK",
              "JEP",
              "JMD",
              "JOD",
              "JPY",
              "KES",
              "KGS",
              "KHR",
              "KMF",
              "KPW",
              "KRW",
              "KWD",
              "KYD",
              "KZT",
              "LAK",
              "LBP",
              "LKR",
              "LRD",
              "LSL",
              "LTL",
              "LVL",
              "LYD",
              "MAD",
              "MDL",
              "MGA",
              "MKD",
              "MMK",
              "MNT",
              "MOP",
              "MRO",
              "MTL",
              "MUR",
              "MVR",
              "MWK",
              "MXN",
              "MYR",
              "MZM",
              "MZN",
              "NAD",
              "NGN",
              "NIO",
              "NOK",
              "NPR",
              "NZD",
              "OMR",
              "PAB",
              "PEN",
              "PGK",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RSD",
              "RUB",
              "RWF",
              "SAR",
              "SBD",
              "SCR",
              "SDD",
              "SDG",
              "SEK",
              "SGD",
              "SHP",
              "SIT",
              "SKK",
              "SLL",
              "SOS",
              "SPL",
              "SRD",
              "SSP",
              "STD",
              "SVC",
              "SYP",
              "SZL",
              "THB",
              "TJS",
              "TMM",
              "TMT",
              "TND",
              "TOP",
              "TRL",
              "TRY",
              "TTD",
              "TVD",
              "TWD",
              "TZS",
              "UAH",
              "UGX",
              "USD",
              "UYU",
              "UZS",
              "VEB",
              "VEF",
              "VND",
              "VUV",
              "WST",
              "XAF",
              "XAG",
              "XAU",
              "XCD",
              "XDR",
              "XOF",
              "XPD",
              "XPF",
              "XPT",
              "YER",
              "ZAR",
              "ZMK",
              "ZMW",
              "ZWD",
              "ZWL"
            ]
          }
        }
      },
      "DiscountResponse": {
        "required": [
          "created",
          "etag",
          "name",
          "updated",
          "uuid"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "amount": {
            "$ref": "#/components/schemas/Price"
          },
          "percentage": {
            "type": "number"
          },
          "imageLookupKeys": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "externalReference": {
            "type": "string"
          },
          "etag": {
            "type": "string"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ImportResponse": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "state": {
            "type": "string",
            "enum": [
              "IMPORTING",
              "FINISHED_SUCCESS",
              "FINISHED_FAILED"
            ]
          },
          "items": {
            "type": "integer",
            "format": "int64"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "finished": {
            "type": "string",
            "format": "date-time"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "BulkImportRequest": {
        "required": [
          "products"
        ],
        "type": "object",
        "properties": {
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FullProductUpdateRequest"
            }
          }
        }
      },
      "FullProductUpdateRequest": {
        "required": [
          "name",
          "uuid"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "categories": {
            "maxItems": 1,
            "minItems": 0,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "maxLength": 256,
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string"
          },
          "imageLookupKeys": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "presentation": {
            "$ref": "#/components/schemas/PresentationDTO"
          },
          "variants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VariantDTO"
            }
          },
          "externalReference": {
            "type": "string"
          },
          "unitName": {
            "type": "string"
          },
          "vatPercentage": {
            "maximum": 100,
            "minimum": 0,
            "type": "number"
          },
          "online": {
            "$ref": "#/components/schemas/OnlineProperties"
          },
          "variantOptionDefinitions": {
            "$ref": "#/components/schemas/VariantOptionDefinitions"
          },
          "taxCode": {
            "type": "string"
          },
          "category": {
            "$ref": "#/components/schemas/CategoryDTO"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataDTO"
          },
          "taxRates": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "taxExempt": {
            "type": "boolean"
          }
        }
      },
      "MetadataDTO": {
        "required": [
          "inPos"
        ],
        "type": "object",
        "properties": {
          "inPos": {
            "type": "boolean"
          },
          "source": {
            "$ref": "#/components/schemas/SourceDTO"
          }
        }
      },
      "OnlineProperties": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "HIDDEN"
            ]
          },
          "title": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "description": {
            "maxLength": 3500,
            "minLength": 0,
            "type": "string"
          },
          "shipping": {
            "$ref": "#/components/schemas/Shipping"
          },
          "presentation": {
            "$ref": "#/components/schemas/Presentation"
          },
          "seo": {
            "$ref": "#/components/schemas/SearchEngineOptimization"
          }
        }
      },
      "Presentation": {
        "type": "object",
        "properties": {
          "displayImageUrl": {
            "type": "string",
            "format": "url"
          },
          "additionalImageUrls": {
            "maxItems": 25,
            "minItems": 0,
            "type": "array",
            "items": {
              "type": "string",
              "format": "url"
            }
          },
          "mediaUrls": {
            "maxItems": 8,
            "minItems": 0,
            "type": "array",
            "items": {
              "type": "string",
              "format": "url"
            }
          }
        }
      },
      "PresentationDTO": {
        "type": "object",
        "properties": {
          "imageUrl": {
            "type": "string"
          },
          "backgroundColor": {
            "type": "string"
          },
          "textColor": {
            "type": "string"
          }
        }
      },
      "SearchEngineOptimization": {
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "metaDescription": {
            "maxLength": 320,
            "minLength": 0,
            "type": "string"
          },
          "slug": {
            "maxLength": 256,
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "Shipping": {
        "type": "object",
        "properties": {
          "shippingPricingModel": {
            "type": "string",
            "enum": [
              "FREE",
              "STANDARD"
            ]
          },
          "weightInGrams": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "format": "int64"
          },
          "weight": {
            "$ref": "#/components/schemas/Weight"
          }
        }
      },
      "SourceDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "external": {
            "type": "boolean"
          }
        }
      },
      "VariantDTO": {
        "required": [
          "uuid"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string"
          },
          "sku": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string"
          },
          "barcode": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string"
          },
          "price": {
            "$ref": "#/components/schemas/Price"
          },
          "costPrice": {
            "$ref": "#/components/schemas/Price"
          },
          "vatPercentage": {
            "maximum": 100,
            "minimum": 0,
            "type": "number",
            "deprecated": true
          },
          "options": {
            "maxItems": 99,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VariantOption"
            }
          },
          "presentation": {
            "$ref": "#/components/schemas/PresentationDTO"
          }
        }
      },
      "VariantOption": {
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "value": {
            "maxLength": 256,
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "VariantOptionDefinition": {
        "required": [
          "name",
          "properties"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "properties": {
            "maxItems": 99,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VariantOptionProperties"
            }
          }
        }
      },
      "VariantOptionDefinitions": {
        "required": [
          "definitions"
        ],
        "type": "object",
        "properties": {
          "definitions": {
            "maxItems": 3,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VariantOptionDefinition"
            }
          }
        }
      },
      "VariantOptionProperties": {
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "maxLength": 256,
            "minLength": 1,
            "type": "string"
          },
          "imageUrl": {
            "maxLength": 256,
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "Weight": {
        "required": [
          "unit",
          "weight"
        ],
        "type": "object",
        "properties": {
          "weight": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "number"
          },
          "unit": {
            "type": "string",
            "enum": [
              "kg",
              "g",
              "oz",
              "lb"
            ]
          }
        }
      },
      "LibraryImagesResponse": {
        "type": "object",
        "properties": {
          "imageUrls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "LibraryResponse": {
        "type": "object",
        "properties": {
          "untilEventLogUuid": {
            "type": "string",
            "format": "uuid"
          },
          "fromEventLogUuid": {
            "type": "string",
            "format": "uuid"
          },
          "products": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductResponse"
            }
          },
          "discounts": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscountResponse"
            }
          },
          "deletedProducts": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "deletedDiscounts": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
      },
      "ProductResponse": {
        "required": [
          "created",
          "etag",
          "name",
          "updated",
          "uuid",
          "variants"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "categories": {
            "maxItems": 1,
            "minItems": 0,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "imageLookupKeys": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "presentation": {
            "$ref": "#/components/schemas/PresentationDTO"
          },
          "variants": {
            "maxItems": 99,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VariantDTO"
            }
          },
          "externalReference": {
            "type": "string"
          },
          "etag": {
            "type": "string"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "unitName": {
            "type": "string"
          },
          "vatPercentage": {
            "type": "number"
          },
          "online": {
            "$ref": "#/components/schemas/OnlineProperties"
          },
          "variantOptionDefinitions": {
            "$ref": "#/components/schemas/VariantOptionDefinitions"
          },
          "taxCode": {
            "type": "string"
          },
          "category": {
            "$ref": "#/components/schemas/CategoryDTO"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataDTO"
          },
          "taxRates": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "taxExempt": {
            "type": "boolean"
          }
        }
      },
      "SlugResponse": {
        "type": "object",
        "properties": {
          "productName": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          }
        }
      },
      "CreateSlugRequest": {
        "required": [
          "productName"
        ],
        "type": "object",
        "properties": {
          "productName": {
            "maxLength": 256,
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "Option": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "VariantOptionsResponse": {
        "type": "object",
        "properties": {
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Option"
            }
          }
        }
      },
      "ProductCountResponse": {
        "required": [
          "productCount"
        ],
        "type": "object",
        "properties": {
          "productCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ProductCreateRequest": {
        "required": [
          "name",
          "uuid",
          "variants"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "maxLength": 256,
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string"
          },
          "presentation": {
            "$ref": "#/components/schemas/PresentationDTO"
          },
          "variants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VariantDTO"
            }
          },
          "externalReference": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string"
          },
          "unitName": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string"
          },
          "vatPercentage": {
            "maximum": 100,
            "minimum": 0,
            "type": "number",
            "description": "VAT rate for this product. Required for organizations that use VAT."
          },
          "online": {
            "$ref": "#/components/schemas/OnlineProperties"
          },
          "variantOptionDefinitions": {
            "$ref": "#/components/schemas/VariantOptionDefinitions"
          },
          "taxCode": {
            "type": "string"
          },
          "category": {
            "$ref": "#/components/schemas/CategoryDTO"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataDTO"
          },
          "taxRates": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "taxExempt": {
            "type": "boolean"
          },
          "createWithDefaultTax": {
            "type": "boolean"
          }
        }
      },
      "TaxRate": {
        "required": [
          "label",
          "uuid"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "label": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string"
          },
          "percentage": {
            "maximum": 100,
            "type": "number"
          },
          "default": {
            "type": "boolean"
          }
        }
      },
      "TaxRatesResponse": {
        "type": "object",
        "properties": {
          "taxRates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxRate"
            }
          }
        }
      },
      "TaxRatesCreateRequest": {
        "required": [
          "taxRates"
        ],
        "type": "object",
        "properties": {
          "taxRates": {
            "maxItems": 15,
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxRate"
            }
          }
        }
      },
      "TaxRateProductCount": {
        "type": "object",
        "properties": {
          "taxRateUuid": {
            "type": "string",
            "format": "uuid"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TaxRateProductCountResponse": {
        "type": "object",
        "properties": {
          "counts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxRateProductCount"
            }
          }
        }
      },
      "TaxSettingsResponse": {
        "type": "object",
        "properties": {
          "organizationUuid": {
            "type": "string",
            "format": "uuid"
          },
          "taxationType": {
            "type": "string",
            "enum": [
              "NONE",
              "SALES_TAX",
              "VAT"
            ]
          },
          "taxationMode": {
            "type": "string",
            "enum": [
              "EXCLUSIVE",
              "INCLUSIVE"
            ]
          }
        }
      },
      "TaxSettingsUpdateRequest": {
        "required": [
          "taxationMode"
        ],
        "type": "object",
        "properties": {
          "taxationMode": {
            "type": "string",
            "enum": [
              "EXCLUSIVE",
              "INCLUSIVE"
            ]
          }
        }
      },
      "TaxRateUpdateRequest": {
        "type": "object",
        "properties": {
          "label": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string"
          },
          "percentage": {
            "maximum": 100,
            "type": "number"
          },
          "default": {
            "type": "boolean"
          }
        }
      }
    },
    "securitySchemes": {
      "ZettleOauth": {
        "type": "oauth2",
        "description": "For more information about authorization API visit: https://developer.zettle.com/docs/api/oauth/overview",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://oauth.zettle.com/authorize",
            "tokenUrl": "https://oauth.zettle.com/token",
            "scopes": {
              "READ:PRODUCT": "Access to read product library data",
              "WRITE:PRODUCT": "Access to write product library data"
            }
          }
        }
      }
    }
  },
  "x-origin-servers": [
    {
      "url": "https://products.izettle.com",
      "description": "Production"
    }
  ]
}